// Implementation of the LCX Math Library.
//
////////////////////////////////////////////////////////////////////////////////

#if defined(_PC_WINDOW_)
  #pragma warning(disable: 4996)
#endif


#include <math.h>
#include "LcType.h"
#include "LcMath.h"


//++5++++1+++++++++2+++++++++3+++++++++4+++++++++5+++++++++6+++++++++7+++++++++8
//Math table (Little Endian)

// [0.0, 360.0]
static unsigned int g_cos[3604] = {
0x3f800000,0x3f7fffe6,0x3f7fff9a,0x3f7fff1a,0x3f7ffe67,0x3f7ffd81,0x3f7ffc68,0x3f7ffb1c,0x3f7ff99d,0x3f7ff7ea,0x3f7ff605,0x3f7ff3ec,0x3f7ff1a0,0x3f7fef22,0x3f7fec70,0x3f7fe98b,
0x3f7fe673,0x3f7fe328,0x3f7fdfa9,0x3f7fdbf8,0x3f7fd814,0x3f7fd3fc,0x3f7fcfb2,0x3f7fcb34,0x3f7fc684,0x3f7fc1a0,0x3f7fbc89,0x3f7fb73f,0x3f7fb1c2,0x3f7fac12,0x3f7fa62f,0x3f7fa019,
0x3f7f99d0,0x3f7f9354,0x3f7f8ca5,0x3f7f85c3,0x3f7f7eae,0x3f7f7766,0x3f7f6feb,0x3f7f683d,0x3f7f605c,0x3f7f5847,0x3f7f5000,0x3f7f4786,0x3f7f3ed9,0x3f7f35f9,0x3f7f2ce7,0x3f7f23a1,
0x3f7f1a28,0x3f7f107c,0x3f7f069e,0x3f7efc8c,0x3f7ef248,0x3f7ee7d0,0x3f7edd26,0x3f7ed249,0x3f7ec739,0x3f7ebbf6,0x3f7eb081,0x3f7ea4d8,0x3f7e98fd,0x3f7e8cee,0x3f7e80ad,0x3f7e743a,
0x3f7e6793,0x3f7e5aba,0x3f7e4dad,0x3f7e406f,0x3f7e32fd,0x3f7e2558,0x3f7e1781,0x3f7e0977,0x3f7dfb3b,0x3f7deccb,0x3f7dde29,0x3f7dcf55,0x3f7dc04d,0x3f7db113,0x3f7da1a7,0x3f7d9207,
0x3f7d8235,0x3f7d7231,0x3f7d61fa,0x3f7d5190,0x3f7d40f4,0x3f7d3025,0x3f7d1f23,0x3f7d0def,0x3f7cfc89,0x3f7ceaf0,0x3f7cd925,0x3f7cc727,0x3f7cb4f6,0x3f7ca294,0x3f7c8ffe,0x3f7c7d37,
0x3f7c6a3c,0x3f7c5710,0x3f7c43b1,0x3f7c3020,0x3f7c1c5c,0x3f7c0867,0x3f7bf43e,0x3f7bdfe4,0x3f7bcb57,0x3f7bb698,0x3f7ba1a7,0x3f7b8c83,0x3f7b772d,0x3f7b61a5,0x3f7b4beb,0x3f7b35ff,
0x3f7b1fe1,0x3f7b0990,0x3f7af30d,0x3f7adc58,0x3f7ac572,0x3f7aae59,0x3f7a970e,0x3f7a7f91,0x3f7a67e2,0x3f7a5001,0x3f7a37ee,0x3f7a1fa9,0x3f7a0732,0x3f79ee89,0x3f79d5ae,0x3f79bca2,
0x3f79a363,0x3f7989f3,0x3f797051,0x3f79567d,0x3f793c78,0x3f792240,0x3f7907d7,0x3f78ed3c,0x3f78d270,0x3f78b771,0x3f789c42,0x3f7880e0,0x3f78654d,0x3f784988,0x3f782d92,0x3f78116a,
0x3f77f511,0x3f77d886,0x3f77bbca,0x3f779edc,0x3f7781bd,0x3f77646c,0x3f7746ea,0x3f772937,0x3f770b52,0x3f76ed3c,0x3f76cef5,0x3f76b07c,0x3f7691d2,0x3f7672f7,0x3f7653eb,0x3f7634ae,
0x3f76153f,0x3f75f59f,0x3f75d5cf,0x3f75b5cd,0x3f75959a,0x3f757536,0x3f7554a1,0x3f7533db,0x3f7512e4,0x3f74f1bc,0x3f74d064,0x3f74aeda,0x3f748d1f,0x3f746b34,0x3f744918,0x3f7426cb,
0x3f74044e,0x3f73e19f,0x3f73bec0,0x3f739bb1,0x3f737871,0x3f735500,0x3f73315e,0x3f730d8c,0x3f72e98a,0x3f72c557,0x3f72a0f3,0x3f727c5f,0x3f72579b,0x3f7232a6,0x3f720d81,0x3f71e82c,
0x3f71c2a6,0x3f719cf0,0x3f71770a,0x3f7150f4,0x3f712aad,0x3f710437,0x3f70dd90,0x3f70b6b9,0x3f708fb2,0x3f70687b,0x3f704114,0x3f70197d,0x3f6ff1b6,0x3f6fc9c0,0x3f6fa199,0x3f6f7943,
0x3f6f50bc,0x3f6f2806,0x3f6eff20,0x3f6ed60b,0x3f6eacc6,0x3f6e8351,0x3f6e59ac,0x3f6e2fd9,0x3f6e05d5,0x3f6ddba2,0x3f6db13f,0x3f6d86ad,0x3f6d5bec,0x3f6d30fb,0x3f6d05db,0x3f6cda8b,
0x3f6caf0d,0x3f6c835e,0x3f6c5781,0x3f6c2b75,0x3f6bff39,0x3f6bd2ce,0x3f6ba635,0x3f6b796c,0x3f6b4c74,0x3f6b1f4d,0x3f6af1f8,0x3f6ac473,0x3f6a96c0,0x3f6a68dd,0x3f6a3acc,0x3f6a0c8c,
0x3f69de1d,0x3f69af80,0x3f6980b4,0x3f6951ba,0x3f692290,0x3f68f339,0x3f68c3b3,0x3f6893fe,0x3f68641b,0x3f683409,0x3f6803c9,0x3f67d35b,0x3f67a2bf,0x3f6771f4,0x3f6740fb,0x3f670fd4,
0x3f66de7f,0x3f66acfc,0x3f667b4b,0x3f66496b,0x3f66175e,0x3f65e523,0x3f65b2ba,0x3f658022,0x3f654d5e,0x3f651a6b,0x3f64e74b,0x3f64b3fd,0x3f648081,0x3f644cd8,0x3f641901,0x3f63e4fd,
0x3f63b0cb,0x3f637c6b,0x3f6347de,0x3f631324,0x3f62de3d,0x3f62a928,0x3f6273e6,0x3f623e77,0x3f6208da,0x3f61d311,0x3f619d1a,0x3f6166f7,0x3f6130a6,0x3f60fa28,0x3f60c37e,0x3f608ca7,
0x3f6055a2,0x3f601e72,0x3f5fe714,0x3f5faf89,0x3f5f77d2,0x3f5f3fef,0x3f5f07de,0x3f5ecfa1,0x3f5e9738,0x3f5e5ea3,0x3f5e25e1,0x3f5decf2,0x3f5db3d7,0x3f5d7a90,0x3f5d411d,0x3f5d077e,
0x3f5ccdb2,0x3f5c93ba,0x3f5c5997,0x3f5c1f47,0x3f5be4cc,0x3f5baa24,0x3f5b6f51,0x3f5b3452,0x3f5af927,0x3f5abdd0,0x3f5a824e,0x3f5a46a0,0x3f5a0ac7,0x3f59cec2,0x3f599291,0x3f595636,
0x3f5919ae,0x3f58dcfb,0x3f58a01d,0x3f586315,0x3f5825e0,0x3f57e880,0x3f57aaf6,0x3f576d40,0x3f572f60,0x3f56f154,0x3f56b31d,0x3f5674bc,0x3f563630,0x3f55f779,0x3f55b897,0x3f55798a,
0x3f553a54,0x3f54faf2,0x3f54bb66,0x3f547baf,0x3f543bcf,0x3f53fbc3,0x3f53bb8d,0x3f537b2d,0x3f533aa4,0x3f52f9ef,0x3f52b911,0x3f527808,0x3f5236d5,0x3f51f579,0x3f51b3f3,0x3f517242,
0x3f513068,0x3f50ee65,0x3f50ac37,0x3f5069e0,0x3f50275f,0x3f4fe4b5,0x3f4fa1e1,0x3f4f5ee4,0x3f4f1bbd,0x3f4ed86d,0x3f4e94f4,0x3f4e5151,0x3f4e0d85,0x3f4dc990,0x3f4d8572,0x3f4d412b,
0x3f4cfcbb,0x3f4cb822,0x3f4c7361,0x3f4c2e76,0x3f4be962,0x3f4ba426,0x3f4b5ec2,0x3f4b1934,0x3f4ad37e,0x3f4a8da0,0x3f4a479a,0x3f4a016a,0x3f49bb13,0x3f497493,0x3f492deb,0x3f48e71b,
0x3f48a022,0x3f485902,0x3f4811ba,0x3f47ca4a,0x3f4782b1,0x3f473af1,0x3f46f309,0x3f46aafa,0x3f4662c3,0x3f461a64,0x3f45d1de,0x3f458930,0x3f45405b,0x3f44f75f,0x3f44ae3b,0x3f4464ef,
0x3f441b7d,0x3f43d1e4,0x3f438823,0x3f433e3b,0x3f42f42d,0x3f42a9f7,0x3f425f9b,0x3f421517,0x3f41ca6e,0x3f417f9d,0x3f4134a6,0x3f40e988,0x3f409e43,0x3f4052d9,0x3f400747,0x3f3fbb90,
0x3f3f6fb2,0x3f3f23ae,0x3f3ed784,0x3f3e8b34,0x3f3e3ebd,0x3f3df221,0x3f3da55f,0x3f3d5877,0x3f3d0b69,0x3f3cbe35,0x3f3c70dc,0x3f3c235d,0x3f3bd5b8,0x3f3b87ee,0x3f3b39ff,0x3f3aebea,
0x3f3a9db0,0x3f3a4f50,0x3f3a00cc,0x3f39b223,0x3f396354,0x3f391460,0x3f38c548,0x3f38760a,0x3f3826a7,0x3f37d720,0x3f378774,0x3f3737a4,0x3f36e7ae,0x3f369795,0x3f364756,0x3f35f6f5,
0x3f35a66e,0x3f3555c2,0x3f3504f3,0x3f34b400,0x3f3462e8,0x3f3411ad,0x3f33c04d,0x3f336eca,0x3f331d23,0x3f32cb58,0x3f327969,0x3f322757,0x3f31d522,0x3f3182c8,0x3f31304b,0x3f30ddab,
0x3f308ae8,0x3f303801,0x3f2fe4f7,0x3f2f91ca,0x3f2f3e7b,0x3f2eeb08,0x3f2e9772,0x3f2e43b9,0x3f2defde,0x3f2d9bdf,0x3f2d47be,0x3f2cf37b,0x3f2c9f14,0x3f2c4a8d,0x3f2bf5e1,0x3f2ba114,
0x3f2b4c24,0x3f2af713,0x3f2aa1df,0x3f2a4c89,0x3f29f711,0x3f29a178,0x3f294bbc,0x3f28f5df,0x3f289fdf,0x3f2849be,0x3f27f37c,0x3f279d18,0x3f274692,0x3f26efeb,0x3f269924,0x3f26423a,
0x3f25eb2f,0x3f259404,0x3f253cb7,0x3f24e549,0x3f248dbb,0x3f24360b,0x3f23de3b,0x3f23864a,0x3f232e38,0x3f22d606,0x3f227db3,0x3f222540,0x3f21ccac,0x3f2173f8,0x3f211b24,0x3f20c230,
0x3f20691c,0x3f200fe7,0x3f1fb692,0x3f1f5d1f,0x3f1f038b,0x3f1ea9d7,0x3f1e5003,0x3f1df611,0x3f1d9bfe,0x3f1d41cb,0x3f1ce77a,0x3f1c8d09,0x3f1c3279,0x3f1bd7ca,0x3f1b7cfc,0x3f1b220e,
0x3f1ac702,0x3f1a6bd7,0x3f1a108d,0x3f19b524,0x3f19599d,0x3f18fdf6,0x3f18a231,0x3f18464e,0x3f17ea4d,0x3f178e2d,0x3f1731ef,0x3f16d592,0x3f167918,0x3f161c80,0x3f15bfc9,0x3f1562f5,
0x3f150603,0x3f14a8f3,0x3f144bc5,0x3f13ee7a,0x3f139111,0x3f13338c,0x3f12d5e8,0x3f127827,0x3f121a49,0x3f11bc4d,0x3f115e35,0x3f110000,0x3f10a1ad,0x3f10433e,0x3f0fe4b3,0x3f0f860a,
0x3f0f2744,0x3f0ec862,0x3f0e6964,0x3f0e0a49,0x3f0dab12,0x3f0d4bbe,0x3f0cec4f,0x3f0c8cc3,0x3f0c2d1a,0x3f0bcd56,0x3f0b6d76,0x3f0b0d7b,0x3f0aad64,0x3f0a4d30,0x3f09ece1,0x3f098c77,
0x3f092bf1,0x3f08cb52,0x3f086a95,0x3f0809bd,0x3f07a8ca,0x3f0747bc,0x3f06e693,0x3f06854f,0x3f0623f0,0x3f05c276,0x3f0560e4,0x3f04ff35,0x3f049d6b,0x3f043b87,0x3f03d989,0x3f037770,
0x3f03153d,0x3f02b2f0,0x3f02508b,0x3f01ee09,0x3f018b6e,0x3f0128b9,0x3f00c5ea,0x3f006302,0x3effffff,0x3eff39c8,0x3efe735d,0x3efdacc4,0x3efce5f4,0x3efc1ef1,0x3efb57bd,0x3efa9056,
0x3ef9c8bd,0x3ef900f2,0x3ef838f6,0x3ef770cc,0x3ef6a86c,0x3ef5dfdc,0x3ef5171a,0x3ef44e27,0x3ef38504,0x3ef2bbb0,0x3ef1f22b,0x3ef12876,0x3ef05e95,0x3eef9480,0x3eeeca3b,0x3eedffc7,
0x3eed3523,0x3eec6a50,0x3eeb9f4d,0x3eead41c,0x3eea08bf,0x3ee93d30,0x3ee87172,0x3ee7a586,0x3ee6d96c,0x3ee60d23,0x3ee540ad,0x3ee47409,0x3ee3a737,0x3ee2da3c,0x3ee20d0f,0x3ee13fb6,
0x3ee0722f,0x3edfa47c,0x3eded69c,0x3ede088f,0x3edd3a56,0x3edc6bf5,0x3edb9d64,0x3edacea7,0x3ed9ffbf,0x3ed930ab,0x3ed8616b,0x3ed79201,0x3ed6c26b,0x3ed5f2ab,0x3ed522c3,0x3ed452ad,
0x3ed3826d,0x3ed2b203,0x3ed1e16e,0x3ed110b0,0x3ed03fc8,0x3ecf6eb6,0x3ece9d7f,0x3ecdcc1b,0x3eccfa8d,0x3ecc28d7,0x3ecb56f8,0x3eca84f0,0x3ec9b2c0,0x3ec8e068,0x3ec80de7,0x3ec73b43,
0x3ec66873,0x3ec5957b,0x3ec4c25c,0x3ec3ef15,0x3ec31ba8,0x3ec24813,0x3ec17458,0x3ec0a076,0x3ebfcc71,0x3ebef842,0x3ebe23ed,0x3ebd4f73,0x3ebc7ad2,0x3ebba60c,0x3ebad120,0x3eb9fc0f,
0x3eb926dd,0x3eb85182,0x3eb77c02,0x3eb6a65d,0x3eb5d094,0x3eb4faa7,0x3eb42496,0x3eb34e60,0x3eb27807,0x3eb1a18e,0x3eb0caee,0x3eaff42a,0x3eaf1d44,0x3eae463a,0x3ead6f0e,0x3eac97bf,
0x3eabc04d,0x3eaae8bd,0x3eaa1107,0x3ea93930,0x3ea86136,0x3ea7891b,0x3ea6b0de,0x3ea5d880,0x3ea50001,0x3ea42761,0x3ea34ea4,0x3ea275c3,0x3ea19cc1,0x3ea0c39f,0x3e9fea5d,0x3e9f10fa,
0x3e9e3779,0x3e9d5dd7,0x3e9c841a,0x3e9baa3a,0x3e9ad03b,0x3e99f61d,0x3e991be0,0x3e984185,0x3e97670b,0x3e968c73,0x3e95b1bd,0x3e94d6ed,0x3e93fbfb,0x3e9320ec,0x3e9245bf,0x3e916a75,
0x3e908f0f,0x3e8fb38b,0x3e8ed7eb,0x3e8dfc32,0x3e8d2058,0x3e8c4463,0x3e8b6852,0x3e8a8c24,0x3e89afdb,0x3e88d377,0x3e87f6f7,0x3e871a5d,0x3e863dab,0x3e8560da,0x3e8483ef,0x3e83a6e9,
0x3e82c9c9,0x3e81ec8f,0x3e810f3b,0x3e8031cd,0x3e7ea894,0x3e7ced52,0x3e7b31de,0x3e797638,0x3e77ba60,0x3e75fe56,0x3e74421c,0x3e7285b0,0x3e70c915,0x3e6f0c51,0x3e6d4f55,0x3e6b922a,
0x3e69d4d0,0x3e681748,0x3e665991,0x3e649bac,0x3e62dd99,0x3e611f59,0x3e5f60f4,0x3e5da25b,0x3e5be395,0x3e5a24a3,0x3e586586,0x3e56a63e,0x3e54e6cb,0x3e53272d,0x3e51676d,0x3e4fa77c,
0x3e4de761,0x3e4c271c,0x3e4a66af,0x3e48a61a,0x3e46e55d,0x3e452478,0x3e43636b,0x3e41a23f,0x3e3fe0e5,0x3e3e1f65,0x3e3c5dbf,0x3e3a9bf3,0x3e38da01,0x3e3717eb,0x3e3555b0,0x3e339359,
0x3e31d0d7,0x3e300e30,0x3e2e4b67,0x3e2c887b,0x3e2ac56c,0x3e29023b,0x3e273ee9,0x3e257b75,0x3e23b7e8,0x3e21f432,0x3e20305d,0x3e1e6c67,0x3e1ca851,0x3e1ae41c,0x3e191fc9,0x3e175b56,
0x3e1596ce,0x3e13d21f,0x3e120d54,0x3e10486b,0x3e0e8365,0x3e0cbe42,0x3e0af904,0x3e0933aa,0x3e076e34,0x3e05a8ac,0x3e03e301,0x3e021d3b,0x3e00575b,0x3dfd22c5,0x3df996a0,0x3df60a49,
0x3df27dc1,0x3deef119,0x3deb6431,0x3de7d71a,0x3de449d5,0x3de0bc62,0x3ddd2ec2,0x3dd9a0f7,0x3dd612ff,0x3dd284dd,0x3dcef6a1,0x3dcb682c,0x3dc7d98e,0x3dc44ac8,0x3dc0bbdb,0x3dbd2cc8,
0x3db99d8f,0x3db60e30,0x3db27ebe,0x3daeef17,0x3dab5f4e,0x3da7cf63,0x3da43f56,0x3da0af28,0x3d9d1eda,0x3d998e6d,0x3d95fde1,0x3d926d47,0x3d8edc80,0x3d8b4b9d,0x3d87ba9e,0x3d842983,
0x3d80984e,0x3d7a0e00,0x3d72eb31,0x3d6bc852,0x3d64a523,0x3d5d81c7,0x3d565e3f,0x3d4f3a8c,0x3d4816af,0x3d40f2ab,0x3d39ce80,0x3d32aa30,0x3d2b85dc,0x3d246146,0x3d1d3c90,0x3d1617ba,
0x3d0ef2c6,0x3d07cdb5,0x3d00a889,0x3cf30687,0x3ce4bbcc,0x3cd67123,0x3cc8260f,0x3cb9dad3,0x3cab8f73,0x3c9d43ef,0x3c8ef84d,0x3c80ac8e,0x3c64c16a,0x3c482a0b,0x3c2b9204,0x3c0ef9da,
0x3be4c328,0x3bab926f,0x3b64c326,0x3ae4c281,0xb33bbd2e,0xbae4c570,0xbb64c29d,0xbbab922a,0xbbe4c2e4,0xbc0ef9b8,0xbc2b91e1,0xbc4829e9,0xbc64c1c8,0xbc80acbd,0xbc8ef83c,0xbc9d43de,
0xbcab8f61,0xbcb9dac2,0xbcc825fe,0xbcd67112,0xbce4bbfb,0xbcf306b6,0xbd00a8a1,0xbd07cdac,0xbd0ef2bd,0xbd1617b1,0xbd1d3c87,0xbd24613e,0xbd2b85d4,0xbd32aa48,0xbd39ce98,0xbd40f2a2,
0xbd4816a7,0xbd4f3a83,0xbd565e36,0xbd5d81bf,0xbd64a51b,0xbd6bc849,0xbd72eb49,0xbd7a0e17,0xbd80984a,0xbd84297f,0xbd87ba99,0xbd8b4b99,0xbd8edc7c,0xbd926d43,0xbd95fded,0xbd998e79,
0xbd9d1ed6,0xbda0af24,0xbda43f51,0xbda7cf5e,0xbdab5f4a,0xbdaeef13,0xbdb27eb9,0xbdb60e3c,0xbdb99d9a,0xbdbd2cc4,0xbdc0bbd7,0xbdc44ac4,0xbdc7d98a,0xbdcb6828,0xbdcef69d,0xbdd284e9,
0xbdd6130b,0xbdd9a0f2,0xbddd2ebe,0xbde0bc5e,0xbde449d1,0xbde7d716,0xbdeb642d,0xbdeef115,0xbdf27dcd,0xbdf60a55,0xbdf9969b,0xbdfd22c0,0xbe005759,0xbe021d39,0xbe03e2fe,0xbe05a8aa,
0xbe076e3a,0xbe0933b0,0xbe0af90a,0xbe0cbe40,0xbe0e8363,0xbe104868,0xbe120d51,0xbe13d21d,0xbe1596cc,0xbe175b5c,0xbe191fce,0xbe1ae41a,0xbe1ca84f,0xbe1e6c65,0xbe20305a,0xbe21f430,
0xbe23b7e6,0xbe257b7b,0xbe273eef,0xbe290241,0xbe2ac56a,0xbe2c8879,0xbe2e4b65,0xbe300e2e,0xbe31d0d5,0xbe339357,0xbe3555b6,0xbe3717f1,0xbe38d9ff,0xbe3a9bf0,0xbe3c5dbc,0xbe3e1f63,
0xbe3fe0e3,0xbe41a23d,0xbe436371,0xbe45247d,0xbe46e562,0xbe48a618,0xbe4a66ad,0xbe4c271a,0xbe4de75e,0xbe4fa77a,0xbe51676b,0xbe532733,0xbe54e6d1,0xbe56a63c,0xbe586584,0xbe5a24a1,
0xbe5be393,0xbe5da259,0xbe5f60f2,0xbe611f5f,0xbe62dd9f,0xbe649bb1,0xbe66598e,0xbe681745,0xbe69d4ce,0xbe6b9228,0xbe6d4f53,0xbe6f0c4f,0xbe70c91a,0xbe7285b6,0xbe74421a,0xbe75fe54,
0xbe77ba5e,0xbe797636,0xbe7b31dc,0xbe7ced50,0xbe7ea892,0xbe8031d0,0xbe810f3e,0xbe81ec8e,0xbe82c9c8,0xbe83a6e8,0xbe8483ee,0xbe8560d9,0xbe863daa,0xbe871a5f,0xbe87f6fa,0xbe88d376,
0xbe89afda,0xbe8a8c23,0xbe8b6851,0xbe8c4462,0xbe8d2057,0xbe8dfc31,0xbe8ed7ed,0xbe8fb38e,0xbe908f0e,0xbe916a74,0xbe9245be,0xbe9320eb,0xbe93fbfa,0xbe94d6ec,0xbe95b1c0,0xbe968c76,
0xbe97670a,0xbe984184,0xbe991bdf,0xbe99f61c,0xbe9ad03a,0xbe9baa39,0xbe9c8419,0xbe9d5dda,0xbe9e377b,0xbe9f10f9,0xbe9fea5c,0xbea0c39e,0xbea19cc0,0xbea275c2,0xbea34ea3,0xbea42764,
0xbea50004,0xbea5d883,0xbea6b0dd,0xbea7891a,0xbea86135,0xbea9392f,0xbeaa1106,0xbeaae8bc,0xbeabc050,0xbeac97c2,0xbead6f0d,0xbeae4639,0xbeaf1d43,0xbeaff429,0xbeb0caed,0xbeb1a18d,
0xbeb2780a,0xbeb34e63,0xbeb42498,0xbeb4faa6,0xbeb5d093,0xbeb6a65c,0xbeb77c01,0xbeb85181,0xbeb926dc,0xbeb9fc12,0xbebad123,0xbebba60b,0xbebc7ad1,0xbebd4f72,0xbebe23ec,0xbebef841,
0xbebfcc70,0xbec0a078,0xbec1745a,0xbec24816,0xbec31ba7,0xbec3ef14,0xbec4c25b,0xbec5957a,0xbec66872,0xbec73b42,0xbec80dea,0xbec8e06b,0xbec9b2bf,0xbeca84ef,0xbecb56f7,0xbecc28d6,
0xbeccfa8c,0xbecdcc1a,0xbece9d7e,0xbecf6eb9,0xbed03fcb,0xbed110af,0xbed1e16d,0xbed2b202,0xbed3826c,0xbed452ac,0xbed522c2,0xbed5f2aa,0xbed6c26e,0xbed79200,0xbed8616e,0xbed930aa,
0xbed9ffc1,0xbedacea6,0xbedb9d60,0xbedc6bf4,0xbedd3a55,0xbede0892,0xbeded69b,0xbedfa47e,0xbee0722e,0xbee13fb8,0xbee20d0e,0xbee2da37,0xbee3a73a,0xbee47408,0xbee540b0,0xbee60d22,
0xbee6d96e,0xbee7a585,0xbee87175,0xbee93d2f,0xbeea08bb,0xbeead41e,0xbeeb9f4c,0xbeec6a52,0xbeed3522,0xbeedffca,0xbeeeca3b,0xbeef947c,0xbef05e94,0xbef12876,0xbef1f22e,0xbef2bbaf,
0xbef38506,0xbef44e26,0xbef5171c,0xbef5dfdb,0xbef6a868,0xbef770cb,0xbef838f5,0xbef900f5,0xbef9c8bc,0xbefa9059,0xbefb57bc,0xbefc1ef4,0xbefce5f3,0xbefdacbf,0xbefe7360,0xbeff39c7,
0xbf000001,0xbf006301,0xbf00c5ec,0xbf0128b9,0xbf018b6f,0xbf01ee09,0xbf025088,0xbf02b2f1,0xbf03153d,0xbf037771,0xbf03d988,0xbf043b89,0xbf049d6b,0xbf04ff33,0xbf0560e3,0xbf05c276,
0xbf0623f1,0xbf06854f,0xbf06e694,0xbf0747bc,0xbf07a8cb,0xbf0809bd,0xbf086a93,0xbf08cb51,0xbf092bf1,0xbf098c78,0xbf09ece1,0xbf0a4d32,0xbf0aad63,0xbf0b0d7d,0xbf0b6d77,0xbf0bcd55,
0xbf0c2d1b,0xbf0c8cc1,0xbf0cec4f,0xbf0d4bbd,0xbf0dab13,0xbf0e0a49,0xbf0e6965,0xbf0ec862,0xbf0f2743,0xbf0f860a,0xbf0fe4b1,0xbf10433f,0xbf10a1ad,0xbf110001,0xbf115e35,0xbf11bc4f,
0xbf121a49,0xbf127826,0xbf12d5e8,0xbf13338a,0xbf139112,0xbf13ee7a,0xbf144bc7,0xbf14a8f3,0xbf150601,0xbf1562f5,0xbf15bfc8,0xbf161c80,0xbf167917,0xbf16d594,0xbf1731ee,0xbf178e2e,
0xbf17ea4d,0xbf18464d,0xbf18a232,0xbf18fdf5,0xbf19599d,0xbf19b523,0xbf1a108e,0xbf1a6bd6,0xbf1ac703,0xbf1b220e,0xbf1b7cfa,0xbf1bd7ca,0xbf1c3278,0xbf1c8d0a,0xbf1ce779,0xbf1d41cd,
0xbf1d9bfd,0xbf1df612,0xbf1e5003,0xbf1ea9d5,0xbf1f038b,0xbf1f5d1e,0xbf1fb694,0xbf200fe7,0xbf20691d,0xbf20c230,0xbf211b23,0xbf2173f8,0xbf21ccab,0xbf222540,0xbf227db2,0xbf22d607,
0xbf232e38,0xbf23864b,0xbf23de3b,0xbf24360a,0xbf248dbb,0xbf24e548,0xbf253cb8,0xbf259403,0xbf25eb31,0xbf26423a,0xbf269925,0xbf26efec,0xbf274691,0xbf279d18,0xbf27f37b,0xbf2849bf,
0xbf289fdf,0xbf28f5e0,0xbf294bbc,0xbf29a179,0xbf29f712,0xbf2a4c88,0xbf2aa1e0,0xbf2af712,0xbf2b4c26,0xbf2ba114,0xbf2bf5e3,0xbf2c4a8c,0xbf2c9f13,0xbf2cf37b,0xbf2d47bd,0xbf2d9be0,
0xbf2defdd,0xbf2e43ba,0xbf2e9771,0xbf2eeb09,0xbf2f3e7b,0xbf2f91c9,0xbf2fe4f8,0xbf303800,0xbf308ae9,0xbf30ddab,0xbf31304c,0xbf3182c8,0xbf31d523,0xbf322757,0xbf327968,0xbf32cb58,
0xbf331d22,0xbf336ecb,0xbf33c04d,0xbf3411ae,0xbf3462e8,0xbf34b401,0xbf3504f3,0xbf3555c1,0xbf35a66e,0xbf35f6f3,0xbf364757,0xbf369794,0xbf36e7b0,0xbf3737a3,0xbf378775,0xbf37d720,
0xbf3826a6,0xbf38760a,0xbf38c546,0xbf391461,0xbf396353,0xbf39b224,0xbf3a00cc,0xbf3a4f4f,0xbf3a9db0,0xbf3aebe9,0xbf3b3a00,0xbf3b87ee,0xbf3bd5b9,0xbf3c235d,0xbf3c70dd,0xbf3cbe35,
0xbf3d0b68,0xbf3d5877,0xbf3da55e,0xbf3df222,0xbf3e3ebd,0xbf3e8b34,0xbf3ed784,0xbf3f23af,0xbf3f6fb2,0xbf3fbb8f,0xbf400748,0xbf4052d8,0xbf409e44,0xbf40e987,0xbf4134a7,0xbf417f9d,
0xbf41ca6f,0xbf421518,0xbf425f9a,0xbf42a9f8,0xbf42f42c,0xbf433e3c,0xbf438823,0xbf43d1e5,0xbf441b7d,0xbf4464ee,0xbf44ae3b,0xbf44f75e,0xbf45405c,0xbf458930,0xbf45d1df,0xbf461a64,
0xbf4662c4,0xbf46aafa,0xbf46f308,0xbf473af2,0xbf4782b1,0xbf47ca4a,0xbf4811b9,0xbf485903,0xbf48a022,0xbf48e71c,0xbf492deb,0xbf497492,0xbf49bb13,0xbf4a0169,0xbf4a479a,0xbf4a8da0,
0xbf4ad37f,0xbf4b1934,0xbf4b5ec3,0xbf4ba426,0xbf4be961,0xbf4c2e76,0xbf4c7360,0xbf4cb823,0xbf4cfcbb,0xbf4d412c,0xbf4d8572,0xbf4dc98f,0xbf4e0d85,0xbf4e5150,0xbf4e94f4,0xbf4ed86c,
0xbf4f1bbe,0xbf4f5ee3,0xbf4fa1e2,0xbf4fe4b5,0xbf50275e,0xbf5069e0,0xbf50ac36,0xbf50ee65,0xbf513068,0xbf517243,0xbf51b3f3,0xbf51f57a,0xbf5236d6,0xbf527807,0xbf52b911,0xbf52f9ee,
0xbf533aa4,0xbf537b2d,0xbf53bb8e,0xbf53fbc3,0xbf543bcf,0xbf547baf,0xbf54bb65,0xbf54faf2,0xbf553a53,0xbf55798b,0xbf55b897,0xbf55f779,0xbf56362f,0xbf5674bd,0xbf56b31d,0xbf56f153,
0xbf572f60,0xbf576d40,0xbf57aaf6,0xbf57e880,0xbf5825e1,0xbf586314,0xbf58a01c,0xbf58dcfc,0xbf5919ad,0xbf595636,0xbf599291,0xbf59cec2,0xbf5a0ac6,0xbf5a46a1,0xbf5a824e,0xbf5abdcf,
0xbf5af927,0xbf5b3451,0xbf5b6f51,0xbf5baa24,0xbf5be4cc,0xbf5c1f47,0xbf5c5998,0xbf5c93bb,0xbf5ccdb1,0xbf5d077e,0xbf5d411c,0xbf5d7a91,0xbf5db3d7,0xbf5decf3,0xbf5e25e0,0xbf5e5ea3,
0xbf5e9738,0xbf5ecfa1,0xbf5f07df,0xbf5f3fee,0xbf5f77d3,0xbf5faf89,0xbf5fe715,0xbf601e71,0xbf6055a2,0xbf608ca7,0xbf60c37d,0xbf60fa29,0xbf6130a6,0xbf6166f7,0xbf619d1a,0xbf61d312,
0xbf6208da,0xbf623e76,0xbf6273e6,0xbf62a927,0xbf62de3d,0xbf631324,0xbf6347df,0xbf637c6b,0xbf63b0cb,0xbf63e4fd,0xbf641900,0xbf644cd8,0xbf648080,0xbf64b3fd,0xbf64e74a,0xbf651a6c,
0xbf654d5e,0xbf658023,0xbf65b2ba,0xbf65e522,0xbf66175e,0xbf66496b,0xbf667b4b,0xbf66acfc,0xbf66de80,0xbf670fd4,0xbf6740fc,0xbf6771f4,0xbf67a2be,0xbf67d35c,0xbf6803c9,0xbf68340a,
0xbf68641b,0xbf6893ff,0xbf68c3b3,0xbf68f338,0xbf692291,0xbf6951b9,0xbf6980b5,0xbf69af80,0xbf69de1e,0xbf6a0c8c,0xbf6a3acd,0xbf6a68dd,0xbf6a96bf,0xbf6ac473,0xbf6af1f7,0xbf6b1f4e,
0xbf6b4c74,0xbf6b796c,0xbf6ba635,0xbf6bd2cf,0xbf6bff39,0xbf6c2b74,0xbf6c5781,0xbf6c835e,0xbf6caf0d,0xbf6cda8b,0xbf6d05db,0xbf6d30fb,0xbf6d5bed,0xbf6d86ad,0xbf6db13f,0xbf6ddba2,
0xbf6e05d5,0xbf6e2fd9,0xbf6e59ac,0xbf6e8352,0xbf6eacc6,0xbf6ed60a,0xbf6eff21,0xbf6f2806,0xbf6f50bd,0xbf6f7942,0xbf6fa199,0xbf6fc9bf,0xbf6ff1b7,0xbf70197d,0xbf704114,0xbf70687b,
0xbf708fb2,0xbf70b6b9,0xbf70dd90,0xbf710437,0xbf712aad,0xbf7150f5,0xbf71770a,0xbf719cf0,0xbf71c2a7,0xbf71e82c,0xbf720d82,0xbf7232a6,0xbf72579c,0xbf727c5f,0xbf72a0f4,0xbf72c557,
0xbf72e989,0xbf730d8d,0xbf73315e,0xbf735500,0xbf737870,0xbf739bb1,0xbf73bec0,0xbf73e19f,0xbf74044e,0xbf7426cb,0xbf744918,0xbf746b34,0xbf748d20,0xbf74aeda,0xbf74d064,0xbf74f1bc,
0xbf7512e3,0xbf7533db,0xbf7554a0,0xbf757536,0xbf759599,0xbf75b5cd,0xbf75d5ce,0xbf75f5a0,0xbf76153f,0xbf7634ad,0xbf7653eb,0xbf7672f7,0xbf7691d3,0xbf76b07c,0xbf76cef5,0xbf76ed3c,
0xbf770b53,0xbf772937,0xbf7746ea,0xbf77646c,0xbf7781bd,0xbf779edc,0xbf77bbca,0xbf77d886,0xbf77f511,0xbf78116b,0xbf782d92,0xbf784988,0xbf78654d,0xbf7880e0,0xbf789c42,0xbf78b771,
0xbf78d270,0xbf78ed3c,0xbf7907d7,0xbf792240,0xbf793c77,0xbf79567d,0xbf797051,0xbf7989f3,0xbf79a363,0xbf79bca2,0xbf79d5ae,0xbf79ee89,0xbf7a0732,0xbf7a1fa8,0xbf7a37ee,0xbf7a5000,
0xbf7a67e2,0xbf7a7f91,0xbf7a970e,0xbf7aae59,0xbf7ac571,0xbf7adc59,0xbf7af30d,0xbf7b0990,0xbf7b1fe0,0xbf7b35ff,0xbf7b4beb,0xbf7b61a6,0xbf7b772d,0xbf7b8c83,0xbf7ba1a7,0xbf7bb698,
0xbf7bcb57,0xbf7bdfe4,0xbf7bf43f,0xbf7c0866,0xbf7c1c5c,0xbf7c3020,0xbf7c43b1,0xbf7c5710,0xbf7c6a3c,0xbf7c7d37,0xbf7c8ffe,0xbf7ca294,0xbf7cb4f6,0xbf7cc726,0xbf7cd925,0xbf7ceaf0,
0xbf7cfc89,0xbf7d0def,0xbf7d1f24,0xbf7d3025,0xbf7d40f4,0xbf7d5190,0xbf7d61f9,0xbf7d7231,0xbf7d8235,0xbf7d9207,0xbf7da1a6,0xbf7db113,0xbf7dc04d,0xbf7dcf55,0xbf7dde29,0xbf7deccb,
0xbf7dfb3b,0xbf7e0977,0xbf7e1781,0xbf7e2558,0xbf7e32fd,0xbf7e406e,0xbf7e4dad,0xbf7e5aba,0xbf7e6793,0xbf7e743a,0xbf7e80ad,0xbf7e8cef,0xbf7e98fd,0xbf7ea4d8,0xbf7eb081,0xbf7ebbf6,
0xbf7ec739,0xbf7ed249,0xbf7edd26,0xbf7ee7d0,0xbf7ef248,0xbf7efc8c,0xbf7f069e,0xbf7f107c,0xbf7f1a28,0xbf7f23a1,0xbf7f2ce6,0xbf7f35fa,0xbf7f3ed9,0xbf7f4786,0xbf7f5000,0xbf7f5848,
0xbf7f605c,0xbf7f683d,0xbf7f6feb,0xbf7f7766,0xbf7f7eae,0xbf7f85c3,0xbf7f8ca5,0xbf7f9354,0xbf7f99d0,0xbf7fa019,0xbf7fa62f,0xbf7fac12,0xbf7fb1c2,0xbf7fb73f,0xbf7fbc89,0xbf7fc1a0,
0xbf7fc684,0xbf7fcb34,0xbf7fcfb2,0xbf7fd3fc,0xbf7fd814,0xbf7fdbf8,0xbf7fdfa9,0xbf7fe328,0xbf7fe673,0xbf7fe98b,0xbf7fec70,0xbf7fef22,0xbf7ff1a0,0xbf7ff3ec,0xbf7ff605,0xbf7ff7ea,
0xbf7ff99d,0xbf7ffb1c,0xbf7ffc68,0xbf7ffd81,0xbf7ffe67,0xbf7fff1a,0xbf7fff9a,0xbf7fffe6,0xbf800000,0xbf7fffe6,0xbf7fff9a,0xbf7fff1a,0xbf7ffe67,0xbf7ffd81,0xbf7ffc68,0xbf7ffb1c,
0xbf7ff99d,0xbf7ff7ea,0xbf7ff605,0xbf7ff3ec,0xbf7ff1a0,0xbf7fef22,0xbf7fec70,0xbf7fe98b,0xbf7fe673,0xbf7fe328,0xbf7fdfa9,0xbf7fdbf8,0xbf7fd814,0xbf7fd3fc,0xbf7fcfb2,0xbf7fcb34,
0xbf7fc684,0xbf7fc1a0,0xbf7fbc89,0xbf7fb73f,0xbf7fb1c2,0xbf7fac12,0xbf7fa62f,0xbf7fa019,0xbf7f99d0,0xbf7f9354,0xbf7f8ca5,0xbf7f85c3,0xbf7f7eae,0xbf7f7766,0xbf7f6feb,0xbf7f683d,
0xbf7f605c,0xbf7f5847,0xbf7f5000,0xbf7f4786,0xbf7f3ed9,0xbf7f35fa,0xbf7f2ce7,0xbf7f23a1,0xbf7f1a28,0xbf7f107c,0xbf7f069e,0xbf7efc8c,0xbf7ef248,0xbf7ee7d0,0xbf7edd26,0xbf7ed249,
0xbf7ec739,0xbf7ebbf6,0xbf7eb081,0xbf7ea4d8,0xbf7e98fd,0xbf7e8cee,0xbf7e80ad,0xbf7e743a,0xbf7e6793,0xbf7e5aba,0xbf7e4dad,0xbf7e406f,0xbf7e32fd,0xbf7e2558,0xbf7e1781,0xbf7e0977,
0xbf7dfb3b,0xbf7deccb,0xbf7dde29,0xbf7dcf54,0xbf7dc04d,0xbf7db113,0xbf7da1a7,0xbf7d9207,0xbf7d8235,0xbf7d7231,0xbf7d61fa,0xbf7d5190,0xbf7d40f3,0xbf7d3025,0xbf7d1f23,0xbf7d0def,
0xbf7cfc89,0xbf7ceaf0,0xbf7cd925,0xbf7cc727,0xbf7cb4f6,0xbf7ca293,0xbf7c8ffe,0xbf7c7d36,0xbf7c6a3c,0xbf7c5710,0xbf7c43b1,0xbf7c3020,0xbf7c1c5c,0xbf7c0867,0xbf7bf43e,0xbf7bdfe4,
0xbf7bcb57,0xbf7bb698,0xbf7ba1a7,0xbf7b8c83,0xbf7b772e,0xbf7b61a5,0xbf7b4beb,0xbf7b35ff,0xbf7b1fe1,0xbf7b0990,0xbf7af30d,0xbf7adc59,0xbf7ac571,0xbf7aae59,0xbf7a970d,0xbf7a7f91,
0xbf7a67e1,0xbf7a5001,0xbf7a37ee,0xbf7a1fa9,0xbf7a0732,0xbf79ee89,0xbf79d5af,0xbf79bca1,0xbf79a363,0xbf7989f3,0xbf797051,0xbf79567e,0xbf793c77,0xbf792240,0xbf7907d7,0xbf78ed3c,
0xbf78d26f,0xbf78b772,0xbf789c41,0xbf7880e0,0xbf78654d,0xbf784988,0xbf782d92,0xbf78116a,0xbf77f511,0xbf77d886,0xbf77bbca,0xbf779edc,0xbf7781bd,0xbf77646d,0xbf7746ea,0xbf772937,
0xbf770b52,0xbf76ed3c,0xbf76cef4,0xbf76b07c,0xbf7691d2,0xbf7672f7,0xbf7653ec,0xbf7634ad,0xbf76153f,0xbf75f59f,0xbf75d5cf,0xbf75b5cc,0xbf75959a,0xbf757536,0xbf7554a1,0xbf7533db,
0xbf7512e4,0xbf74f1bc,0xbf74d063,0xbf74aeda,0xbf748d1f,0xbf746b34,0xbf744919,0xbf7426cb,0xbf74044e,0xbf73e19f,0xbf73bec1,0xbf739bb0,0xbf737871,0xbf7354ff,0xbf73315e,0xbf730d8d,
0xbf72e98a,0xbf72c557,0xbf72a0f3,0xbf727c60,0xbf72579b,0xbf7232a7,0xbf720d81,0xbf71e82c,0xbf71c2a7,0xbf719cf0,0xbf71770b,0xbf7150f4,0xbf712aae,0xbf710436,0xbf70dd90,0xbf70b6ba,
0xbf708fb2,0xbf70687c,0xbf704114,0xbf70197e,0xbf6ff1b6,0xbf6fc9c0,0xbf6fa198,0xbf6f7943,0xbf6f50bd,0xbf6f2806,0xbf6eff21,0xbf6ed60b,0xbf6eacc6,0xbf6e8350,0xbf6e59ad,0xbf6e2fd8,
0xbf6e05d5,0xbf6ddba2,0xbf6db13f,0xbf6d86ae,0xbf6d5beb,0xbf6d30fb,0xbf6d05da,0xbf6cda8b,0xbf6caf0c,0xbf6c835e,0xbf6c5782,0xbf6c2b75,0xbf6bff3a,0xbf6bd2ce,0xbf6ba635,0xbf6b796b,
0xbf6b4c74,0xbf6b1f4e,0xbf6af1f7,0xbf6ac474,0xbf6a96bf,0xbf6a68de,0xbf6a3acb,0xbf6a0c8c,0xbf69de1d,0xbf69af80,0xbf6980b5,0xbf6951b9,0xbf692291,0xbf68f338,0xbf68c3b3,0xbf6893fd,
0xbf68641b,0xbf683409,0xbf6803ca,0xbf67d35c,0xbf67a2bf,0xbf6771f5,0xbf6740fb,0xbf670fd5,0xbf66de7e,0xbf66acfc,0xbf667b4a,0xbf66496b,0xbf66175f,0xbf65e522,0xbf65b2ba,0xbf658022,
0xbf654d5e,0xbf651a6a,0xbf64e74b,0xbf64b3fc,0xbf648081,0xbf644cd8,0xbf641901,0xbf63e4fd,0xbf63b0ca,0xbf637c6c,0xbf6347de,0xbf631324,0xbf62de3e,0xbf62a928,0xbf6273e7,0xbf623e76,
0xbf6208db,0xbf61d310,0xbf619d1b,0xbf6166f6,0xbf6130a6,0xbf60fa29,0xbf60c37e,0xbf608ca7,0xbf6055a2,0xbf601e72,0xbf5fe713,0xbf5faf8a,0xbf5f77d1,0xbf5f3fef,0xbf5f07df,0xbf5ecfa1,
0xbf5e9739,0xbf5e5ea2,0xbf5e25e1,0xbf5decf1,0xbf5db3d7,0xbf5d7a8f,0xbf5d411d,0xbf5d077e,0xbf5ccdb2,0xbf5c93bb,0xbf5c5996,0xbf5c1f48,0xbf5be4cb,0xbf5baa24,0xbf5b6f52,0xbf5b3452,
0xbf5af928,0xbf5abdd0,0xbf5a824f,0xbf5a46a0,0xbf5a0ac7,0xbf59cec1,0xbf599291,0xbf595636,0xbf5919ae,0xbf58dcfc,0xbf58a01d,0xbf586315,0xbf5825df,0xbf57e881,0xbf57aaf5,0xbf576d40,
0xbf572f60,0xbf56f154,0xbf56b31e,0xbf5674bb,0xbf563630,0xbf55f778,0xbf55b897,0xbf55798a,0xbf553a53,0xbf54faf3,0xbf54bb66,0xbf547bb0,0xbf543bce,0xbf53fbc3,0xbf53bb8d,0xbf537b2e,
0xbf533aa5,0xbf52f9ef,0xbf52b912,0xbf527808,0xbf5236d6,0xbf51f578,0xbf51b3f3,0xbf517242,0xbf513069,0xbf50ee66,0xbf50ac37,0xbf5069e1,0xbf50275f,0xbf4fe4b5,0xbf4fa1e0,0xbf4f5ee4,
0xbf4f1bbc,0xbf4ed86d,0xbf4e94f5,0xbf4e5151,0xbf4e0d86,0xbf4dc990,0xbf4d8573,0xbf4d412a,0xbf4cfcbb,0xbf4cb821,0xbf4c7360,0xbf4c2e77,0xbf4be962,0xbf4ba427,0xbf4b5ec1,0xbf4b1935,
0xbf4ad37e,0xbf4a8da0,0xbf4a4798,0xbf4a016a,0xbf49bb14,0xbf497492,0xbf492dec,0xbf48e71a,0xbf48a023,0xbf485901,0xbf4811ba,0xbf47ca4b,0xbf4782b1,0xbf473af2,0xbf46f309,0xbf46aafb,
0xbf4662c2,0xbf461a65,0xbf45d1dd,0xbf458930,0xbf45405c,0xbf44f75e,0xbf44ae3b,0xbf4464ef,0xbf441b7e,0xbf43d1e3,0xbf438823,0xbf433e3a,0xbf42f42d,0xbf42a9f8,0xbf425f9a,0xbf421518,
0xbf41ca6d,0xbf417f9d,0xbf4134a5,0xbf40e988,0xbf409e42,0xbf4052d9,0xbf400748,0xbf3fbb8f,0xbf3f6fb3,0xbf3f23ad,0xbf3ed784,0xbf3e8b33,0xbf3e3ebd,0xbf3df222,0xbf3da55f,0xbf3d5878,
0xbf3d0b68,0xbf3cbe36,0xbf3c70db,0xbf3c235d,0xbf3bd5b7,0xbf3b87ee,0xbf3b3a00,0xbf3aebea,0xbf3a9db1,0xbf3a4f50,0xbf3a00cd,0xbf39b222,0xbf396354,0xbf39145f,0xbf38c547,0xbf38760b,
0xbf3826a7,0xbf37d721,0xbf378773,0xbf3737a4,0xbf36e7ad,0xbf369795,0xbf364755,0xbf35f6f4,0xbf35a66f,0xbf3555c2,0xbf3504f4,0xbf34b3ff,0xbf3462e9,0xbf3411ac,0xbf33c04e,0xbf336ecc,
0xbf331d23,0xbf32cb59,0xbf327969,0xbf322758,0xbf31d521,0xbf3182c9,0xbf31304a,0xbf30ddac,0xbf308ae9,0xbf303801,0xbf2fe4f9,0xbf2f91ca,0xbf2f3e7b,0xbf2eeb07,0xbf2e9772,0xbf2e43b8,
0xbf2defde,0xbf2d9be1,0xbf2d47be,0xbf2cf37c,0xbf2c9f14,0xbf2c4a8d,0xbf2bf5e0,0xbf2ba114,0xbf2b4c23,0xbf2af713,0xbf2aa1e0,0xbf2a4c89,0xbf29f712,0xbf29a177,0xbf294bbd,0xbf28f5dd,
0xbf289fe0,0xbf2849bd,0xbf27f37c,0xbf279d19,0xbf274692,0xbf26efed,0xbf269926,0xbf264238,0xbf25eb2e,0xbf259404,0xbf253cb9,0xbf24e54c,0xbf248db9,0xbf24360a,0xbf23de3b,0xbf23864c,
0xbf232e35,0xbf22d604,0xbf227db3,0xbf222541,0xbf21ccaf,0xbf2173f6,0xbf211b23,0xbf20c231,0xbf20691e,0xbf200fe4,0xbf1fb691,0xbf1f5d1e,0xbf1f038c,0xbf1ea9d9,0xbf1e5001,0xbf1df60f,
0xbf1d9bfe,0xbf1d41cd,0xbf1ce777,0xbf1c8d08,0xbf1c3279,0xbf1bd7cb,0xbf1b7cfe,0xbf1b220c,0xbf1ac701,0xbf1a6bd7,0xbf1a108f,0xbf19b521,0xbf19599b,0xbf18fdf6,0xbf18a233,0xbf184651,
0xbf17ea4a,0xbf178e2c,0xbf1731ef,0xbf16d594,0xbf167915,0xbf161c7e,0xbf15bfc9,0xbf1562f6,0xbf150605,0xbf14a8f0,0xbf144bc4,0xbf13ee7b,0xbf139113,0xbf13338f,0xbf12d5e6,0xbf127827,
0xbf121a4a,0xbf11bc50,0xbf115e33,0xbf10ffff,0xbf10a1ae,0xbf104340,0xbf0fe4b5,0xbf0f8608,0xbf0f2744,0xbf0ec863,0xbf0e6966,0xbf0e0a46,0xbf0dab10,0xbf0d4bbe,0xbf0cec50,0xbf0c8cc6,
0xbf0c2d18,0xbf0bcd56,0xbf0b6d78,0xbf0b0d7d,0xbf0aad61,0xbf0a4d2f,0xbf09ece2,0xbf098c79,0xbf092bf5,0xbf08cb4f,0xbf086a94,0xbf0809be,0xbf07a8cc,0xbf0747b9,0xbf06e692,0xbf06854f,
0xbf0623f2,0xbf05c27a,0xbf0560e1,0xbf04ff34,0xbf049d6c,0xbf043b89,0xbf03d986,0xbf03776f,0xbf03153e,0xbf02b2f2,0xbf02508d,0xbf01ee06,0xbf018b6d,0xbf0128ba,0xbf00c5ec,0xbf0062ff,
0xbefffffd,0xbeff39c9,0xbefe7362,0xbefdacc8,0xbefce5ee,0xbefc1eef,0xbefb57be,0xbefa905a,0xbef9c8b7,0xbef900f0,0xbef838f7,0xbef770cc,0xbef6a871,0xbef5dfd5,0xbef51717,0xbef44e28,
0xbef38508,0xbef2bbaa,0xbef1f229,0xbef12877,0xbef05e96,0xbeef9485,0xbeeeca35,0xbeedffc4,0xbeed3524,0xbeec6a54,0xbeeb9f55,0xbeead419,0xbeea08bc,0xbee93d31,0xbee87177,0xbee7a580,
0xbee6d969,0xbee60d24,0xbee540b2,0xbee47411,0xbee3a735,0xbee2da39,0xbee20d10,0xbee13fba,0xbee07229,0xbedfa479,0xbeded69d,0xbede0894,0xbedd3a5f,0xbedc6bef,0xbedb9d61,0xbedacea8,
0xbed9ffc3,0xbed930a4,0xbed86169,0xbed79202,0xbed6c270,0xbed5f2b3,0xbed522bd,0xbed452ab,0xbed3826e,0xbed2b207,0xbed1e168,0xbed110ad,0xbed03fc9,0xbecf6ebb,0xbece9d84,0xbecdcc14,
0xbeccfa8b,0xbecc28d8,0xbecb56fd,0xbeca84ea,0xbec9b2be,0xbec8e069,0xbec80dec,0xbec73b47,0xbec6686c,0xbec59578,0xbec4c25d,0xbec3ef1a,0xbec31ba1,0xbec24810,0xbec17459,0xbec0a07a,
0xbebfcc76,0xbebef83c,0xbebe23eb,0xbebd4f74,0xbebc7ad7,0xbebba605,0xbebad11d,0xbeb9fc10,0xbeb926de,0xbeb85186,0xbeb77bfb,0xbeb6a65b,0xbeb5d095,0xbeb4faac,0xbeb4248f,0xbeb34e5e,
0xbeb27808,0xbeb1a18f,0xbeb0caf3,0xbeaff424,0xbeaf1d41,0xbeae463b,0xbead6f13,0xbeac97c7,0xbeabc04b,0xbeaae8bb,0xbeaa1108,0xbea93934,0xbea8612f,0xbea78918,0xbea6b0df,0xbea5d885,
0xbea5000a,0xbea4275e,0xbea34ea1,0xbea275c4,0xbea19cc6,0xbea0c398,0xbe9fea5a,0xbe9f10fb,0xbe9e377d,0xbe9d5de0,0xbe9c8414,0xbe9baa37,0xbe9ad03c,0xbe99f622,0xbe991bd9,0xbe984182,
0xbe97670c,0xbe968c78,0xbe95b1c5,0xbe94d6e6,0xbe93fbf8,0xbe9320ed,0xbe9245c4,0xbe916a6f,0xbe908f0c,0xbe8fb38c,0xbe8ed7ef,0xbe8dfc36,0xbe8d2052,0xbe8c4460,0xbe8b6853,0xbe8a8c29,
0xbe89afd5,0xbe88d374,0xbe87f6f8,0xbe871a61,0xbe863db0,0xbe8560d3,0xbe8483ec,0xbe83a6ea,0xbe82c9ce,0xbe81ec88,0xbe810f38,0xbe8031ce,0xbe7ea896,0xbe7ced5c,0xbe7b31d1,0xbe797632,
0xbe77ba62,0xbe75fe60,0xbe74420e,0xbe7285ab,0xbe70c917,0xbe6f0c53,0xbe6d4f5f,0xbe6b921d,0xbe69d4ca,0xbe68174a,0xbe66599a,0xbe649b9e,0xbe62dd93,0xbe611f5b,0xbe5f60f6,0xbe5da265,
0xbe5be387,0xbe5a249e,0xbe586588,0xbe56a648,0xbe54e6dd,0xbe532727,0xbe516767,0xbe4fa77e,0xbe4de76a,0xbe4c270f,0xbe4a66aa,0xbe48a61c,0xbe46e567,0xbe452489,0xbe436365,0xbe41a23a,
0xbe3fe0e7,0xbe3e1f6f,0xbe3c5db1,0xbe3a9bed,0xbe38da03,0xbe3717f5,0xbe3555c2,0xbe33934c,0xbe31d0d1,0xbe300e32,0xbe2e4b71,0xbe2c886d,0xbe2ac566,0xbe29023e,0xbe273ef3,0xbe257b87,
0xbe23b7da,0xbe21f42d,0xbe20305f,0xbe1e6c71,0xbe1ca843,0xbe1ae417,0xbe191fcb,0xbe175b60,0xbe1596d8,0xbe13d212,0xbe120d4e,0xbe10486d,0xbe0e836f,0xbe0cbe35,0xbe0af8fe,0xbe0933ac,
0xbe076e3e,0xbe05a8b6,0xbe03e2f3,0xbe021d35,0xbe00575e,0xbdfd22d9,0xbdf99684,0xbdf60a3d,0xbdf27dc5,0xbdeef11d,0xbdeb6445,0xbde7d6fe,0xbde449c9,0xbde0bc66,0xbddd2ed7,0xbdd9a0db,
0xbdd612f4,0xbdd284e2,0xbdcef6a6,0xbdcb6840,0xbdc7d973,0xbdc44abd,0xbdc0bbe0,0xbdbd2cdc,0xbdb99db3,0xbdb60e25,0xbdb27eb2,0xbdaeef1c,0xbdab5f62,0xbda7cf47,0xbda43f4a,0xbda0af2c,
0xbd9d1eee,0xbd998e91,0xbd95fdd6,0xbd926d3c,0xbd8edc85,0xbd8b4bb1,0xbd87ba82,0xbd842978,0xbd809853,0xbd7a0e28,0xbd72eb7a,0xbd6bc81a,0xbd64a50c,0xbd5d81d0,0xbd565e67,0xbd4f3a54,
0xbd481698,0xbd40f2b4,0xbd39cea9,0xbd32aa79,0xbd2b85a5,0xbd24612f,0xbd1d3c98,0xbd1617e2,0xbd0ef28e,0xbd07cd9d,0xbd00a892,0xbcf306d8,0xbce4bc5d,0xbcd670b4,0xbcc825e0,0xbcb9dae4,
0xbcab8fc4,0xbc9d4380,0xbc8ef81e,0xbc80ac9f,0xbc64c20c,0xbc482aad,0xbc2b9126,0xbc0ef97c,0xbbe4c36d,0xbbab93b3,0xbb64bfae,0xbae4bf92,0x324cde2e,0x3ae4c05f,0x3b64c015,0x3bab93e6,
0x3be4c3a0,0x3c0ef996,0x3c2b913f,0x3c482ac6,0x3c64c226,0x3c80acac,0x3c8ef82b,0x3c9d438d,0x3cab8fd0,0x3cb9daf1,0x3cc825ed,0x3cd670c1,0x3ce4bc6a,0x3cf306e5,0x3d00a898,0x3d07cda4,
0x3d0ef294,0x3d1617e8,0x3d1d3c9f,0x3d246135,0x3d2b85ab,0x3d32a9ff,0x3d39ceaf,0x3d40f2ba,0x3d48169e,0x3d4f3a5b,0x3d565e6e,0x3d5d81d6,0x3d64a512,0x3d6bc821,0x3d72eb00,0x3d7a0e2f,
0x3d809856,0x3d84297b,0x3d87ba85,0x3d8b4bb4,0x3d8edc88,0x3d926d3f,0x3d95fdd9,0x3d998e55,0x3d9d1ef2,0x3da0af2f,0x3da43f4d,0x3da7cf4a,0x3dab5f65,0x3daeef1f,0x3db27eb5,0x3db60e28,
0x3db99d76,0x3dbd2cdf,0x3dc0bbe3,0x3dc44ac0,0x3dc7d976,0x3dcb6843,0x3dcef6a9,0x3dd284e5,0x3dd612f7,0x3dd9a0de,0x3ddd2eda,0x3de0bc69,0x3de449cc,0x3de7d702,0x3deb6448,0x3deef120,
0x3df27dc9,0x3df60a41,0x3df99687,0x3dfd22dc,0x3e00575f,0x3e021d37,0x3e03e2f4,0x3e05a8b7,0x3e076e40,0x3e0933ae,0x3e0af900,0x3e0cbe36,0x3e0e8370,0x3e10486e,0x3e120d4f,0x3e13d213,
0x3e1596d9,0x3e175b62,0x3e191fcc,0x3e1ae418,0x3e1ca845,0x3e1e6c72,0x3e203060,0x3e21f42e,0x3e23b7dc,0x3e257b89,0x3e273ef5,0x3e29023f,0x3e2ac568,0x3e2c886f,0x3e2e4b73,0x3e300e34,
0x3e31d0d2,0x3e33934d,0x3e3555a4,0x3e3717f7,0x3e38da05,0x3e3a9bee,0x3e3c5db2,0x3e3e1f70,0x3e3fe0e9,0x3e41a23b,0x3e436367,0x3e45246c,0x3e46e568,0x3e48a61e,0x3e4a66ab,0x3e4c2710,
0x3e4de76c,0x3e4fa77f,0x3e516769,0x3e532729,0x3e54e6bf,0x3e56a64a,0x3e58658a,0x3e5a249f,0x3e5be389,0x3e5da266,0x3e5f60f8,0x3e611f5d,0x3e62dd95,0x3e649ba0,0x3e66599c,0x3e68174b,
0x3e69d4cc,0x3e6b921e,0x3e6d4f60,0x3e6f0c54,0x3e70c918,0x3e7285ac,0x3e744210,0x3e75fe62,0x3e77ba63,0x3e797634,0x3e7b31d2,0x3e7ced5d,0x3e7ea897,0x3e8031cf,0x3e810f39,0x3e81ec89,
0x3e82c9cf,0x3e83a6eb,0x3e8483ed,0x3e8560d4,0x3e863db0,0x3e871a62,0x3e87f6f9,0x3e88d375,0x3e89afd6,0x3e8a8c2a,0x3e8b6853,0x3e8c4461,0x3e8d2052,0x3e8dfc37,0x3e8ed7f0,0x3e8fb38d,
0x3e908f0d,0x3e916a70,0x3e9245c5,0x3e9320ee,0x3e93fbf9,0x3e94d6e7,0x3e95b1b7,0x3e968c78,0x3e97670d,0x3e984183,0x3e991bda,0x3e99f622,0x3e9ad03d,0x3e9baa38,0x3e9c8414,0x3e9d5dd1,
0x3e9e377e,0x3e9f10fc,0x3e9fea5b,0x3ea0c399,0x3ea19cc6,0x3ea275c4,0x3ea34ea2,0x3ea4275f,0x3ea4fffb,0x3ea5d886,0x3ea6b0e0,0x3ea78919,0x3ea86130,0x3ea93935,0x3eaa1109,0x3eaae8bb,
0x3eabc04b,0x3eac97b9,0x3ead6f13,0x3eae463c,0x3eaf1d42,0x3eaff425,0x3eb0caf4,0x3eb1a190,0x3eb27809,0x3eb34e5e,0x3eb42490,0x3eb4faad,0x3eb5d096,0x3eb6a65b,0x3eb77bfc,0x3eb85187,
0x3eb926de,0x3eb9fc11,0x3ebad11e,0x3ebba606,0x3ebc7ad7,0x3ebd4f74,0x3ebe23eb,0x3ebef83d,0x3ebfcc76,0x3ec0a07b,0x3ec17459,0x3ec24811,0x3ec31ba2,0x3ec3ef1b,0x3ec4c25d,0x3ec59579,
0x3ec6686d,0x3ec73b48,0x3ec80ded,0x3ec8e06a,0x3ec9b2be,0x3eca84eb,0x3ecb56fd,0x3ecc28d9,0x3eccfa8b,0x3ecdcc15,0x3ece9d84,0x3ecf6ebc,0x3ed03fca,0x3ed110ae,0x3ed1e169,0x3ed2b208,
0x3ed3826f,0x3ed452ab,0x3ed522be,0x3ed5f2a5,0x3ed6c270,0x3ed79202,0x3ed86169,0x3ed930a5,0x3ed9ffc4,0x3edacea9,0x3edb9d62,0x3edc6bf0,0x3edd3a51,0x3ede0895,0x3eded69d,0x3edfa47a,
0x3ee0722a,0x3ee13fbb,0x3ee20d11,0x3ee2da3a,0x3ee3a735,0x3ee47403,0x3ee540b2,0x3ee60d25,0x3ee6d96a,0x3ee7a581,0x3ee87177,0x3ee93d32,0x3eea08bd,0x3eead41a,0x3eeb9f48,0x3eec6a55,
0x3eed3525,0x3eedffc5,0x3eeeca36,0x3eef9485,0x3ef05e97,0x3ef12878,0x3ef1f229,0x3ef2bbaa,0x3ef38509,0x3ef44e29,0x3ef51718,0x3ef5dfd6,0x3ef6a871,0x3ef770cd,0x3ef838f8,0x3ef900f1,
0x3ef9c8b8,0x3efa905b,0x3efb57be,0x3efc1ef0,0x3efce5ee,0x3efdacc9,0x3efe7362,0x3eff39c9,0x3efffffd,0x3f0062ff,0x3f00c5ed,0x3f0128ba,0x3f018b6d,0x3f01ee07,0x3f02508d,0x3f02b2f3,
0x3f03153e,0x3f03776f,0x3f03d986,0x3f043b8a,0x3f049d6c,0x3f04ff34,0x3f0560e1,0x3f05c27b,0x3f0623f3,0x3f068550,0x3f06e692,0x3f0747b9,0x3f07a8cd,0x3f0809be,0x3f086a94,0x3f08cb4f,
0x3f092bef,0x3f098c7a,0x3f09ece2,0x3f0a4d30,0x3f0aad61,0x3f0b0d7e,0x3f0b6d78,0x3f0bcd56,0x3f0c2d19,0x3f0c8cbf,0x3f0cec50,0x3f0d4bbf,0x3f0dab11,0x3f0e0a46,0x3f0e6966,0x3f0ec863,
0x3f0f2744,0x3f0f8608,0x3f0fe4af,0x3f104340,0x3f10a1ae,0x3f10ffff,0x3f115e33,0x3f11bc50,0x3f121a4a,0x3f127827,0x3f12d5e6,0x3f133388,0x3f139114,0x3f13ee7b,0x3f144bc5,0x3f14a8f1,
0x3f150606,0x3f1562f6,0x3f15bfc9,0x3f161c7e,0x3f167915,0x3f16d595,0x3f1731f0,0x3f178e2c,0x3f17ea4b,0x3f184651,0x3f18a233,0x3f18fdf6,0x3f19599b,0x3f19b521,0x3f1a108f,0x3f1a6bd8,
0x3f1ac701,0x3f1b220c,0x3f1b7cff,0x3f1bd7cc,0x3f1c3279,0x3f1c8d08,0x3f1ce777,0x3f1d41ce,0x3f1d9bfe,0x3f1df610,0x3f1e5001,0x3f1ea9da,0x3f1f038c,0x3f1f5d1f,0x3f1fb692,0x3f200fe5,
0x3f20691e,0x3f20c231,0x3f211b24,0x3f2173f7,0x3f21ccaf,0x3f222541,0x3f227db3,0x3f22d605,0x3f232e36,0x3f23864c,0x3f23de3c,0x3f24360b,0x3f248db9,0x3f24e546,0x3f253cb9,0x3f259404,
0x3f25eb2f,0x3f264238,0x3f269926,0x3f26efed,0x3f274692,0x3f279d17,0x3f27f379,0x3f2849c0,0x3f289fe0,0x3f28f5de,0x3f294bba,0x3f29a17a,0x3f29f713,0x3f2a4c89,0x3f2aa1de,0x3f2af710,
0x3f2b4c27,0x3f2ba115,0x3f2bf5e1,0x3f2c4a8a,0x3f2c9f17,0x3f2cf37c,0x3f2d47be,0x3f2d9bde,0x3f2defdb,0x3f2e43bb,0x3f2e9772,0x3f2eeb07,0x3f2f3e79,0x3f2f91cd,0x3f2fe4f9,0x3f303801,
0x3f308ae7,0x3f30dda9,0x3f31304e,0x3f3182c9,0x3f31d521,0x3f322755,0x3f32796c,0x3f32cb59,0x3f331d23,0x3f336ec9,0x3f33c04b,0x3f3411af,0x3f3462e9,0x3f34b3ff,0x3f3504f1,0x3f3555c5,
0x3f35a66f,0x3f35f6f4,0x3f364756,0x3f369793,0x3f36e7b1,0x3f3737a4,0x3f378774,0x3f37d71e,0x3f3826aa,0x3f38760b,0x3f38c548,0x3f39145f,0x3f396352,0x3f39b225,0x3f3a00cd,0x3f3a4f50,
0x3f3a9daf,0x3f3aebe8,0x3f3b3a01,0x3f3b87ef,0x3f3bd5b8,0x3f3c235b,0x3f3c70de,0x3f3cbe36,0x3f3d0b69,0x3f3d5875,0x3f3da55c,0x3f3df223,0x3f3e3ebe,0x3f3e8b33,0x3f3ed782,0x3f3f23b0,
0x3f3f6fb3,0x3f3fbb90,0x3f400746,0x3f4052d6,0x3f409e45,0x3f40e988,0x3f4134a5,0x3f417f9b,0x3f41ca70,0x3f421519,0x3f425f9b,0x3f42a9f6,0x3f42f42a,0x3f433e3d,0x3f438823,0x3f43d1e3,
0x3f441b7b,0x3f4464f2,0x3f44ae3c,0x3f44f75f,0x3f45405a,0x3f45892e,0x3f45d1e0,0x3f461a65,0x3f4662c3,0x3f46aaf9,0x3f46f30c,0x3f473af3,0x3f4782b1,0x3f47ca48,0x3f4811b8,0x3f485904,
0x3f48a023,0x3f48e71a,0x3f492de9,0x3f497495,0x3f49bb14,0x3f4a016a,0x3f4a4798,0x3f4a8d9e,0x3f4ad380,0x3f4b1935,0x3f4b5ec1,0x3f4ba425,0x3f4be965,0x3f4c2e77,0x3f4c7361,0x3f4cb821,
0x3f4cfcb9,0x3f4d412d,0x3f4d8573,0x3f4dc990,0x3f4e0d84,0x3f4e5153,0x3f4e94f5,0x3f4ed86d,0x3f4f1bbc,0x3f4f5ee2,0x3f4fa1e3,0x3f4fe4b6,0x3f50275f,0x3f5069df,0x3f50ac35,0x3f50ee66,
0x3f513069,0x3f517242,0x3f51b3f1,0x3f51f57b,0x3f5236d6,0x3f527808,0x3f52b90f,0x3f52f9ed,0x3f533aa5,0x3f537b2e,0x3f53bb8d,0x3f53fbc1,0x3f543bd0,0x3f547bb0,0x3f54bb66,0x3f54faf1,
0x3f553a51,0x3f55798c,0x3f55b897,0x3f55f778,0x3f56362e,0x3f5674be,0x3f56b31e,0x3f56f154,0x3f572f5e,0x3f576d3e,0x3f57aaf7,0x3f57e881,0x3f5825df,0x3f586313,0x3f58a01f,0x3f58dcfc,
0x3f5919ae,0x3f595634,0x3f59928f,0x3f59cec3,0x3f5a0ac7,0x3f5a46a0,0x3f5a824d,0x3f5abdd2,0x3f5af928,0x3f5b3452,0x3f5b6f50,0x3f5baa23,0x3f5be4cd,0x3f5c1f48,0x3f5c5997,0x3f5c93b9,
0x3f5ccdb4,0x3f5d077f,0x3f5d411d,0x3f5d7a8f,0x3f5db3d6,0x3f5decf3,0x3f5e25e1,0x3f5e5ea2,0x3f5e9737,0x3f5ecfa3,0x3f5f07df,0x3f5f3fef,0x3f5f77d2,0x3f5faf88,0x3f5fe715,0x3f601e72,
0x3f6055a2,0x3f608ca6,0x3f60c380,0x3f60fa2a,0x3f6130a6,0x3f6166f6,0x3f619d19,0x3f61d312,0x3f6208db,0x3f623e77,0x3f6273e5,0x3f62a926,0x3f62de3e,0x3f631325,0x3f6347de,0x3f637c6a,
0x3f63b0cc,0x3f63e4fd,0x3f641901,0x3f644cd7,0x3f64807f,0x3f64b3fe,0x3f64e74b,0x3f651a6b,0x3f654d5c,0x3f658024,0x3f65b2ba,0x3f65e523,0x3f66175d,0x3f66496a,0x3f667b4c,0x3f66acfc,
0x3f66de7f,0x3f670fd3,0x3f6740fd,0x3f6771f5,0x3f67a2bf,0x3f67d35b,0x3f6803c8,0x3f68340a,0x3f68641b,0x3f6893fe,0x3f68c3b1,0x3f68f33a,0x3f692291,0x3f6951ba,0x3f6980b3,0x3f69af7f,
0x3f69de1f,0x3f6a0c8c,0x3f6a3acc,0x3f6a68dc,0x3f6a96c1,0x3f6ac474,0x3f6af1f8,0x3f6b1f4d,0x3f6b4c73,0x3f6b796d,0x3f6ba635,0x3f6bd2ce,0x3f6bff38,0x3f6c2b76,0x3f6c5782,0x3f6c835f,
0x3f6caf0c,0x3f6cda8a,0x3f6d05dc,0x3f6d30fb,0x3f6d5bec,0x3f6d86ac,0x3f6db141,0x3f6ddba3,0x3f6e05d5,0x3f6e2fd8,0x3f6e59ab,0x3f6e8352,0x3f6eacc6,0x3f6ed60b,0x3f6eff20,0x3f6f2808,
0x3f6f50bd,0x3f6f7943,0x3f6fa199,0x3f6fc9bf,0x3f6ff1b7,0x3f70197e,0x3f704114,0x3f70687a,0x3f708fb1,0x3f70b6ba,0x3f70dd90,0x3f710436,0x3f712aac,0x3f7150f5,0x3f71770b,0x3f719cf0,
0x3f71c2a6,0x3f71e82b,0x3f720d82,0x3f7232a7,0x3f72579b,0x3f727c5f,0x3f72a0f4,0x3f72c557,0x3f72e98a,0x3f730d8c,0x3f73315d,0x3f735501,0x3f737871,0x3f739bb1,0x3f73bec0,0x3f73e1a1,
0x3f74044e,0x3f7426cb,0x3f744918,0x3f746b33,0x3f748d20,0x3f74aeda,0x3f74d063,0x3f74f1bb,0x3f7512e5,0x3f7533db,0x3f7554a1,0x3f757535,0x3f759599,0x3f75b5cd,0x3f75d5cf,0x3f75f59f,
0x3f76153e,0x3f7634af,0x3f7653ec,0x3f7672f7,0x3f7691d2,0x3f76b07b,0x3f76cef6,0x3f76ed3c,0x3f770b52,0x3f772936,0x3f7746eb,0x3f77646d,0x3f7781bd,0x3f779edc,0x3f77bbc9,0x3f77d887,
0x3f77f511,0x3f78116a,0x3f782d91,0x3f784989,0x3f78654e,0x3f7880e0,0x3f789c41,0x3f78b771,0x3f78d270,0x3f78ed3c,0x3f7907d7,0x3f792240,0x3f793c77,0x3f79567e,0x3f797051,0x3f7989f3,
0x3f79a363,0x3f79bca2,0x3f79d5af,0x3f79ee89,0x3f7a0731,0x3f7a1fa8,0x3f7a37ee,0x3f7a5001,0x3f7a67e1,0x3f7a7f90,0x3f7a970e,0x3f7aae59,0x3f7ac572,0x3f7adc58,0x3f7af30c,0x3f7b0990,
0x3f7b1fe1,0x3f7b35ff,0x3f7b4beb,0x3f7b61a6,0x3f7b772e,0x3f7b8c83,0x3f7ba1a6,0x3f7bb697,0x3f7bcb57,0x3f7bdfe4,0x3f7bf43e,0x3f7c0866,0x3f7c1c5d,0x3f7c3020,0x3f7c43b1,0x3f7c5710,
0x3f7c6a3c,0x3f7c7d37,0x3f7c8ffe,0x3f7ca293,0x3f7cb4f6,0x3f7cc727,0x3f7cd925,0x3f7ceaf0,0x3f7cfc89,0x3f7d0def,0x3f7d1f24,0x3f7d3025,0x3f7d40f4,0x3f7d5190,0x3f7d61fa,0x3f7d7231,
0x3f7d8235,0x3f7d9207,0x3f7da1a6,0x3f7db114,0x3f7dc04d,0x3f7dcf55,0x3f7dde29,0x3f7deccc,0x3f7dfb3b,0x3f7e0977,0x3f7e1781,0x3f7e2558,0x3f7e32fd,0x3f7e406f,0x3f7e4dad,0x3f7e5ab9,
0x3f7e6793,0x3f7e743a,0x3f7e80ae,0x3f7e8cee,0x3f7e98fc,0x3f7ea4d8,0x3f7eb081,0x3f7ebbf6,0x3f7ec739,0x3f7ed249,0x3f7edd26,0x3f7ee7d0,0x3f7ef248,0x3f7efc8c,0x3f7f069e,0x3f7f107c,
0x3f7f1a28,0x3f7f23a1,0x3f7f2ce6,0x3f7f35fa,0x3f7f3ed9,0x3f7f4786,0x3f7f5000,0x3f7f5848,0x3f7f605c,0x3f7f683d,0x3f7f6feb,0x3f7f7766,0x3f7f7eae,0x3f7f85c3,0x3f7f8ca5,0x3f7f9354,
0x3f7f99d1,0x3f7fa019,0x3f7fa62f,0x3f7fac12,0x3f7fb1c2,0x3f7fb73f,0x3f7fbc89,0x3f7fc1a0,0x3f7fc683,0x3f7fcb34,0x3f7fcfb2,0x3f7fd3fc,0x3f7fd814,0x3f7fdbf8,0x3f7fdfaa,0x3f7fe328,
0x3f7fe673,0x3f7fe98b,0x3f7fec70,0x3f7fef22,0x3f7ff1a0,0x3f7ff3ec,0x3f7ff605,0x3f7ff7ea,0x3f7ff99d,0x3f7ffb1c,0x3f7ffc68,0x3f7ffd81,0x3f7ffe67,0x3f7fff1a,0x3f7fff9a,0x3f7fffe6,
0x3f800000,};

// [0.0, 360.0]
static unsigned int g_sin[3604] = {
0x00000000,0x3ae4c380,0x3b64c36a,0x3bab9273,0x3be4c30e,0x3c0ef9be,0x3c2b91d8,0x3c4829d1,0x3c64c1a1,0x3c80aca2,0x3c8ef859,0x3c9d43f5,0x3cab8f70,0x3cb9daca,0x3cc825fe,0x3cd6710b,
0x3ce4bbec,0x3cf306a0,0x3d00a892,0x3d07cdba,0x3d0ef2c6,0x3d1617b6,0x3d1d3c89,0x3d24613c,0x3d2b85ce,0x3d32aa3e,0x3d39ce8b,0x3d40f2b2,0x3d4816b2,0x3d4f3a8b,0x3d565e3b,0x3d5d81bf,
0x3d64a517,0x3d6bc841,0x3d72eb3e,0x3d7a0e09,0x3d809851,0x3d842984,0x3d87ba9d,0x3d8b4b9a,0x3d8edc7b,0x3d926d40,0x3d95fde8,0x3d998e72,0x3d9d1ede,0x3da0af2a,0x3da43f56,0x3da7cf61,
0x3dab5f4a,0x3daeef11,0x3db27eb5,0x3db60e36,0x3db99d93,0x3dbd2ccb,0x3dc0bbdc,0x3dc44ac7,0x3dc7d98b,0x3dcb6827,0x3dcef69a,0x3dd284e4,0x3dd61305,0x3dd9a0fa,0x3ddd2ec4,0x3de0bc62,
0x3de449d3,0x3de7d716,0x3deb642b,0x3deef111,0x3df27dc8,0x3df60a4e,0x3df996a3,0x3dfd22c5,0x3e00575b,0x3e021d3a,0x3e03e2fe,0x3e05a8a9,0x3e076e38,0x3e0933ad,0x3e0af906,0x3e0cbe43,
0x3e0e8365,0x3e104869,0x3e120d52,0x3e13d21c,0x3e1596ca,0x3e175b59,0x3e191fcb,0x3e1ae41e,0x3e1ca852,0x3e1e6c67,0x3e20305c,0x3e21f430,0x3e23b7e5,0x3e257b79,0x3e273eec,0x3e29023d,
0x3e2ac56d,0x3e2c887b,0x3e2e4b66,0x3e300e2e,0x3e31d0d4,0x3e339355,0x3e3555b3,0x3e3717ee,0x3e38da03,0x3e3a9bf3,0x3e3c5dbe,0x3e3e1f64,0x3e3fe0e3,0x3e41a23c,0x3e43636f,0x3e45247a,
0x3e46e55f,0x3e48a61b,0x3e4a66af,0x3e4c271b,0x3e4de75f,0x3e4fa779,0x3e516769,0x3e532731,0x3e54e6ce,0x3e56a640,0x3e586587,0x3e5a24a3,0x3e5be394,0x3e5da259,0x3e5f60f1,0x3e611f5d,
0x3e62dd9c,0x3e649bad,0x3e665991,0x3e681747,0x3e69d4cf,0x3e6b9228,0x3e6d4f52,0x3e6f0c4e,0x3e70c918,0x3e7285b3,0x3e74421e,0x3e75fe57,0x3e77ba60,0x3e797637,0x3e7b31dc,0x3e7ced4f,
0x3e7ea891,0x3e8031cf,0x3e810f3c,0x3e81ec90,0x3e82c9ca,0x3e83a6e9,0x3e8483ee,0x3e8560d9,0x3e863da9,0x3e871a5e,0x3e87f6f9,0x3e88d378,0x3e89afdc,0x3e8a8c24,0x3e8b6851,0x3e8c4462,
0x3e8d2057,0x3e8dfc30,0x3e8ed7ec,0x3e8fb38c,0x3e908f0f,0x3e916a76,0x3e9245bf,0x3e9320eb,0x3e93fbf9,0x3e94d6eb,0x3e95b1be,0x3e968c74,0x3e97670b,0x3e984185,0x3e991be0,0x3e99f61c,
0x3e9ad03a,0x3e9baa39,0x3e9c8419,0x3e9d5dd9,0x3e9e377a,0x3e9f10fb,0x3e9fea5d,0x3ea0c39e,0x3ea19cc0,0x3ea275c1,0x3ea34ea3,0x3ea42762,0x3ea50002,0x3ea5d881,0x3ea6b0de,0x3ea7891b,
0x3ea86135,0x3ea9392f,0x3eaa1106,0x3eaae8bc,0x3eabc04f,0x3eac97c0,0x3ead6f0e,0x3eae463b,0x3eaf1d43,0x3eaff42a,0x3eb0caed,0x3eb1a18d,0x3eb27809,0x3eb34e62,0x3eb42497,0x3eb4faa8,
0x3eb5d095,0x3eb6a65d,0x3eb77c01,0x3eb85180,0x3eb926db,0x3eb9fc10,0x3ebad121,0x3ebba60c,0x3ebc7ad2,0x3ebd4f72,0x3ebe23ed,0x3ebef841,0x3ebfcc6f,0x3ec0a078,0x3ec17459,0x3ec24814,
0x3ec31ba8,0x3ec3ef16,0x3ec4c25b,0x3ec5957a,0x3ec66871,0x3ec73b41,0x3ec80de9,0x3ec8e069,0x3ec9b2c1,0x3eca84f1,0x3ecb56f8,0x3ecc28d7,0x3eccfa8c,0x3ecdcc19,0x3ece9d7e,0x3ecf6eb8,
0x3ed03fc9,0x3ed110b1,0x3ed1e16f,0x3ed2b202,0x3ed3826d,0x3ed452ac,0x3ed522c2,0x3ed5f2ac,0x3ed6c26d,0x3ed79201,0x3ed8616c,0x3ed930aa,0x3ed9ffbe,0x3edacea7,0x3edb9d63,0x3edc6bf4,
0x3edd3a58,0x3ede0891,0x3eded69c,0x3edfa47c,0x3ee0722f,0x3ee13fb5,0x3ee20d0e,0x3ee2da3a,0x3ee3a739,0x3ee4740a,0x3ee540ad,0x3ee60d24,0x3ee6d96b,0x3ee7a586,0x3ee87172,0x3ee93d2f,
0x3eea08be,0x3eead41d,0x3eeb9f4f,0x3eec6a50,0x3eed3524,0x3eedffc7,0x3eeeca3b,0x3eef947f,0x3ef05e94,0x3ef12878,0x3ef1f22d,0x3ef2bbb0,0x3ef38504,0x3ef44e28,0x3ef51719,0x3ef5dfdb,
0x3ef6a86c,0x3ef770c9,0x3ef838f7,0x3ef900f4,0x3ef9c8be,0x3efa9056,0x3efb57bc,0x3efc1ef1,0x3efce5f3,0x3efdacc1,0x3efe735f,0x3eff39c9,0x3f000000,0x3f006302,0x3f00c5ea,0x3f0128b9,
0x3f018b6e,0x3f01ee09,0x3f025089,0x3f02b2f1,0x3f03153e,0x3f037771,0x3f03d989,0x3f043b87,0x3f049d6b,0x3f04ff35,0x3f0560e3,0x3f05c277,0x3f0623f1,0x3f068550,0x3f06e694,0x3f0747bc,
0x3f07a8ca,0x3f0809bd,0x3f086a95,0x3f08cb50,0x3f092bf2,0x3f098c78,0x3f09ece2,0x3f0a4d30,0x3f0aad63,0x3f0b0d7b,0x3f0b6d77,0x3f0bcd56,0x3f0c2d1a,0x3f0c8cc2,0x3f0cec4e,0x3f0d4bbe,
0x3f0dab11,0x3f0e0a49,0x3f0e6964,0x3f0ec862,0x3f0f2744,0x3f0f8609,0x3f0fe4b2,0x3f10433f,0x3f10a1ad,0x3f110000,0x3f115e35,0x3f11bc4e,0x3f121a49,0x3f127827,0x3f12d5e8,0x3f13338b,
0x3f139112,0x3f13ee7a,0x3f144bc5,0x3f14a8f3,0x3f150603,0x3f1562f5,0x3f15bfc9,0x3f161c80,0x3f167918,0x3f16d592,0x3f1731ef,0x3f178e2d,0x3f17ea4d,0x3f18464f,0x3f18a231,0x3f18fdf6,
0x3f19599c,0x3f19b524,0x3f1a108c,0x3f1a6bd7,0x3f1ac702,0x3f1b220f,0x3f1b7cfb,0x3f1bd7ca,0x3f1c3279,0x3f1c8d09,0x3f1ce77a,0x3f1d41cb,0x3f1d9bfe,0x3f1df610,0x3f1e5004,0x3f1ea9d6,
0x3f1f038a,0x3f1f5d1f,0x3f1fb693,0x3f200fe7,0x3f20691b,0x3f20c230,0x3f211b24,0x3f2173f8,0x3f21ccac,0x3f222540,0x3f227db3,0x3f22d606,0x3f232e38,0x3f23864a,0x3f23de3b,0x3f24360b,
0x3f248dba,0x3f24e549,0x3f253cb7,0x3f259404,0x3f25eb2f,0x3f26423a,0x3f269924,0x3f26efec,0x3f274692,0x3f279d18,0x3f27f37c,0x3f2849bf,0x3f289fe0,0x3f28f5de,0x3f294bbc,0x3f29a178,
0x3f29f712,0x3f2a4c89,0x3f2aa1df,0x3f2af713,0x3f2b4c25,0x3f2ba114,0x3f2bf5e1,0x3f2c4a8c,0x3f2c9f15,0x3f2cf37a,0x3f2d47be,0x3f2d9bdf,0x3f2defde,0x3f2e43b9,0x3f2e9772,0x3f2eeb08,
0x3f2f3e7b,0x3f2f91cb,0x3f2fe4f7,0x3f303801,0x3f308ae8,0x3f30ddac,0x3f31304b,0x3f3182c8,0x3f31d522,0x3f322757,0x3f32796a,0x3f32cb58,0x3f331d23,0x3f336eca,0x3f33c04e,0x3f3411ad,
0x3f3462e8,0x3f34b400,0x3f3504f3,0x3f3555c2,0x3f35a66d,0x3f35f6f4,0x3f364757,0x3f369795,0x3f36e7ae,0x3f3737a4,0x3f378774,0x3f37d720,0x3f3826a7,0x3f38760a,0x3f38c547,0x3f391460,
0x3f396353,0x3f39b222,0x3f3a00cc,0x3f3a4f51,0x3f3a9db0,0x3f3aebea,0x3f3b39ff,0x3f3b87ef,0x3f3bd5b8,0x3f3c235d,0x3f3c70dc,0x3f3cbe35,0x3f3d0b69,0x3f3d5876,0x3f3da55f,0x3f3df221,
0x3f3e3ebe,0x3f3e8b33,0x3f3ed784,0x3f3f23ae,0x3f3f6fb2,0x3f3fbb90,0x3f400747,0x3f4052d9,0x3f409e44,0x3f40e988,0x3f4134a5,0x3f417f9d,0x3f41ca6e,0x3f421518,0x3f425f9b,0x3f42a9f7,
0x3f42f42d,0x3f433e3c,0x3f438823,0x3f43d1e3,0x3f441b7d,0x3f4464f0,0x3f44ae3a,0x3f44f75e,0x3f45405b,0x3f458930,0x3f45d1de,0x3f461a64,0x3f4662c3,0x3f46aafa,0x3f46f30a,0x3f473af1,
0x3f4782b1,0x3f47ca4a,0x3f4811ba,0x3f485902,0x3f48a022,0x3f48e71b,0x3f492deb,0x3f497493,0x3f49bb12,0x3f4a016a,0x3f4a4799,0x3f4a8da0,0x3f4ad37e,0x3f4b1934,0x3f4b5ec2,0x3f4ba427,
0x3f4be962,0x3f4c2e76,0x3f4c7361,0x3f4cb822,0x3f4cfcbb,0x3f4d412b,0x3f4d8572,0x3f4dc990,0x3f4e0d85,0x3f4e5151,0x3f4e94f3,0x3f4ed86d,0x3f4f1bbd,0x3f4f5ee3,0x3f4fa1e1,0x3f4fe4b5,
0x3f50275f,0x3f5069e0,0x3f50ac37,0x3f50ee65,0x3f513069,0x3f517242,0x3f51b3f3,0x3f51f579,0x3f5236d6,0x3f527808,0x3f52b910,0x3f52f9ef,0x3f533aa3,0x3f537b2e,0x3f53bb8d,0x3f53fbc3,
0x3f543bce,0x3f547bb0,0x3f54bb66,0x3f54faf2,0x3f553a54,0x3f55798b,0x3f55b897,0x3f55f779,0x3f563630,0x3f5674bc,0x3f56b31e,0x3f56f154,0x3f572f5f,0x3f576d40,0x3f57aaf6,0x3f57e881,
0x3f5825e0,0x3f586314,0x3f58a01d,0x3f58dcfb,0x3f5919ae,0x3f595635,0x3f599291,0x3f59cec2,0x3f5a0ac7,0x3f5a46a1,0x3f5a824e,0x3f5abdd0,0x3f5af927,0x3f5b3452,0x3f5b6f51,0x3f5baa24,
0x3f5be4cc,0x3f5c1f48,0x3f5c5996,0x3f5c93ba,0x3f5ccdb2,0x3f5d077e,0x3f5d411d,0x3f5d7a90,0x3f5db3d8,0x3f5decf2,0x3f5e25e1,0x3f5e5ea2,0x3f5e9738,0x3f5ecfa1,0x3f5f07de,0x3f5f3fef,
0x3f5f77d2,0x3f5faf8a,0x3f5fe714,0x3f601e71,0x3f6055a2,0x3f608ca6,0x3f60c37e,0x3f60fa29,0x3f6130a6,0x3f6166f7,0x3f619d1b,0x3f61d311,0x3f6208da,0x3f623e77,0x3f6273e6,0x3f62a928,
0x3f62de3d,0x3f631325,0x3f6347df,0x3f637c6c,0x3f63b0ca,0x3f63e4fc,0x3f641901,0x3f644cd8,0x3f648081,0x3f64b3fd,0x3f64e74b,0x3f651a6b,0x3f654d5e,0x3f658022,0x3f65b2b9,0x3f65e522,
0x3f66175e,0x3f66496b,0x3f667b4b,0x3f66acfc,0x3f66de7f,0x3f670fd4,0x3f6740fb,0x3f6771f4,0x3f67a2bf,0x3f67d35b,0x3f6803ca,0x3f68340a,0x3f68641b,0x3f6893fe,0x3f68c3b2,0x3f68f339,
0x3f692290,0x3f6951ba,0x3f6980b4,0x3f69af80,0x3f69de1e,0x3f6a0c8c,0x3f6a3acc,0x3f6a68dd,0x3f6a96bf,0x3f6ac473,0x3f6af1f8,0x3f6b1f4d,0x3f6b4c74,0x3f6b796c,0x3f6ba635,0x3f6bd2ce,
0x3f6bff39,0x3f6c2b75,0x3f6c5781,0x3f6c835e,0x3f6caf0d,0x3f6cda8b,0x3f6d05db,0x3f6d30fb,0x3f6d5bec,0x3f6d86ad,0x3f6db13f,0x3f6ddba2,0x3f6e05d5,0x3f6e2fd9,0x3f6e59ad,0x3f6e8351,
0x3f6eacc5,0x3f6ed60b,0x3f6eff20,0x3f6f2806,0x3f6f50bc,0x3f6f7943,0x3f6fa199,0x3f6fc9c0,0x3f6ff1b7,0x3f70197d,0x3f704114,0x3f70687b,0x3f708fb2,0x3f70b6b9,0x3f70dd90,0x3f710437,
0x3f712aae,0x3f7150f4,0x3f71770a,0x3f719cf0,0x3f71c2a6,0x3f71e82c,0x3f720d81,0x3f7232a7,0x3f72579b,0x3f727c60,0x3f72a0f3,0x3f72c557,0x3f72e98a,0x3f730d8c,0x3f73315e,0x3f735500,
0x3f737871,0x3f739bb1,0x3f73bec0,0x3f73e19f,0x3f74044e,0x3f7426cb,0x3f744918,0x3f746b34,0x3f748d20,0x3f74aeda,0x3f74d064,0x3f74f1bc,0x3f7512e4,0x3f7533db,0x3f7554a1,0x3f757536,
0x3f75959a,0x3f75b5cd,0x3f75d5cf,0x3f75f59f,0x3f76153f,0x3f7634ae,0x3f7653eb,0x3f7672f7,0x3f7691d2,0x3f76b07c,0x3f76cef5,0x3f76ed3c,0x3f770b52,0x3f772937,0x3f7746ea,0x3f77646c,
0x3f7781bd,0x3f779edc,0x3f77bbca,0x3f77d886,0x3f77f511,0x3f78116a,0x3f782d92,0x3f784988,0x3f78654d,0x3f7880e0,0x3f789c42,0x3f78b772,0x3f78d270,0x3f78ed3c,0x3f7907d7,0x3f792240,
0x3f793c78,0x3f79567d,0x3f797051,0x3f7989f3,0x3f79a364,0x3f79bca2,0x3f79d5ae,0x3f79ee89,0x3f7a0732,0x3f7a1fa9,0x3f7a37ee,0x3f7a5001,0x3f7a67e2,0x3f7a7f91,0x3f7a970d,0x3f7aae58,
0x3f7ac571,0x3f7adc58,0x3f7af30d,0x3f7b0990,0x3f7b1fe1,0x3f7b35ff,0x3f7b4beb,0x3f7b61a5,0x3f7b772d,0x3f7b8c83,0x3f7ba1a7,0x3f7bb698,0x3f7bcb57,0x3f7bdfe4,0x3f7bf43e,0x3f7c0866,
0x3f7c1c5c,0x3f7c3020,0x3f7c43b1,0x3f7c5710,0x3f7c6a3d,0x3f7c7d37,0x3f7c8ffe,0x3f7ca294,0x3f7cb4f6,0x3f7cc727,0x3f7cd925,0x3f7ceaf0,0x3f7cfc89,0x3f7d0df0,0x3f7d1f23,0x3f7d3025,
0x3f7d40f3,0x3f7d5190,0x3f7d61fa,0x3f7d7231,0x3f7d8235,0x3f7d9207,0x3f7da1a7,0x3f7db113,0x3f7dc04d,0x3f7dcf54,0x3f7dde29,0x3f7deccb,0x3f7dfb3b,0x3f7e0977,0x3f7e1781,0x3f7e2558,
0x3f7e32fd,0x3f7e406e,0x3f7e4dad,0x3f7e5aba,0x3f7e6793,0x3f7e743a,0x3f7e80ad,0x3f7e8cef,0x3f7e98fd,0x3f7ea4d8,0x3f7eb080,0x3f7ebbf6,0x3f7ec739,0x3f7ed249,0x3f7edd26,0x3f7ee7d0,
0x3f7ef248,0x3f7efc8c,0x3f7f069e,0x3f7f107c,0x3f7f1a28,0x3f7f23a1,0x3f7f2ce7,0x3f7f35f9,0x3f7f3ed9,0x3f7f4786,0x3f7f5000,0x3f7f5847,0x3f7f605c,0x3f7f683d,0x3f7f6feb,0x3f7f7766,
0x3f7f7eae,0x3f7f85c3,0x3f7f8ca5,0x3f7f9354,0x3f7f99d0,0x3f7fa019,0x3f7fa62f,0x3f7fac12,0x3f7fb1c2,0x3f7fb73f,0x3f7fbc89,0x3f7fc1a0,0x3f7fc683,0x3f7fcb34,0x3f7fcfb2,0x3f7fd3fc,
0x3f7fd814,0x3f7fdbf8,0x3f7fdfa9,0x3f7fe328,0x3f7fe673,0x3f7fe98b,0x3f7fec70,0x3f7fef22,0x3f7ff1a0,0x3f7ff3ec,0x3f7ff605,0x3f7ff7ea,0x3f7ff99d,0x3f7ffb1c,0x3f7ffc68,0x3f7ffd81,
0x3f7ffe67,0x3f7fff1a,0x3f7fff9a,0x3f7fffe6,0x3f800000,0x3f7fffe6,0x3f7fff9a,0x3f7fff1a,0x3f7ffe67,0x3f7ffd81,0x3f7ffc68,0x3f7ffb1c,0x3f7ff99d,0x3f7ff7ea,0x3f7ff605,0x3f7ff3ec,
0x3f7ff1a0,0x3f7fef22,0x3f7fec70,0x3f7fe98b,0x3f7fe673,0x3f7fe328,0x3f7fdfa9,0x3f7fdbf8,0x3f7fd814,0x3f7fd3fc,0x3f7fcfb2,0x3f7fcb34,0x3f7fc684,0x3f7fc1a0,0x3f7fbc89,0x3f7fb73f,
0x3f7fb1c2,0x3f7fac12,0x3f7fa62f,0x3f7fa019,0x3f7f99d0,0x3f7f9354,0x3f7f8ca5,0x3f7f85c3,0x3f7f7eae,0x3f7f7766,0x3f7f6feb,0x3f7f683d,0x3f7f605c,0x3f7f5847,0x3f7f5000,0x3f7f4786,
0x3f7f3ed9,0x3f7f35f9,0x3f7f2ce7,0x3f7f23a1,0x3f7f1a28,0x3f7f107c,0x3f7f069e,0x3f7efc8c,0x3f7ef248,0x3f7ee7d0,0x3f7edd26,0x3f7ed249,0x3f7ec739,0x3f7ebbf6,0x3f7eb081,0x3f7ea4d8,
0x3f7e98fd,0x3f7e8cef,0x3f7e80ae,0x3f7e743a,0x3f7e6793,0x3f7e5aba,0x3f7e4dad,0x3f7e406e,0x3f7e32fd,0x3f7e2558,0x3f7e1781,0x3f7e0977,0x3f7dfb3b,0x3f7deccb,0x3f7dde29,0x3f7dcf55,
0x3f7dc04d,0x3f7db113,0x3f7da1a6,0x3f7d9207,0x3f7d8235,0x3f7d7231,0x3f7d61fa,0x3f7d5190,0x3f7d40f4,0x3f7d3025,0x3f7d1f23,0x3f7d0df0,0x3f7cfc89,0x3f7ceaf0,0x3f7cd925,0x3f7cc727,
0x3f7cb4f6,0x3f7ca293,0x3f7c8ffe,0x3f7c7d36,0x3f7c6a3d,0x3f7c5710,0x3f7c43b1,0x3f7c3020,0x3f7c1c5c,0x3f7c0866,0x3f7bf43e,0x3f7bdfe4,0x3f7bcb57,0x3f7bb698,0x3f7ba1a7,0x3f7b8c83,
0x3f7b772d,0x3f7b61a5,0x3f7b4beb,0x3f7b35ff,0x3f7b1fe0,0x3f7b0990,0x3f7af30d,0x3f7adc59,0x3f7ac572,0x3f7aae59,0x3f7a970e,0x3f7a7f90,0x3f7a67e1,0x3f7a5001,0x3f7a37ee,0x3f7a1fa9,
0x3f7a0732,0x3f79ee89,0x3f79d5ae,0x3f79bca2,0x3f79a363,0x3f7989f3,0x3f797051,0x3f79567d,0x3f793c78,0x3f792240,0x3f7907d7,0x3f78ed3c,0x3f78d270,0x3f78b771,0x3f789c42,0x3f7880e0,
0x3f78654d,0x3f784988,0x3f782d92,0x3f78116a,0x3f77f511,0x3f77d886,0x3f77bbca,0x3f779edc,0x3f7781bd,0x3f77646c,0x3f7746ea,0x3f772937,0x3f770b52,0x3f76ed3c,0x3f76cef5,0x3f76b07d,
0x3f7691d3,0x3f7672f8,0x3f7653eb,0x3f7634ae,0x3f76153f,0x3f75f59f,0x3f75d5ce,0x3f75b5cc,0x3f75959a,0x3f757536,0x3f7554a1,0x3f7533db,0x3f7512e4,0x3f74f1bc,0x3f74d063,0x3f74aeda,
0x3f748d20,0x3f746b34,0x3f744918,0x3f7426cb,0x3f74044e,0x3f73e19f,0x3f73bec0,0x3f739bb1,0x3f737870,0x3f735500,0x3f73315f,0x3f730d8c,0x3f72e98a,0x3f72c557,0x3f72a0f3,0x3f727c5f,
0x3f72579b,0x3f7232a6,0x3f720d82,0x3f71e82c,0x3f71c2a6,0x3f719cf0,0x3f71770a,0x3f7150f4,0x3f712aad,0x3f710436,0x3f70dd90,0x3f70b6b9,0x3f708fb2,0x3f70687b,0x3f704114,0x3f70197d,
0x3f6ff1b6,0x3f6fc9bf,0x3f6fa199,0x3f6f7943,0x3f6f50bc,0x3f6f2806,0x3f6eff21,0x3f6ed60b,0x3f6eacc6,0x3f6e8351,0x3f6e59ac,0x3f6e2fd9,0x3f6e05d5,0x3f6ddba2,0x3f6db13f,0x3f6d86ad,
0x3f6d5bec,0x3f6d30fb,0x3f6d05db,0x3f6cda8b,0x3f6caf0d,0x3f6c835f,0x3f6c5781,0x3f6c2b75,0x3f6bff39,0x3f6bd2ce,0x3f6ba635,0x3f6b796c,0x3f6b4c74,0x3f6b1f4e,0x3f6af1f8,0x3f6ac473,
0x3f6a96bf,0x3f6a68dd,0x3f6a3acc,0x3f6a0c8c,0x3f69de1d,0x3f69af81,0x3f6980b4,0x3f6951ba,0x3f692291,0x3f68f339,0x3f68c3b2,0x3f6893ff,0x3f68641b,0x3f68340a,0x3f6803c9,0x3f67d35c,
0x3f67a2be,0x3f6771f4,0x3f6740fc,0x3f670fd4,0x3f66de80,0x3f66acfb,0x3f667b4b,0x3f66496b,0x3f66175e,0x3f65e522,0x3f65b2b9,0x3f658023,0x3f654d5d,0x3f651a6c,0x3f64e74a,0x3f64b3fd,
0x3f648080,0x3f644cd8,0x3f641900,0x3f63e4fc,0x3f63b0cb,0x3f637c6b,0x3f6347df,0x3f631324,0x3f62de3d,0x3f62a927,0x3f6273e6,0x3f623e78,0x3f6208da,0x3f61d312,0x3f619d1a,0x3f6166f7,
0x3f6130a6,0x3f60fa29,0x3f60c37d,0x3f608ca7,0x3f6055a3,0x3f601e71,0x3f5fe714,0x3f5faf89,0x3f5f77d3,0x3f5f3fee,0x3f5f07df,0x3f5ecfa1,0x3f5e9738,0x3f5e5ea3,0x3f5e25e0,0x3f5decf3,
0x3f5db3d7,0x3f5d7a91,0x3f5d411c,0x3f5d077e,0x3f5ccdb1,0x3f5c93ba,0x3f5c5998,0x3f5c1f47,0x3f5be4cc,0x3f5baa24,0x3f5b6f51,0x3f5b3451,0x3f5af927,0x3f5abdd1,0x3f5a824e,0x3f5a46a1,
0x3f5a0ac6,0x3f59cec2,0x3f599291,0x3f595636,0x3f5919ad,0x3f58dcfc,0x3f58a01f,0x3f586314,0x3f5825e1,0x3f57e880,0x3f57aaf6,0x3f576d3f,0x3f572f60,0x3f56f153,0x3f56b31d,0x3f5674bd,
0x3f56362f,0x3f55f779,0x3f55b896,0x3f55798b,0x3f553a53,0x3f54faf2,0x3f54bb65,0x3f547baf,0x3f543bcf,0x3f53fbc3,0x3f53bb8e,0x3f537b2d,0x3f533aa4,0x3f52f9ee,0x3f52b911,0x3f527807,
0x3f5236d6,0x3f51f57a,0x3f51b3f2,0x3f517243,0x3f513068,0x3f50ee65,0x3f50ac36,0x3f5069e0,0x3f502760,0x3f4fe4b5,0x3f4fa1e2,0x3f4f5ee3,0x3f4f1bbd,0x3f4ed86c,0x3f4e94f4,0x3f4e5150,
0x3f4e0d85,0x3f4dc991,0x3f4d8572,0x3f4d412c,0x3f4cfcbb,0x3f4cb823,0x3f4c7360,0x3f4c2e76,0x3f4be961,0x3f4ba426,0x3f4b5ec3,0x3f4b1934,0x3f4ad37f,0x3f4a8da0,0x3f4a479a,0x3f4a0169,
0x3f49bb13,0x3f497492,0x3f492deb,0x3f48e71c,0x3f48a022,0x3f485903,0x3f4811b9,0x3f47ca4a,0x3f4782b0,0x3f473af2,0x3f46f30b,0x3f46aafa,0x3f4662c4,0x3f461a64,0x3f45d1df,0x3f458930,
0x3f45405b,0x3f44f75d,0x3f44ae3b,0x3f4464f1,0x3f441b7d,0x3f43d1e4,0x3f438822,0x3f433e3c,0x3f42f42c,0x3f42a9f7,0x3f425f9a,0x3f421517,0x3f41ca6f,0x3f417f9d,0x3f4134a6,0x3f40e987,
0x3f409e44,0x3f4052d8,0x3f400748,0x3f3fbb8f,0x3f3f6fb2,0x3f3f23af,0x3f3ed783,0x3f3e8b34,0x3f3e3ebd,0x3f3df221,0x3f3da55e,0x3f3d5877,0x3f3d0b6a,0x3f3cbe35,0x3f3c70dd,0x3f3c235c,
0x3f3bd5b9,0x3f3b87ee,0x3f3b39ff,0x3f3aebe9,0x3f3a9db0,0x3f3a4f52,0x3f3a00cc,0x3f39b223,0x3f396353,0x3f391461,0x3f38c546,0x3f38760a,0x3f3826a6,0x3f37d720,0x3f378775,0x3f3737a3,
0x3f36e7af,0x3f369794,0x3f364757,0x3f35f6f3,0x3f35a66e,0x3f3555c1,0x3f3504f3,0x3f34b401,0x3f3462e8,0x3f3411ae,0x3f33c04d,0x3f336ecb,0x3f331d22,0x3f32cb58,0x3f327968,0x3f322757,
0x3f31d523,0x3f3182c8,0x3f31304c,0x3f30ddab,0x3f308ae8,0x3f303800,0x3f2fe4f8,0x3f2f91cc,0x3f2f3e7a,0x3f2eeb09,0x3f2e9771,0x3f2e43ba,0x3f2defdd,0x3f2d9be0,0x3f2d47bd,0x3f2cf37b,
0x3f2c9f16,0x3f2c4a8c,0x3f2bf5e2,0x3f2ba114,0x3f2b4c25,0x3f2af712,0x3f2aa1e0,0x3f2a4c88,0x3f29f711,0x3f29a179,0x3f294bbc,0x3f28f5df,0x3f289fdf,0x3f2849bf,0x3f27f37b,0x3f279d18,
0x3f274691,0x3f26efec,0x3f269925,0x3f26423a,0x3f25eb30,0x3f259403,0x3f253cb8,0x3f24e548,0x3f248dbb,0x3f24360d,0x3f23de3a,0x3f23864b,0x3f232e37,0x3f22d606,0x3f227db2,0x3f222540,
0x3f21ccab,0x3f2173f8,0x3f211b26,0x3f20c230,0x3f20691d,0x3f200fe6,0x3f1fb693,0x3f1f5d1d,0x3f1f038b,0x3f1ea9d5,0x3f1e5003,0x3f1df612,0x3f1d9bfd,0x3f1d41cc,0x3f1ce779,0x3f1c8d0a,
0x3f1c3278,0x3f1bd7ca,0x3f1b7cfa,0x3f1b220e,0x3f1ac703,0x3f1a6bd6,0x3f1a108e,0x3f19b523,0x3f19599d,0x3f18fdf5,0x3f18a232,0x3f184650,0x3f17ea4d,0x3f178e2e,0x3f1731ee,0x3f16d593,
0x3f167917,0x3f161c80,0x3f15bfc8,0x3f1562f5,0x3f150604,0x3f14a8f3,0x3f144bc7,0x3f13ee7a,0x3f139112,0x3f13338a,0x3f12d5e8,0x3f127825,0x3f121a49,0x3f11bc4f,0x3f115e35,0x3f110001,
0x3f10a1ad,0x3f10433f,0x3f0fe4b1,0x3f0f860a,0x3f0f2743,0x3f0ec862,0x3f0e6965,0x3f0e0a48,0x3f0dab13,0x3f0d4bbd,0x3f0cec4f,0x3f0c8cc1,0x3f0c2d1b,0x3f0bcd55,0x3f0b6d77,0x3f0b0d7c,
0x3f0aad63,0x3f0a4d31,0x3f09ece1,0x3f098c78,0x3f092bf1,0x3f08cb51,0x3f086a96,0x3f0809bc,0x3f07a8cb,0x3f0747bb,0x3f06e694,0x3f06854e,0x3f0623f1,0x3f05c276,0x3f0560e3,0x3f04ff36,
0x3f049d6b,0x3f043b88,0x3f03d988,0x3f037771,0x3f03153d,0x3f02b2f1,0x3f025088,0x3f01ee09,0x3f018b6f,0x3f0128b8,0x3f00c5eb,0x3f006301,0x3f000001,0x3eff39c6,0x3efe7360,0x3efdacbf,
0x3efce5f2,0x3efc1ef4,0x3efb57bc,0x3efa9058,0x3ef9c8bc,0x3ef900f5,0x3ef838f5,0x3ef770ca,0x3ef6a86e,0x3ef5dfda,0x3ef5171c,0x3ef44e26,0x3ef38506,0x3ef2bbae,0x3ef1f22d,0x3ef12875,
0x3ef05e94,0x3eef9482,0x3eeeca3a,0x3eedffc9,0x3eed3522,0x3eec6a52,0x3eeb9f4c,0x3eead41e,0x3eea08ba,0x3ee93d2f,0x3ee87174,0x3ee7a585,0x3ee6d96e,0x3ee60d22,0x3ee540af,0x3ee47408,
0x3ee3a73a,0x3ee2da37,0x3ee20d0e,0x3ee13fb8,0x3ee0722e,0x3edfa47e,0x3eded69a,0x3ede0892,0x3edd3a55,0x3edc6bf4,0x3edb9d5f,0x3edacea6,0x3ed9ffc1,0x3ed930a9,0x3ed8616e,0x3ed791ff,
0x3ed6c26d,0x3ed5f2a9,0x3ed522c2,0x3ed452b0,0x3ed3826c,0x3ed2b205,0x3ed1e16d,0x3ed110b2,0x3ed03fc7,0x3ecf6eb9,0x3ece9d7a,0x3ecdcc19,0x3eccfa90,0x3ecc28d6,0x3ecb56fa,0x3eca84ef,
0x3ec9b2c3,0x3ec8e067,0x3ec80dea,0x3ec73b3e,0x3ec66871,0x3ec5957d,0x3ec4c25a,0x3ec3ef17,0x3ec31ba6,0x3ec24815,0x3ec17456,0x3ec0a078,0x3ebfcc6c,0x3ebef841,0x3ebe23f0,0x3ebd4f71,
0x3ebc7ad4,0x3ebba60a,0x3ebad122,0x3eb9fc0e,0x3eb926db,0x3eb85184,0x3eb77c00,0x3eb6a660,0x3eb5d093,0x3eb4faa9,0x3eb42494,0x3eb34e63,0x3eb27806,0x3eb1a18d,0x3eb0caf0,0x3eaff429,
0x3eaf1d46,0x3eae4639,0x3ead6f10,0x3eac97bd,0x3eabc050,0x3eaae8b8,0x3eaa1106,0x3ea93932,0x3ea86135,0x3ea7891d,0x3ea6b0dd,0x3ea5d882,0x3ea50000,0x3ea42763,0x3ea34e9f,0x3ea275c1,
0x3ea19cc3,0x3ea0c39d,0x3e9fea5f,0x3e9f10f9,0x3e9e377b,0x3e9d5dd6,0x3e9c8419,0x3e9baa3c,0x3e9ad039,0x3e99f61f,0x3e991bdf,0x3e984187,0x3e976709,0x3e968c75,0x3e95b1bb,0x3e94d6eb,
0x3e93fbfd,0x3e9320ea,0x3e9245c2,0x3e916a74,0x3e908f11,0x3e8fb38a,0x3e8ed7ed,0x3e8dfc2c,0x3e8d2057,0x3e8c4465,0x3e8b6850,0x3e8a8c27,0x3e89afda,0x3e88d37a,0x3e87f6f6,0x3e871a5f,
0x3e863da5,0x3e8560d9,0x3e8483f1,0x3e83a6e8,0x3e82c9cc,0x3e81ec8e,0x3e810f3e,0x3e8031cc,0x3e7ea891,0x3e7ced47,0x3e7b31db,0x3e79763d,0x3e77ba5d,0x3e75fe5b,0x3e744219,0x3e7285b5,
0x3e70c912,0x3e6f0c4e,0x3e6d4f5a,0x3e6b9227,0x3e69d4d5,0x3e681745,0x3e665996,0x3e649ba9,0x3e62dd9e,0x3e611f56,0x3e5f60f1,0x3e5da260,0x3e5be392,0x3e5a24a8,0x3e586584,0x3e56a643,
0x3e54e6c8,0x3e532732,0x3e516763,0x3e4fa779,0x3e4de766,0x3e4c2719,0x3e4a66b4,0x3e48a617,0x3e46e562,0x3e452475,0x3e436370,0x3e41a235,0x3e3fe0e2,0x3e3e1f6a,0x3e3c5dbc,0x3e3a9bf7,
0x3e38d9fe,0x3e3717f0,0x3e3555ae,0x3e339356,0x3e31d0dc,0x3e300e2d,0x3e2e4b6c,0x3e2c8878,0x3e2ac571,0x3e290239,0x3e273eee,0x3e257b72,0x3e23b7e5,0x3e21f437,0x3e20305a,0x3e1e6c6c,
0x3e1ca84e,0x3e1ae421,0x3e191fc6,0x3e175b5b,0x3e1596c3,0x3e13d21d,0x3e120d59,0x3e104868,0x3e0e836a,0x3e0cbe40,0x3e0af909,0x3e0933a7,0x3e076e39,0x3e05a8a1,0x3e03e2fe,0x3e021d40,
0x3e005759,0x3dfd22cf,0x3df9969a,0x3df60a53,0x3df27dbb,0x3deef113,0x3deb643b,0x3de7d714,0x3de449df,0x3de0bc5c,0x3ddd2ecd,0x3dd9a0f1,0x3dd61309,0x3dd284d8,0x3dcef69c,0x3dcb6836,
0x3dc7d988,0x3dc44ad2,0x3dc0bbd5,0x3dbd2cd2,0x3db99d89,0x3db60e3a,0x3db27ea8,0x3daeef11,0x3dab5f58,0x3da7cf5d,0x3da43f60,0x3da0af22,0x3d9d1ee4,0x3d998e67,0x3d95fdeb,0x3d926d32,
0x3d8edc7b,0x3d8b4ba7,0x3d87ba98,0x3d84298d,0x3d809849,0x3d7a0e14,0x3d72eb25,0x3d6bc846,0x3d64a4f8,0x3d5d81bb,0x3d565e53,0x3d4f3a80,0x3d4816c4,0x3d40f29f,0x3d39ce94,0x3d32aa24,
0x3d2b85d1,0x3d24615b,0x3d1d3c84,0x3d1617ce,0x3d0ef2ba,0x3d07cdc9,0x3d00a87d,0x3cf306b0,0x3ce4bbb5,0x3cd6710c,0x3cc82638,0x3cb9dabc,0x3cab8f9b,0x3c9d43d8,0x3c8ef875,0x3c80ac76,
0x3c64c1bb,0x3c48295c,0x3c2b91d5,0x3c0efa2b,0x3be4c2ca,0x3bab9311,0x3b64c26a,0x3ae4c509,0xb3bbbd2e,0xbae4c2e7,0xbb64c559,0xbbab9288,0xbbe4c242,0xbc0ef9e7,0xbc2b9190,0xbc482a18,
0xbc64c177,0xbc80acd4,0xbc8ef853,0xbc9d43b6,0xbcab8f79,0xbcb9da9a,0xbcc82616,0xbcd670e9,0xbce4bc12,0xbcf3068e,0xbd00a8ac,0xbd07cdb8,0xbd0ef2a9,0xbd1617bd,0xbd1d3c73,0xbd24614a,
0xbd2b85c0,0xbd32aa53,0xbd39ce83,0xbd40f2ce,0xbd4816b3,0xbd4f3a6f,0xbd565e42,0xbd5d81aa,0xbd64a526,0xbd6bc835,0xbd72eb54,0xbd7a0e03,0xbd809860,0xbd842985,0xbd87ba8f,0xbd8b4b9f,
0xbd8edc72,0xbd926d49,0xbd95fde3,0xbd998e7f,0xbd9d1edc,0xbda0af1a,0xbda43f57,0xbda7cf54,0xbdab5f50,0xbdaeef09,0xbdb27ebf,0xbdb60e32,0xbdb99da0,0xbdbd2cc9,0xbdc0bbcd,0xbdc44aca,
0xbdc7d980,0xbdcb682e,0xbdcef693,0xbdd284ef,0xbdd61301,0xbdd9a108,0xbddd2ec4,0xbde0bc54,0xbde449d6,0xbde7d70c,0xbdeb6433,0xbdeef10b,0xbdf27dd3,0xbdf60a4b,0xbdf996b1,0xbdfd22c6,
0xbe005754,0xbe021d3c,0xbe03e2f9,0xbe05a8ad,0xbe076e35,0xbe0933b3,0xbe0af905,0xbe0cbe4b,0xbe0e8365,0xbe104863,0xbe120d54,0xbe13d218,0xbe1596cf,0xbe175b57,0xbe191fd1,0xbe1ae41d,
0xbe1ca84a,0xbe1e6c67,0xbe203055,0xbe21f433,0xbe23b7e1,0xbe257b7e,0xbe273eea,0xbe290244,0xbe2ac56d,0xbe2c8874,0xbe2e4b68,0xbe300e29,0xbe31d0d7,0xbe339352,0xbe3555b9,0xbe3717ec,
0xbe38da0a,0xbe3a9bf3,0xbe3c5db7,0xbe3e1f66,0xbe3fe0de,0xbe41a240,0xbe43636c,0xbe452480,0xbe46e55d,0xbe48a623,0xbe4a66b0,0xbe4c2715,0xbe4de761,0xbe4fa775,0xbe51676e,0xbe53272e,
0xbe54e6d4,0xbe56a63f,0xbe58657f,0xbe5a24a4,0xbe5be38e,0xbe5da25b,0xbe5f60ed,0xbe611f62,0xbe62dd9a,0xbe649bb4,0xbe665991,0xbe681741,0xbe69d4d1,0xbe6b9223,0xbe6d4f56,0xbe6f0c4a,
0xbe70c91d,0xbe7285b1,0xbe744224,0xbe75fe57,0xbe77ba59,0xbe797639,0xbe7b31d7,0xbe7ced53,0xbe7ea88d,0xbe8031d2,0xbe810f3b,0xbe81ec93,0xbe82c9ca,0xbe83a6e6,0xbe8483ef,0xbe8560d7,
0xbe863dab,0xbe871a5d,0xbe87f6fc,0xbe88d377,0xbe89afe0,0xbe8a8c25,0xbe8b684e,0xbe8c4463,0xbe8d2055,0xbe8dfc32,0xbe8ed7eb,0xbe8fb38f,0xbe908f0f,0xbe916a72,0xbe9245c0,0xbe9320e8,
0xbe93fbfb,0xbe94d6e9,0xbe95b1c1,0xbe968c73,0xbe97670f,0xbe984185,0xbe991bdd,0xbe99f61d,0xbe9ad037,0xbe9baa3a,0xbe9c8417,0xbe9d5ddb,0xbe9e3779,0xbe9f10ff,0xbe9fea5d,0xbea0c39b,
0xbea19cc1,0xbea275bf,0xbea34ea4,0xbea42761,0xbea50005,0xbea5d880,0xbea6b0e2,0xbea7891b,0xbea86133,0xbea93930,0xbeaa1104,0xbeaae8be,0xbeabc04e,0xbeac97c3,0xbead6f0e,0xbeae4637,
0xbeaf1d44,0xbeaff427,0xbeb0caee,0xbeb1a18b,0xbeb2780b,0xbeb34e61,0xbeb4249a,0xbeb4faa7,0xbeb5d091,0xbeb6a65e,0xbeb77bfe,0xbeb85182,0xbeb926d9,0xbeb9fc13,0xbebad120,0xbebba610,
0xbebc7ad2,0xbebd4f6f,0xbebe23ee,0xbebef83f,0xbebfcc71,0xbec0a076,0xbec1745c,0xbec24813,0xbec31bac,0xbec3ef15,0xbec4c258,0xbec5957b,0xbec6686f,0xbec73b43,0xbec80de8,0xbec8e06c,
0xbec9b2c1,0xbeca84ed,0xbecb56f8,0xbecc28d4,0xbeccfa8e,0xbecdcc17,0xbece9d7f,0xbecf6eb7,0xbed03fcc,0xbed110b0,0xbed1e16b,0xbed2b203,0xbed3826a,0xbed452ae,0xbed522c0,0xbed5f2af,
0xbed6c26c,0xbed79205,0xbed8616c,0xbed930a7,0xbed9ffbf,0xbedacea4,0xbedb9d64,0xbedc6bf2,0xbedd3a5a,0xbede0890,0xbeded6a0,0xbedfa47c,0xbee0722c,0xbee13fb6,0xbee20d0c,0xbee2da3c,
0xbee3a738,0xbee4740d,0xbee540ad,0xbee60d27,0xbee6d96c,0xbee7a583,0xbee87173,0xbee93d2d,0xbeea08bf,0xbeead41c,0xbeeb9f51,0xbeec6a50,0xbeed3520,0xbeedffc7,0xbeeeca38,0xbeef9481,
0xbef05e92,0xbef1287a,0xbef1f22c,0xbef2bbb4,0xbef38504,0xbef44e24,0xbef5171a,0xbef5dfd8,0xbef6a86c,0xbef770c8,0xbef838fa,0xbef900f3,0xbef9c8c1,0xbefa9056,0xbefb57ba,0xbefc1ef2,
0xbefce5f1,0xbefdacc4,0xbefe735e,0xbeff39cc,0xbeffffff,0xbf006304,0xbf00c5ea,0xbf0128b8,0xbf018b6e,0xbf01ee08,0xbf02508b,0xbf02b2f0,0xbf03153f,0xbf037770,0xbf03d987,0xbf043b87,
0xbf049d6a,0xbf04ff35,0xbf0560e2,0xbf05c278,0xbf0623f0,0xbf068551,0xbf06e693,0xbf0747bb,0xbf07a8ca,0xbf0809bc,0xbf086a95,0xbf08cb50,0xbf092bf3,0xbf098c77,0xbf09ece3,0xbf0a4d31,
0xbf0aad62,0xbf0b0d7b,0xbf0b6d76,0xbf0bcd57,0xbf0c2d1a,0xbf0c8cc4,0xbf0cec4e,0xbf0d4bc0,0xbf0dab12,0xbf0e0a47,0xbf0e6964,0xbf0ec861,0xbf0f2745,0xbf0f8609,0xbf0fe4b4,0xbf10433e,
0xbf10a1ac,0xbf110000,0xbf115e34,0xbf11bc4e,0xbf121a48,0xbf127828,0xbf12d5e7,0xbf13338d,0xbf139111,0xbf13ee79,0xbf144bc6,0xbf14a8f2,0xbf150603,0xbf1562f4,0xbf15bfca,0xbf161c7f,
0xbf16791a,0xbf16d593,0xbf1731ed,0xbf178e2d,0xbf17ea4c,0xbf18464f,0xbf18a231,0xbf18fdf7,0xbf19599c,0xbf19b525,0xbf1a108d,0xbf1a6bd5,0xbf1ac702,0xbf1b220d,0xbf1b7cfc,0xbf1bd7c9,
0xbf1c327a,0xbf1c8d09,0xbf1ce77c,0xbf1d41cc,0xbf1d9bfc,0xbf1df611,0xbf1e5002,0xbf1ea9d8,0xbf1f038a,0xbf1f5d20,0xbf1fb693,0xbf200fe6,0xbf20691c,0xbf20c22f,0xbf211b25,0xbf2173f7,
0xbf21ccad,0xbf22253f,0xbf227db4,0xbf22d606,0xbf232e37,0xbf23864a,0xbf23de3a,0xbf24360c,0xbf248dba,0xbf24e54a,0xbf253cb7,0xbf259405,0xbf25eb30,0xbf264239,0xbf269924,0xbf26efeb,
0xbf274693,0xbf279d17,0xbf27f37d,0xbf2849be,0xbf289fe1,0xbf28f5df,0xbf294bbb,0xbf29a178,0xbf29f711,0xbf2a4c8a,0xbf2aa1df,0xbf2af714,0xbf2b4c25,0xbf2ba113,0xbf2bf5e2,0xbf2c4a8b,
0xbf2c9f15,0xbf2cf37a,0xbf2d47bf,0xbf2d9bdf,0xbf2defdf,0xbf2e43b9,0xbf2e9770,0xbf2eeb08,0xbf2f3e7a,0xbf2f91cb,0xbf2fe4f7,0xbf303802,0xbf308ae8,0xbf30ddad,0xbf31304c,0xbf3182c7,
0xbf31d522,0xbf322756,0xbf32796a,0xbf32cb58,0xbf331d24,0xbf336eca,0xbf33c04f,0xbf3411ad,0xbf3462e7,0xbf34b400,0xbf3504f2,0xbf3555c3,0xbf35a66d,0xbf35f6f5,0xbf364757,0xbf369793,
0xbf36e7af,0xbf3737a3,0xbf378775,0xbf37d71f,0xbf3826a8,0xbf387609,0xbf38c548,0xbf391460,0xbf396352,0xbf39b223,0xbf3a00cb,0xbf3a4f51,0xbf3a9daf,0xbf3aebeb,0xbf3b39ff,0xbf3b87f0,
0xbf3bd5b8,0xbf3c235c,0xbf3c70dc,0xbf3cbe34,0xbf3d0b69,0xbf3d5876,0xbf3da560,0xbf3df221,0xbf3e3ebe,0xbf3e8b34,0xbf3ed783,0xbf3f23ae,0xbf3f6fb1,0xbf3fbb91,0xbf400747,0xbf4052da,
0xbf409e43,0xbf40e989,0xbf4134a6,0xbf417f9c,0xbf41ca6e,0xbf421517,0xbf425f99,0xbf42a9f9,0xbf42f42e,0xbf433e3b,0xbf438822,0xbf43d1e1,0xbf441b7f,0xbf4464f0,0xbf44ae3a,0xbf44f75d,
0xbf45405d,0xbf458931,0xbf45d1de,0xbf461a63,0xbf4662c1,0xbf46aafc,0xbf46f30a,0xbf473af1,0xbf4782b0,0xbf47ca4c,0xbf4811bb,0xbf485902,0xbf48a021,0xbf48e719,0xbf492ded,0xbf497493,
0xbf49bb12,0xbf4a0169,0xbf4a479c,0xbf4a8da1,0xbf4ad37f,0xbf4b1933,0xbf4b5ec0,0xbf4ba428,0xbf4be963,0xbf4c2e75,0xbf4c735f,0xbf4cb825,0xbf4cfcbc,0xbf4d412b,0xbf4d8571,0xbf4dc98e,
0xbf4e0d87,0xbf4e5152,0xbf4e94f3,0xbf4ed86b,0xbf4f1bbf,0xbf4f5ee5,0xbf4fa1e1,0xbf4fe4b4,0xbf50275d,0xbf5069e2,0xbf50ac38,0xbf50ee64,0xbf513067,0xbf517240,0xbf51b3f4,0xbf51f579,
0xbf5236d5,0xbf527806,0xbf52b912,0xbf52f9f0,0xbf533aa3,0xbf537b2c,0xbf53bb8b,0xbf53fbc4,0xbf543bcf,0xbf547baf,0xbf54bb64,0xbf54faf4,0xbf553a54,0xbf55798a,0xbf55b896,0xbf55f777,
0xbf563631,0xbf5674bc,0xbf56b31d,0xbf56f152,0xbf572f61,0xbf576d41,0xbf57aaf6,0xbf57e87f,0xbf5825de,0xbf586316,0xbf58a01e,0xbf58dcfb,0xbf5919ad,0xbf595637,0xbf599292,0xbf59cec2,
0xbf5a0ac6,0xbf5a469e,0xbf5a824f,0xbf5abdd1,0xbf5af927,0xbf5b3450,0xbf5b6f53,0xbf5baa25,0xbf5be4cc,0xbf5c1f46,0xbf5c5995,0xbf5c93bc,0xbf5ccdb3,0xbf5d077d,0xbf5d411c,0xbf5d7a92,
0xbf5db3d8,0xbf5decf2,0xbf5e25e0,0xbf5e5ea1,0xbf5e973a,0xbf5ecfa2,0xbf5f07de,0xbf5f3fed,0xbf5f77d4,0xbf5faf8a,0xbf5fe714,0xbf601e71,0xbf6055a1,0xbf608ca8,0xbf60c37f,0xbf60fa28,
0xbf6130a5,0xbf6166f9,0xbf619d1b,0xbf61d311,0xbf6208da,0xbf623e75,0xbf6273e8,0xbf62a929,0xbf62de3d,0xbf631323,0xbf6347dd,0xbf637c6c,0xbf63b0cb,0xbf63e4fc,0xbf641900,0xbf644cd9,
0xbf648082,0xbf64b3fd,0xbf64e74a,0xbf651a69,0xbf654d5f,0xbf658023,0xbf65b2b9,0xbf65e521,0xbf66175f,0xbf66496c,0xbf667b4a,0xbf66acfb,0xbf66de7d,0xbf670fd5,0xbf6740fc,0xbf6771f4,
0xbf67a2be,0xbf67d35d,0xbf6803ca,0xbf683409,0xbf68641a,0xbf6893fc,0xbf68c3b4,0xbf68f339,0xbf692290,0xbf6951b9,0xbf6980b6,0xbf69af81,0xbf69de1d,0xbf6a0c8b,0xbf6a3acb,0xbf6a68de,
0xbf6a96c0,0xbf6ac473,0xbf6af1f7,0xbf6b1f4f,0xbf6b4c75,0xbf6b796c,0xbf6ba634,0xbf6bd2cd,0xbf6bff3a,0xbf6c2b75,0xbf6c5781,0xbf6c835e,0xbf6caf0e,0xbf6cda8c,0xbf6d05db,0xbf6d30fa,
0xbf6d5beb,0xbf6d86ae,0xbf6db140,0xbf6ddba2,0xbf6e05d4,0xbf6e2fda,0xbf6e59ad,0xbf6e8351,0xbf6eacc5,0xbf6ed60a,0xbf6eff22,0xbf6f2807,0xbf6f50bc,0xbf6f7942,0xbf6fa19a,0xbf6fc9c0,
0xbf6ff1b7,0xbf70197d,0xbf704113,0xbf70687c,0xbf708fb3,0xbf70b6b9,0xbf70dd8f,0xbf710435,0xbf712aae,0xbf7150f4,0xbf71770a,0xbf719cef,0xbf71c2a7,0xbf71e82c,0xbf720d81,0xbf7232a6,
0xbf72579a,0xbf727c60,0xbf72a0f4,0xbf72c556,0xbf72e989,0xbf730d8d,0xbf73315f,0xbf735500,0xbf737870,0xbf739bb0,0xbf73bec1,0xbf73e1a0,0xbf74044d,0xbf7426ca,0xbf744919,0xbf746b35,
0xbf748d1f,0xbf74aed9,0xbf74d062,0xbf74f1bd,0xbf7512e4,0xbf7533db,0xbf7554a0,0xbf757537,0xbf75959a,0xbf75b5cd,0xbf75d5ce,0xbf75f59e,0xbf761540,0xbf7634ae,0xbf7653eb,0xbf7672f7,
0xbf7691d3,0xbf76b07d,0xbf76cef5,0xbf76ed3c,0xbf770b51,0xbf772938,0xbf7746eb,0xbf77646c,0xbf7781bc,0xbf779edd,0xbf77bbca,0xbf77d886,0xbf77f511,0xbf781169,0xbf782d93,0xbf784989,
0xbf78654d,0xbf7880e0,0xbf789c43,0xbf78b772,0xbf78d270,0xbf78ed3c,0xbf7907d6,0xbf792241,0xbf793c78,0xbf79567d,0xbf797051,0xbf7989f4,0xbf79a364,0xbf79bca2,0xbf79d5ae,0xbf79ee88,
0xbf7a0732,0xbf7a1fa9,0xbf7a37ee,0xbf7a5000,0xbf7a67e1,0xbf7a7f91,0xbf7a970e,0xbf7aae58,0xbf7ac571,0xbf7adc59,0xbf7af30e,0xbf7b0990,0xbf7b1fe0,0xbf7b35fe,0xbf7b4bec,0xbf7b61a6,
0xbf7b772d,0xbf7b8c83,0xbf7ba1a7,0xbf7bb698,0xbf7bcb57,0xbf7bdfe3,0xbf7bf43e,0xbf7c0867,0xbf7c1c5d,0xbf7c3020,0xbf7c43b1,0xbf7c5711,0xbf7c6a3d,0xbf7c7d37,0xbf7c8ffe,0xbf7ca293,
0xbf7cb4f7,0xbf7cc727,0xbf7cd924,0xbf7ceaf0,0xbf7cfc8a,0xbf7d0df0,0xbf7d1f23,0xbf7d3025,0xbf7d40f3,0xbf7d5190,0xbf7d61fa,0xbf7d7231,0xbf7d8235,0xbf7d9208,0xbf7da1a7,0xbf7db113,
0xbf7dc04d,0xbf7dcf54,0xbf7dde2a,0xbf7deccb,0xbf7dfb3b,0xbf7e0977,0xbf7e1782,0xbf7e2559,0xbf7e32fd,0xbf7e406e,0xbf7e4dad,0xbf7e5aba,0xbf7e6793,0xbf7e743a,0xbf7e80ad,0xbf7e8cef,
0xbf7e98fd,0xbf7ea4d8,0xbf7eb080,0xbf7ebbf6,0xbf7ec739,0xbf7ed249,0xbf7edd26,0xbf7ee7d0,0xbf7ef247,0xbf7efc8c,0xbf7f069e,0xbf7f107c,0xbf7f1a28,0xbf7f23a1,0xbf7f2ce7,0xbf7f35f9,
0xbf7f3ed9,0xbf7f4786,0xbf7f5001,0xbf7f5848,0xbf7f605b,0xbf7f683c,0xbf7f6feb,0xbf7f7766,0xbf7f7eae,0xbf7f85c3,0xbf7f8ca5,0xbf7f9354,0xbf7f99d0,0xbf7fa019,0xbf7fa62f,0xbf7fac13,
0xbf7fb1c2,0xbf7fb73f,0xbf7fbc89,0xbf7fc1a0,0xbf7fc684,0xbf7fcb34,0xbf7fcfb2,0xbf7fd3fc,0xbf7fd814,0xbf7fdbf8,0xbf7fdfa9,0xbf7fe328,0xbf7fe673,0xbf7fe98b,0xbf7fec70,0xbf7fef22,
0xbf7ff1a0,0xbf7ff3ec,0xbf7ff605,0xbf7ff7ea,0xbf7ff99d,0xbf7ffb1c,0xbf7ffc68,0xbf7ffd81,0xbf7ffe67,0xbf7fff1a,0xbf7fff9a,0xbf7fffe6,0xbf800000,0xbf7fffe6,0xbf7fff9a,0xbf7fff1a,
0xbf7ffe67,0xbf7ffd81,0xbf7ffc68,0xbf7ffb1c,0xbf7ff99d,0xbf7ff7ea,0xbf7ff605,0xbf7ff3ec,0xbf7ff1a0,0xbf7fef22,0xbf7fec70,0xbf7fe98b,0xbf7fe673,0xbf7fe328,0xbf7fdfa9,0xbf7fdbf8,
0xbf7fd814,0xbf7fd3fc,0xbf7fcfb2,0xbf7fcb34,0xbf7fc684,0xbf7fc1a0,0xbf7fbc89,0xbf7fb73f,0xbf7fb1c2,0xbf7fac13,0xbf7fa62f,0xbf7fa019,0xbf7f99d0,0xbf7f9354,0xbf7f8ca5,0xbf7f85c3,
0xbf7f7eae,0xbf7f7766,0xbf7f6feb,0xbf7f683c,0xbf7f605b,0xbf7f5847,0xbf7f5001,0xbf7f4787,0xbf7f3ed9,0xbf7f35f9,0xbf7f2ce7,0xbf7f23a1,0xbf7f1a28,0xbf7f107c,0xbf7f069e,0xbf7efc8c,
0xbf7ef248,0xbf7ee7d0,0xbf7edd26,0xbf7ed249,0xbf7ec739,0xbf7ebbf6,0xbf7eb080,0xbf7ea4d8,0xbf7e98fd,0xbf7e8cef,0xbf7e80ad,0xbf7e743a,0xbf7e6793,0xbf7e5aba,0xbf7e4dad,0xbf7e406e,
0xbf7e32fd,0xbf7e2559,0xbf7e1782,0xbf7e0977,0xbf7dfb3b,0xbf7deccb,0xbf7dde2a,0xbf7dcf54,0xbf7dc04d,0xbf7db113,0xbf7da1a7,0xbf7d9208,0xbf7d8235,0xbf7d7231,0xbf7d61fa,0xbf7d5190,
0xbf7d40f3,0xbf7d3024,0xbf7d1f23,0xbf7d0df0,0xbf7cfc8a,0xbf7ceaf0,0xbf7cd924,0xbf7cc727,0xbf7cb4f7,0xbf7ca293,0xbf7c8ffe,0xbf7c7d37,0xbf7c6a3d,0xbf7c5711,0xbf7c43b1,0xbf7c3020,
0xbf7c1c5c,0xbf7c0867,0xbf7bf43f,0xbf7bdfe3,0xbf7bcb57,0xbf7bb698,0xbf7ba1a7,0xbf7b8c83,0xbf7b772d,0xbf7b61a5,0xbf7b4bec,0xbf7b3600,0xbf7b1fe0,0xbf7b0990,0xbf7af30d,0xbf7adc59,
0xbf7ac571,0xbf7aae58,0xbf7a970e,0xbf7a7f91,0xbf7a67e2,0xbf7a5000,0xbf7a37ed,0xbf7a1fa9,0xbf7a0732,0xbf79ee88,0xbf79d5ae,0xbf79bca2,0xbf79a364,0xbf7989f4,0xbf797050,0xbf79567d,
0xbf793c78,0xbf792241,0xbf7907d6,0xbf78ed3c,0xbf78d270,0xbf78b772,0xbf789c42,0xbf7880df,0xbf78654d,0xbf784988,0xbf782d93,0xbf781169,0xbf77f510,0xbf77d886,0xbf77bbca,0xbf779edd,
0xbf7781bc,0xbf77646c,0xbf7746ea,0xbf772938,0xbf770b51,0xbf76ed3c,0xbf76cef5,0xbf76b07d,0xbf7691d3,0xbf7672f7,0xbf7653eb,0xbf7634ae,0xbf761540,0xbf75f59e,0xbf75d5ce,0xbf75b5cd,
0xbf75959a,0xbf757537,0xbf7554a0,0xbf7533db,0xbf7512e4,0xbf74f1bd,0xbf74d065,0xbf74aed9,0xbf748d1f,0xbf746b35,0xbf744919,0xbf7426ca,0xbf74044d,0xbf73e1a0,0xbf73bec1,0xbf739bb2,
0xbf737870,0xbf735500,0xbf73315f,0xbf730d8d,0xbf72e989,0xbf72c556,0xbf72a0f3,0xbf727c60,0xbf72579c,0xbf7232a6,0xbf720d81,0xbf71e82c,0xbf71c2a7,0xbf719cef,0xbf71770a,0xbf7150f4,
0xbf712aae,0xbf710438,0xbf70dd8f,0xbf70b6b9,0xbf708fb2,0xbf70687c,0xbf704113,0xbf70197d,0xbf6ff1b6,0xbf6fc9c0,0xbf6fa19a,0xbf6f7942,0xbf6f50bc,0xbf6f2807,0xbf6eff21,0xbf6ed60a,
0xbf6eacc5,0xbf6e8351,0xbf6e59ad,0xbf6e2fda,0xbf6e05d4,0xbf6ddba1,0xbf6db140,0xbf6d86ae,0xbf6d5bea,0xbf6d30fa,0xbf6d05db,0xbf6cda8c,0xbf6caf0e,0xbf6c835d,0xbf6c5781,0xbf6c2b75,
0xbf6bff3a,0xbf6bd2cd,0xbf6ba634,0xbf6b796c,0xbf6b4c75,0xbf6b1f4f,0xbf6af1f6,0xbf6ac472,0xbf6a96c0,0xbf6a68de,0xbf6a3aca,0xbf6a0c8b,0xbf69de1d,0xbf69af81,0xbf6980b5,0xbf6951b8,
0xbf692290,0xbf68f339,0xbf68c3b4,0xbf689400,0xbf68641a,0xbf683409,0xbf6803ca,0xbf67d35d,0xbf67a2be,0xbf6771f4,0xbf6740fb,0xbf670fd5,0xbf66de81,0xbf66acfb,0xbf667b4a,0xbf66496c,
0xbf66175f,0xbf65e521,0xbf65b2b9,0xbf658023,0xbf654d5f,0xbf651a6d,0xbf64e74a,0xbf64b3fc,0xbf648082,0xbf644cd9,0xbf6418ff,0xbf63e4fc,0xbf63b0cb,0xbf637c6c,0xbf6347e0,0xbf631323,
0xbf62de3c,0xbf62a929,0xbf6273e7,0xbf623e75,0xbf6208da,0xbf61d311,0xbf619d1b,0xbf6166f8,0xbf6130a5,0xbf60fa28,0xbf60c37e,0xbf608ca8,0xbf6055a1,0xbf601e71,0xbf5fe714,0xbf5faf8a,
0xbf5f77d4,0xbf5f3fed,0xbf5f07de,0xbf5ecfa2,0xbf5e9739,0xbf5e5ea1,0xbf5e25df,0xbf5decf2,0xbf5db3d8,0xbf5d7a92,0xbf5d411c,0xbf5d077d,0xbf5ccdb2,0xbf5c93bc,0xbf5c5995,0xbf5c1f46,
0xbf5be4cc,0xbf5baa25,0xbf5b6f53,0xbf5b3450,0xbf5af926,0xbf5abdd1,0xbf5a824f,0xbf5a469e,0xbf5a0ac6,0xbf59cec2,0xbf599292,0xbf595637,0xbf5919ac,0xbf58dcfb,0xbf58a01e,0xbf586316,
0xbf5825e2,0xbf57e87f,0xbf57aaf6,0xbf576d41,0xbf572f61,0xbf56f152,0xbf56b31c,0xbf5674bc,0xbf563631,0xbf55f77b,0xbf55b896,0xbf55798a,0xbf553a54,0xbf54faf4,0xbf54bb64,0xbf547baf,
0xbf543bcf,0xbf53fbc4,0xbf53bb90,0xbf537b2c,0xbf533aa3,0xbf52f9f0,0xbf52b912,0xbf527806,0xbf5236d5,0xbf51f579,0xbf51b3f4,0xbf517245,0xbf513067,0xbf50ee64,0xbf50ac38,0xbf5069e1,
0xbf50275d,0xbf4fe4b4,0xbf4fa1e1,0xbf4f5ee5,0xbf4f1bbf,0xbf4ed86b,0xbf4e94f3,0xbf4e5151,0xbf4e0d87,0xbf4dc98e,0xbf4d8571,0xbf4d412b,0xbf4cfcbc,0xbf4cb824,0xbf4c735f,0xbf4c2e75,
0xbf4be963,0xbf4ba428,0xbf4b5ebf,0xbf4b1933,0xbf4ad37e,0xbf4a8da1,0xbf4a479b,0xbf4a0168,0xbf49bb12,0xbf497493,0xbf492dec,0xbf48e718,0xbf48a021,0xbf485902,0xbf4811bb,0xbf47ca4c,
0xbf4782af,0xbf473af1,0xbf46f30a,0xbf46aafc,0xbf4662c1,0xbf461a63,0xbf45d1de,0xbf458931,0xbf45405d,0xbf44f75d,0xbf44ae3a,0xbf4464f0,0xbf441b7e,0xbf43d1e6,0xbf438821,0xbf433e3b,
0xbf42f42d,0xbf42a9f9,0xbf425f99,0xbf421517,0xbf41ca6e,0xbf417f9e,0xbf4134a8,0xbf40e986,0xbf409e43,0xbf4052d9,0xbf400749,0xbf3fbb8e,0xbf3f6fb1,0xbf3f23ae,0xbf3ed785,0xbf3e8b36,
0xbf3e3ebc,0xbf3df220,0xbf3da55f,0xbf3d5878,0xbf3d0b66,0xbf3cbe34,0xbf3c70dc,0xbf3c235e,0xbf3bd5bb,0xbf3b87ed,0xbf3b39fe,0xbf3aebeb,0xbf3a9db2,0xbf3a4f4e,0xbf3a00cb,0xbf39b222,
0xbf396355,0xbf391462,0xbf38c545,0xbf387609,0xbf3826a8,0xbf37d722,0xbf378772,0xbf3737a2,0xbf36e7ae,0xbf369796,0xbf364759,0xbf35f6f2,0xbf35a66d,0xbf3555c3,0xbf3504f5,0xbf34b3fd,
0xbf3462e7,0xbf3411ad,0xbf33c04f,0xbf336ecc,0xbf331d21,0xbf32cb57,0xbf32796a,0xbf322759,0xbf31d51f,0xbf3182c7,0xbf31304b,0xbf30ddac,0xbf308aea,0xbf3037ff,0xbf2fe4f7,0xbf2f91cb,
0xbf2f3e7c,0xbf2eeb0b,0xbf2e9770,0xbf2e43b9,0xbf2defde,0xbf2d9be2,0xbf2d47bc,0xbf2cf37a,0xbf2c9f15,0xbf2c4a8e,0xbf2bf5e4,0xbf2ba112,0xbf2b4c24,0xbf2af714,0xbf2aa1e1,0xbf2a4c87,
0xbf29f710,0xbf29a178,0xbf294bbe,0xbf28f5e1,0xbf289fdd,0xbf2849be,0xbf27f37d,0xbf279d1a,0xbf274690,0xbf26efeb,0xbf269924,0xbf26423c,0xbf25eb32,0xbf259402,0xbf253cb6,0xbf24e54a,
0xbf248dbd,0xbf243608,0xbf23de39,0xbf23864a,0xbf232e39,0xbf22d608,0xbf227db1,0xbf22253f,0xbf21ccad,0xbf2173fa,0xbf211b21,0xbf20c22e,0xbf20691b,0xbf200fe8,0xbf1fb695,0xbf1f5d1c,
0xbf1f038a,0xbf1ea9d7,0xbf1e5005,0xbf1df60d,0xbf1d9bfc,0xbf1d41cb,0xbf1ce77b,0xbf1c8d0c,0xbf1c3277,0xbf1bd7c9,0xbf1b7cfc,0xbf1b2210,0xbf1ac6ff,0xbf1a6bd5,0xbf1a108c,0xbf19b525,
0xbf19599f,0xbf18fdf4,0xbf18a231,0xbf18464f,0xbf17ea4f,0xbf178e2a,0xbf1731ed,0xbf16d592,0xbf167919,0xbf161c82,0xbf15bfc7,0xbf1562f4,0xbf150603,0xbf14a8f5,0xbf144bc9,0xbf13ee78,
0xbf139111,0xbf13338c,0xbf12d5ea,0xbf127824,0xbf121a48,0xbf11bc4e,0xbf115e37,0xbf110003,0xbf10a1ab,0xbf10433e,0xbf0fe4b3,0xbf0f860c,0xbf0f2741,0xbf0ec861,0xbf0e6964,0xbf0e0a4a,
0xbf0dab15,0xbf0d4bbc,0xbf0cec4e,0xbf0c8cc3,0xbf0c2d1d,0xbf0bcd54,0xbf0b6d75,0xbf0b0d7b,0xbf0aad65,0xbf0a4d34,0xbf09ece0,0xbf098c77,0xbf092bf3,0xbf08cb53,0xbf086a91,0xbf0809bb,
0xbf07a8ca,0xbf0747be,0xbf06e696,0xbf06854d,0xbf0623f0,0xbf05c278,0xbf0560e5,0xbf04ff31,0xbf049d69,0xbf043b87,0xbf03d98a,0xbf037773,0xbf03153b,0xbf02b2f0,0xbf02508a,0xbf01ee0b,
0xbf018b6b,0xbf0128b7,0xbf00c5ea,0xbf006303,0xbf000003,0xbeff39c4,0xbefe735d,0xbefdacc3,0xbefce5f7,0xbefc1eea,0xbefb57b9,0xbefa9056,0xbef9c8c0,0xbef900f9,0xbef838f2,0xbef770c8,
0xbef6a86c,0xbef5dfdf,0xbef51712,0xbef44e23,0xbef38503,0xbef2bbb3,0xbef1f232,0xbef12873,0xbef05e91,0xbeef9480,0xbeeeca3f,0xbeedffce,0xbeed351f,0xbeec6a4f,0xbeeb9f51,0xbeead423,
0xbeea08b8,0xbee93d2c,0xbee87172,0xbee7a589,0xbee6d973,0xbee60d1f,0xbee540ad,0xbee4740c,0xbee3a73e,0xbee2da34,0xbee20d0b,0xbee13fb5,0xbee07232,0xbedfa483,0xbeded698,0xbede088f,
0xbedd3a5a,0xbedc6bf8,0xbedb9d5d,0xbedacea3,0xbed9ffbe,0xbed930ae,0xbed86172,0xbed791fd,0xbed6c26b,0xbed5f2ae,0xbed522c6,0xbed452a6,0xbed38269,0xbed2b202,0xbed1e172,0xbed110b7,
0xbed03fc4,0xbecf6eb6,0xbece9d7f,0xbecdcc1e,0xbeccfa86,0xbecc28d3,0xbecb56f8,0xbeca84f4,0xbec9b2c7,0xbec8e064,0xbec80de7,0xbec73b42,0xbec66876,0xbec59573,0xbec4c258,0xbec3ef15,
0xbec31bab,0xbec2481a,0xbec17454,0xbec0a075,0xbebfcc71,0xbebef846,0xbebe23e6,0xbebd4f6e,0xbebc7ad2,0xbebba60f,0xbebad127,0xbeb9fc0b,0xbeb926d9,0xbeb85181,0xbeb77c05,0xbeb6a655,
0xbeb5d090,0xbeb4faa7,0xbeb42499,0xbeb34e68,0xbeb27803,0xbeb1a18a,0xbeb0caee,0xbeaff42e,0xbeaf1d4b,0xbeae4636,0xbead6f0d,0xbeac97c2,0xbeabc054,0xbeaae8b5,0xbeaa1103,0xbea9392f,
0xbea86139,0xbea78922,0xbea6b0da,0xbea5d880,0xbea50004,0xbea42768,0xbea34e9c,0xbea275be,0xbea19cc0,0xbea0c3a2,0xbe9fea64,0xbe9f10f6,0xbe9e3778,0xbe9d5ddb,0xbe9c841e,0xbe9baa32,
0xbe9ad037,0xbe99f61c,0xbe991be3,0xbe98418c,0xbe976707,0xbe968c72,0xbe95b1c0,0xbe94d6f0,0xbe93fbf3,0xbe9320e8,0xbe9245bf,0xbe916a79,0xbe908f16,0xbe8fb387,0xbe8ed7ea,0xbe8dfc31,
0xbe8d205c,0xbe8c445b,0xbe8b684d,0xbe8a8c24,0xbe89afdf,0xbe88d37e,0xbe87f6f3,0xbe871a5c,0xbe863daa,0xbe8560dd,0xbe8483e7,0xbe83a6e5,0xbe82c9c9,0xbe81ec93,0xbe810f42,0xbe8031c9,
0xbe7ea88b,0xbe7ced51,0xbe7b31e5,0xbe797627,0xbe77ba57,0xbe75fe56,0xbe744223,0xbe7285bf,0xbe70c90c,0xbe6f0c48,0xbe6d4f54,0xbe6b9231,0xbe69d4df,0xbe68173f,0xbe665990,0xbe649bb3,
0xbe62dda8,0xbe611f51,0xbe5f60ec,0xbe5da25a,0xbe5be39c,0xbe5a24b2,0xbe58657e,0xbe56a63d,0xbe54e6d2,0xbe53273c,0xbe51675d,0xbe4fa773,0xbe4de760,0xbe4c2723,0xbe4a66be,0xbe48a611,
0xbe46e55c,0xbe45247f,0xbe43637a,0xbe41a22f,0xbe3fe0dd,0xbe3e1f64,0xbe3c5dc6,0xbe3a9c01,0xbe38d9f9,0xbe3717ea,0xbe3555b7,0xbe339360,0xbe31d0c6,0xbe300e28,0xbe2e4b66,0xbe2c8882,
0xbe2ac57b,0xbe290233,0xbe273ee8,0xbe257b7c,0xbe23b7ef,0xbe21f422,0xbe203054,0xbe1e6c66,0xbe1ca858,0xbe1ae42b,0xbe191fc0,0xbe175b56,0xbe1596cd,0xbe13d227,0xbe120d43,0xbe104862,
0xbe0e8364,0xbe0cbe4a,0xbe0af913,0xbe0933a1,0xbe076e34,0xbe05a8ab,0xbe03e308,0xbe021d2a,0xbe005753,0xbdfd22c3,0xbdf996ae,0xbdf60a67,0xbdf27db0,0xbdeef107,0xbdeb642f,0xbde7d728,
0xbde449b3,0xbde0bc51,0xbddd2ec1,0xbdd9a105,0xbdd6131e,0xbdd284cc,0xbdcef690,0xbdcb682a,0xbdc7d99c,0xbdc44ae7,0xbdc0bbca,0xbdbd2cc6,0xbdb99d9d,0xbdb60e4f,0xbdb27e9c,0xbdaeef06,
0xbdab5f4c,0xbda7cf71,0xbda43f74,0xbda0af16,0xbd9d1ed9,0xbd998e7b,0xbd95fe00,0xbd926d26,0xbd8edc6f,0xbd8b4b9b,0xbd87baac,0xbd8429a2,0xbd80983d,0xbd7a0dfd,0xbd72eb4e,0xbd6bc86e,
0xbd64a4e0,0xbd5d81a4,0xbd565e3c,0xbd4f3aa9,0xbd4816ec,0xbd40f288,0xbd39ce7d,0xbd32aa4d,0xbd2b85f9,0xbd246103,0xbd1d3c6d,0xbd1617b6,0xbd0ef2e2,0xbd07cdf2,0xbd00a866,0xbcf30681,
0xbce4bc06,0xbcd6715d,0xbcc82589,0xbcb9da8d,0xbcab8f6c,0xbc9d4429,0xbc8ef8c6,0xbc80ac47,0xbc64c15d,0xbc4829fe,0xbc2b9277,0xbc0ef8cd,0xbbe4c20f,0xbbab9255,0xbb64c4f3,0xbae4ca1a,
0x343bbd2e,};



//caution:: 0.0 -> 1.0
static unsigned int g_acs[1000+2] = {
 0x3fc90fdb, 0x3fc8ef16, 0x3fc8ce51, 0x3fc8ad8d, 0x3fc88cc8, 0x3fc86c03, 0x3fc84b3f, 0x3fc82a7a, 0x3fc809b5, 0x3fc7e8f0,
 0x3fc7c82b, 0x3fc7a766, 0x3fc786a1, 0x3fc765dc, 0x3fc74516, 0x3fc72451, 0x3fc7038b, 0x3fc6e2c5, 0x3fc6c200, 0x3fc6a139,
 0x3fc68073, 0x3fc65fad, 0x3fc63ee6, 0x3fc61e20, 0x3fc5fd59, 0x3fc5dc92, 0x3fc5bbca, 0x3fc59b03, 0x3fc57a3b, 0x3fc55973,
 0x3fc538ab, 0x3fc517e2, 0x3fc4f719, 0x3fc4d650, 0x3fc4b587, 0x3fc494bd, 0x3fc473f3, 0x3fc45329, 0x3fc4325f, 0x3fc41194,
 0x3fc3f0c9, 0x3fc3cffd, 0x3fc3af31, 0x3fc38e65, 0x3fc36d99, 0x3fc34ccc, 0x3fc32bfe, 0x3fc30b31, 0x3fc2ea63, 0x3fc2c994,
 0x3fc2a8c5, 0x3fc287f6, 0x3fc26726, 0x3fc24656, 0x3fc22585, 0x3fc204b4, 0x3fc1e3e3, 0x3fc1c311, 0x3fc1a23e, 0x3fc1816b,
 0x3fc16098, 0x3fc13fc4, 0x3fc11eef, 0x3fc0fe1a, 0x3fc0dd45, 0x3fc0bc6e, 0x3fc09b98, 0x3fc07ac1, 0x3fc059e9, 0x3fc03910,
 0x3fc01837, 0x3fbff75e, 0x3fbfd684, 0x3fbfb5a9, 0x3fbf94ce, 0x3fbf73f2, 0x3fbf5315, 0x3fbf3238, 0x3fbf115a, 0x3fbef07b,
 0x3fbecf9c, 0x3fbeaebc, 0x3fbe8ddc, 0x3fbe6cfa, 0x3fbe4c18, 0x3fbe2b36, 0x3fbe0a52, 0x3fbde96e, 0x3fbdc889, 0x3fbda7a3,
 0x3fbd86bd, 0x3fbd65d6, 0x3fbd44ee, 0x3fbd2405, 0x3fbd031c, 0x3fbce231, 0x3fbcc146, 0x3fbca05a, 0x3fbc7f6d, 0x3fbc5e80,
 0x3fbc3d91, 0x3fbc1ca2, 0x3fbbfbb2, 0x3fbbdac1, 0x3fbbb9cf, 0x3fbb98dc, 0x3fbb77e9, 0x3fbb56f4, 0x3fbb35fe, 0x3fbb1508,
 0x3fbaf411, 0x3fbad318, 0x3fbab21f, 0x3fba9125, 0x3fba702a, 0x3fba4f2e, 0x3fba2e30, 0x3fba0d32, 0x3fb9ec33, 0x3fb9cb33,
 0x3fb9aa32, 0x3fb98930, 0x3fb9682d, 0x3fb94728, 0x3fb92623, 0x3fb9051d, 0x3fb8e415, 0x3fb8c30d, 0x3fb8a203, 0x3fb880f8,
 0x3fb85fec, 0x3fb83edf, 0x3fb81dd1, 0x3fb7fcc2, 0x3fb7dbb2, 0x3fb7baa0, 0x3fb7998d, 0x3fb7787a, 0x3fb75765, 0x3fb7364e,
 0x3fb71537, 0x3fb6f41e, 0x3fb6d304, 0x3fb6b1e9, 0x3fb690cd, 0x3fb66faf, 0x3fb64e91, 0x3fb62d70, 0x3fb60c4f, 0x3fb5eb2c,
 0x3fb5ca08, 0x3fb5a8e3, 0x3fb587bd, 0x3fb56695, 0x3fb5456b, 0x3fb52441, 0x3fb50315, 0x3fb4e1e8, 0x3fb4c0b9, 0x3fb49f89,
 0x3fb47e58, 0x3fb45d25, 0x3fb43bf1, 0x3fb41abb, 0x3fb3f984, 0x3fb3d84c, 0x3fb3b712, 0x3fb395d6, 0x3fb3749a, 0x3fb3535b,
 0x3fb3321c, 0x3fb310da, 0x3fb2ef97, 0x3fb2ce53, 0x3fb2ad0d, 0x3fb28bc6, 0x3fb26a7d, 0x3fb24933, 0x3fb227e7, 0x3fb20699,
 0x3fb1e54a, 0x3fb1c3fa, 0x3fb1a2a7, 0x3fb18153, 0x3fb15ffe, 0x3fb13ea7, 0x3fb11d4e, 0x3fb0fbf4, 0x3fb0da97, 0x3fb0b93a,
 0x3fb097da, 0x3fb07679, 0x3fb05516, 0x3fb033b2, 0x3fb0124c, 0x3faff0e4, 0x3fafcf7a, 0x3fafae0f, 0x3faf8ca2, 0x3faf6b33,
 0x3faf49c2, 0x3faf284f, 0x3faf06db, 0x3faee565, 0x3faec3ed, 0x3faea274, 0x3fae80f8, 0x3fae5f7b, 0x3fae3dfb, 0x3fae1c7a,
 0x3fadfaf7, 0x3fadd972, 0x3fadb7ec, 0x3fad9663, 0x3fad74d8, 0x3fad534c, 0x3fad31bd, 0x3fad102d, 0x3facee9b, 0x3faccd06,
 0x3facab70, 0x3fac89d8, 0x3fac683d, 0x3fac46a1, 0x3fac2503, 0x3fac0362, 0x3fabe1c0, 0x3fabc01c, 0x3fab9e75, 0x3fab7ccd,
 0x3fab5b22, 0x3fab3975, 0x3fab17c6, 0x3faaf615, 0x3faad462, 0x3faab2ad, 0x3faa90f6, 0x3faa6f3c, 0x3faa4d80, 0x3faa2bc3,
 0x3faa0a03, 0x3fa9e840, 0x3fa9c67c, 0x3fa9a4b5, 0x3fa982ec, 0x3fa96121, 0x3fa93f54, 0x3fa91d84, 0x3fa8fbb2, 0x3fa8d9de,
 0x3fa8b807, 0x3fa8962e, 0x3fa87453, 0x3fa85275, 0x3fa83096, 0x3fa80eb3, 0x3fa7eccf, 0x3fa7cae8, 0x3fa7a8fe, 0x3fa78713,
 0x3fa76524, 0x3fa74334, 0x3fa72141, 0x3fa6ff4b, 0x3fa6dd53, 0x3fa6bb59, 0x3fa6995c, 0x3fa6775d, 0x3fa6555b, 0x3fa63357,
 0x3fa61150, 0x3fa5ef46, 0x3fa5cd3a, 0x3fa5ab2c, 0x3fa5891b, 0x3fa56707, 0x3fa544f1, 0x3fa522d8, 0x3fa500bc, 0x3fa4de9e,
 0x3fa4bc7d, 0x3fa49a5a, 0x3fa47834, 0x3fa4560b, 0x3fa433df, 0x3fa411b1, 0x3fa3ef80, 0x3fa3cd4c, 0x3fa3ab16, 0x3fa388dd,
 0x3fa366a1, 0x3fa34462, 0x3fa32221, 0x3fa2ffdd, 0x3fa2dd96, 0x3fa2bb4c, 0x3fa298ff, 0x3fa276af, 0x3fa2545d, 0x3fa23208,
 0x3fa20faf, 0x3fa1ed54, 0x3fa1caf6, 0x3fa1a895, 0x3fa18631, 0x3fa163cb, 0x3fa14161, 0x3fa11ef4, 0x3fa0fc84, 0x3fa0da12,
 0x3fa0b79c, 0x3fa09523, 0x3fa072a7, 0x3fa05028, 0x3fa02da6, 0x3fa00b21, 0x3f9fe899, 0x3f9fc60e, 0x3f9fa380, 0x3f9f80ee,
 0x3f9f5e5a, 0x3f9f3bc2, 0x3f9f1927, 0x3f9ef689, 0x3f9ed3e8, 0x3f9eb143, 0x3f9e8e9b, 0x3f9e6bf0, 0x3f9e4942, 0x3f9e2691,
 0x3f9e03dc, 0x3f9de124, 0x3f9dbe68, 0x3f9d9baa, 0x3f9d78e8, 0x3f9d5622, 0x3f9d335a, 0x3f9d108d, 0x3f9cedbe, 0x3f9ccaeb,
 0x3f9ca815, 0x3f9c853b, 0x3f9c625e, 0x3f9c3f7d, 0x3f9c1c99, 0x3f9bf9b2, 0x3f9bd6c6, 0x3f9bb3d8, 0x3f9b90e6, 0x3f9b6df0,
 0x3f9b4af7, 0x3f9b27fa, 0x3f9b04fa, 0x3f9ae1f6, 0x3f9abeee, 0x3f9a9be3, 0x3f9a78d4, 0x3f9a55c1, 0x3f9a32ab, 0x3f9a0f91,
 0x3f99ec74, 0x3f99c952, 0x3f99a62d, 0x3f998304, 0x3f995fd8, 0x3f993ca8, 0x3f991973, 0x3f98f63b, 0x3f98d300, 0x3f98afc0,
 0x3f988c7d, 0x3f986935, 0x3f9845ea, 0x3f98229b, 0x3f97ff48, 0x3f97dbf1, 0x3f97b896, 0x3f979537, 0x3f9771d4, 0x3f974e6d,
 0x3f972b02, 0x3f970793, 0x3f96e420, 0x3f96c0a9, 0x3f969d2e, 0x3f9679af, 0x3f96562c, 0x3f9632a4, 0x3f960f19, 0x3f95eb89,
 0x3f95c7f5, 0x3f95a45d, 0x3f9580c1, 0x3f955d20, 0x3f95397c, 0x3f9515d3, 0x3f94f225, 0x3f94ce74, 0x3f94aabe, 0x3f948704,
 0x3f946345, 0x3f943f82, 0x3f941bbb, 0x3f93f7ef, 0x3f93d41f, 0x3f93b04b, 0x3f938c72, 0x3f936894, 0x3f9344b2, 0x3f9320cc,
 0x3f92fce1, 0x3f92d8f2, 0x3f92b4fe, 0x3f929105, 0x3f926d08, 0x3f924906, 0x3f922500, 0x3f9200f5, 0x3f91dce5, 0x3f91b8d1,
 0x3f9194b8, 0x3f91709a, 0x3f914c78, 0x3f912850, 0x3f910424, 0x3f90dff3, 0x3f90bbbe, 0x3f909783, 0x3f907344, 0x3f904f00,
 0x3f902ab7, 0x3f900669, 0x3f8fe216, 0x3f8fbdbe, 0x3f8f9962, 0x3f8f7500, 0x3f8f5099, 0x3f8f2c2d, 0x3f8f07bd, 0x3f8ee347,
 0x3f8ebecc, 0x3f8e9a4c, 0x3f8e75c7, 0x3f8e513d, 0x3f8e2cad, 0x3f8e0819, 0x3f8de37f, 0x3f8dbee0, 0x3f8d9a3b, 0x3f8d7592,
 0x3f8d50e3, 0x3f8d2c2f, 0x3f8d0776, 0x3f8ce2b7, 0x3f8cbdf3, 0x3f8c9929, 0x3f8c745a, 0x3f8c4f86, 0x3f8c2aac, 0x3f8c05cd,
 0x3f8be0e8, 0x3f8bbbfe, 0x3f8b970e, 0x3f8b7219, 0x3f8b4d1e, 0x3f8b281d, 0x3f8b0317, 0x3f8ade0c, 0x3f8ab8fa, 0x3f8a93e3,
 0x3f8a6ec6, 0x3f8a49a4, 0x3f8a247b, 0x3f89ff4d, 0x3f89da19, 0x3f89b4df, 0x3f898fa0, 0x3f896a5a, 0x3f89450f, 0x3f891fbe,
 0x3f88fa67, 0x3f88d509, 0x3f88afa6, 0x3f888a3d, 0x3f8864ce, 0x3f883f59, 0x3f8819dd, 0x3f87f45c, 0x3f87ced4, 0x3f87a946,
 0x3f8783b2, 0x3f875e18, 0x3f873878, 0x3f8712d1, 0x3f86ed24, 0x3f86c771, 0x3f86a1b8, 0x3f867bf8, 0x3f865632, 0x3f863065,
 0x3f860a92, 0x3f85e4b8, 0x3f85bed8, 0x3f8598f2, 0x3f857304, 0x3f854d11, 0x3f852717, 0x3f850116, 0x3f84db0e, 0x3f84b500,
 0x3f848eeb, 0x3f8468d0, 0x3f8442ad, 0x3f841c84, 0x3f83f654, 0x3f83d01e, 0x3f83a9e0, 0x3f83839b, 0x3f835d50, 0x3f8336fe,
 0x3f8310a4, 0x3f82ea44, 0x3f82c3dd, 0x3f829d6e, 0x3f8276f9, 0x3f82507c, 0x3f8229f8, 0x3f82036e, 0x3f81dcdb, 0x3f81b642,
 0x3f818fa1, 0x3f8168fa, 0x3f81424a, 0x3f811b94, 0x3f80f4d6, 0x3f80ce10, 0x3f80a744, 0x3f80806f, 0x3f805994, 0x3f8032b0,
 0x3f800bc5, 0x3f7fc9a6, 0x3f7f7bb1, 0x3f7f2dae, 0x3f7edf9b, 0x3f7e9179, 0x3f7e4347, 0x3f7df505, 0x3f7da6b4, 0x3f7d5853,
 0x3f7d09e3, 0x3f7cbb62, 0x3f7c6cd2, 0x3f7c1e32, 0x3f7bcf81, 0x3f7b80c1, 0x3f7b31f0, 0x3f7ae30f, 0x3f7a941e, 0x3f7a451c,
 0x3f79f60a, 0x3f79a6e8, 0x3f7957b5, 0x3f790871, 0x3f78b91c, 0x3f7869b7, 0x3f781a41, 0x3f77cab9, 0x3f777b21, 0x3f772b78,
 0x3f76dbbe, 0x3f768bf2, 0x3f763c15, 0x3f75ec26, 0x3f759c27, 0x3f754c15, 0x3f74fbf2, 0x3f74abbd, 0x3f745b77, 0x3f740b1f,
 0x3f73bab4, 0x3f736a38, 0x3f7319aa, 0x3f72c909, 0x3f727857, 0x3f722792, 0x3f71d6ba, 0x3f7185d0, 0x3f7134d4, 0x3f70e3c5,
 0x3f7092a3, 0x3f70416e, 0x3f6ff027, 0x3f6f9ecc, 0x3f6f4d5f, 0x3f6efbde, 0x3f6eaa4a, 0x3f6e58a3, 0x3f6e06e8, 0x3f6db51a,
 0x3f6d6338, 0x3f6d1143, 0x3f6cbf3a, 0x3f6c6d1d, 0x3f6c1aec, 0x3f6bc8a7, 0x3f6b764e, 0x3f6b23e1, 0x3f6ad15f, 0x3f6a7ec9,
 0x3f6a2c1f, 0x3f69d960, 0x3f69868d, 0x3f6933a4, 0x3f68e0a7, 0x3f688d95, 0x3f683a6e, 0x3f67e731, 0x3f6793e0, 0x3f674079,
 0x3f66ecfc, 0x3f66996b, 0x3f6645c3, 0x3f65f206, 0x3f659e33, 0x3f654a4a, 0x3f64f64b, 0x3f64a235, 0x3f644e0a, 0x3f63f9c8,
 0x3f63a570, 0x3f635101, 0x3f62fc7b, 0x3f62a7df, 0x3f62532c, 0x3f61fe62, 0x3f61a980, 0x3f615488, 0x3f60ff78, 0x3f60aa51,
 0x3f605512, 0x3f5fffbb, 0x3f5faa4d, 0x3f5f54c7, 0x3f5eff29, 0x3f5ea972, 0x3f5e53a4, 0x3f5dfdbd, 0x3f5da7bd, 0x3f5d51a5,
 0x3f5cfb74, 0x3f5ca52b, 0x3f5c4ec8, 0x3f5bf84c, 0x3f5ba1b7, 0x3f5b4b09, 0x3f5af441, 0x3f5a9d60, 0x3f5a4665, 0x3f59ef50,
 0x3f599821, 0x3f5940d8, 0x3f58e975, 0x3f5891f7, 0x3f583a5f, 0x3f57e2ac, 0x3f578adf, 0x3f5732f6, 0x3f56daf3, 0x3f5682d4,
 0x3f562a9a, 0x3f55d244, 0x3f5579d3, 0x3f552146, 0x3f54c89d, 0x3f546fd8, 0x3f5416f7, 0x3f53bdfa, 0x3f5364e0, 0x3f530ba9,
 0x3f52b256, 0x3f5258e6, 0x3f51ff58, 0x3f51a5ae, 0x3f514be6, 0x3f50f200, 0x3f5097fd, 0x3f503ddb, 0x3f4fe39c, 0x3f4f893f,
 0x3f4f2ec3, 0x3f4ed429, 0x3f4e7970, 0x3f4e1e98, 0x3f4dc3a1, 0x3f4d688b, 0x3f4d0d55, 0x3f4cb200, 0x3f4c568b, 0x3f4bfaf7,
 0x3f4b9f42, 0x3f4b436d, 0x3f4ae778, 0x3f4a8b62, 0x3f4a2f2b, 0x3f49d2d3, 0x3f49765a, 0x3f4919c0, 0x3f48bd04, 0x3f486027,
 0x3f480327, 0x3f47a606, 0x3f4748c2, 0x3f46eb5c, 0x3f468dd3, 0x3f463027, 0x3f45d258, 0x3f457465, 0x3f45164f, 0x3f44b816,
 0x3f4459b8, 0x3f43fb36, 0x3f439c90, 0x3f433dc6, 0x3f42ded6, 0x3f427fc2, 0x3f422088, 0x3f41c129, 0x3f4161a5, 0x3f4101fa,
 0x3f40a229, 0x3f404232, 0x3f3fe214, 0x3f3f81d0, 0x3f3f2164, 0x3f3ec0d1, 0x3f3e6016, 0x3f3dff34, 0x3f3d9e2a, 0x3f3d3cf7,
 0x3f3cdb9c, 0x3f3c7a18, 0x3f3c186b, 0x3f3bb694, 0x3f3b5494, 0x3f3af26b, 0x3f3a9017, 0x3f3a2d98, 0x3f39caf0, 0x3f39681c,
 0x3f39051d, 0x3f38a1f2, 0x3f383e9c, 0x3f37db19, 0x3f37776b, 0x3f37138f, 0x3f36af87, 0x3f364b52, 0x3f35e6ee, 0x3f35825e,
 0x3f351d9f, 0x3f34b8b1, 0x3f345395, 0x3f33ee4a, 0x3f3388cf, 0x3f332325, 0x3f32bd4a, 0x3f32573f, 0x3f31f104, 0x3f318a97,
 0x3f3123f9, 0x3f30bd2a, 0x3f305628, 0x3f2feef4, 0x3f2f878d, 0x3f2f1ff3, 0x3f2eb825, 0x3f2e5023, 0x3f2de7ee, 0x3f2d7f83,
 0x3f2d16e4, 0x3f2cae0f, 0x3f2c4504, 0x3f2bdbc3, 0x3f2b724c, 0x3f2b089d, 0x3f2a9eb8, 0x3f2a349a, 0x3f29ca44, 0x3f295fb6,
 0x3f28f4ee, 0x3f2889ed, 0x3f281eb2, 0x3f27b33c, 0x3f27478c, 0x3f26dba1, 0x3f266f79, 0x3f260316, 0x3f259676, 0x3f252998,
 0x3f24bc7d, 0x3f244f24, 0x3f23e18c, 0x3f2373b5, 0x3f23059f, 0x3f229748, 0x3f2228b0, 0x3f21b9d8, 0x3f214abd, 0x3f20db61,
 0x3f206bc1, 0x3f1ffbde, 0x3f1f8bb8, 0x3f1f1b4c, 0x3f1eaa9c, 0x3f1e39a6, 0x3f1dc869, 0x3f1d56e6, 0x3f1ce51b, 0x3f1c7309,
 0x3f1c00ad, 0x3f1b8e08, 0x3f1b1b19, 0x3f1aa7df, 0x3f1a345a, 0x3f19c089, 0x3f194c6c, 0x3f18d801, 0x3f186348, 0x3f17ee40,
 0x3f1778e8, 0x3f170340, 0x3f168d48, 0x3f1616fd, 0x3f15a060, 0x3f152970, 0x3f14b22c, 0x3f143a93, 0x3f13c2a4, 0x3f134a5e,
 0x3f12d1c1, 0x3f1258cc, 0x3f11df7e, 0x3f1165d6, 0x3f10ebd3, 0x3f107174, 0x3f0ff6b9, 0x3f0f7b9f, 0x3f0f0028, 0x3f0e8450,
 0x3f0e0819, 0x3f0d8b7f, 0x3f0d0e83, 0x3f0c9124, 0x3f0c135f, 0x3f0b9535, 0x3f0b16a4, 0x3f0a97ac, 0x3f0a184a, 0x3f09987e,
 0x3f091846, 0x3f0897a2, 0x3f081690, 0x3f079510, 0x3f07131e, 0x3f0690bc, 0x3f060de6, 0x3f058a9c, 0x3f0506dd, 0x3f0482a7,
 0x3f03fdf8, 0x3f0378d0, 0x3f02f32c, 0x3f026d0c, 0x3f01e66d, 0x3f015f4e, 0x3f00d7af, 0x3f004f8c, 0x3eff8dc9, 0x3efe7b6d,
 0x3efd6801, 0x3efc5382, 0x3efb3dec, 0x3efa273b, 0x3ef90f6b, 0x3ef7f679, 0x3ef6dc61, 0x3ef5c11e, 0x3ef4a4ae, 0x3ef3870b,
 0x3ef26831, 0x3ef1481c, 0x3ef026c7, 0x3eef042f, 0x3eede04e, 0x3eecbb1f, 0x3eeb949e, 0x3eea6cc6, 0x3ee94391, 0x3ee818fa,
 0x3ee6ecfc, 0x3ee5bf92, 0x3ee490b5, 0x3ee36061, 0x3ee22e8e, 0x3ee0fb37, 0x3edfc655, 0x3ede8fe3, 0x3edd57d9, 0x3edc1e31,
 0x3edae2e3, 0x3ed9a5e9, 0x3ed8673c, 0x3ed726d3, 0x3ed5e4a6, 0x3ed4a0af, 0x3ed35ae3, 0x3ed2133c, 0x3ed0c9b0, 0x3ecf7e36,
 0x3ece30c5, 0x3ecce153, 0x3ecb8fd7, 0x3eca3c45, 0x3ec8e694, 0x3ec78eb8, 0x3ec634a6, 0x3ec4d853, 0x3ec379b3, 0x3ec218b8,
 0x3ec0b556, 0x3ebf4f80, 0x3ebde727, 0x3ebc7c3e, 0x3ebb0eb4, 0x3eb99e7c, 0x3eb82b84, 0x3eb6b5bc, 0x3eb53d12, 0x3eb3c175,
 0x3eb242d1, 0x3eb0c113, 0x3eaf3c26, 0x3eadb3f4, 0x3eac2868, 0x3eaa996b, 0x3ea906e2, 0x3ea770b6, 0x3ea5d6cb, 0x3ea43906,
 0x3ea29748, 0x3ea0f173, 0x3e9f4766, 0x3e9d98ff, 0x3e9be61b, 0x3e9a2e92, 0x3e98723d, 0x3e96b0f1, 0x3e94ea82, 0x3e931ebf,
 0x3e914d76, 0x3e8f7672, 0x3e8d9979, 0x3e8bb64d, 0x3e89ccaf, 0x3e87dc58, 0x3e85e4fc, 0x3e83e64d, 0x3e81dff3, 0x3e7fa324,
 0x3e7b7587, 0x3e773636, 0x3e72e442, 0x3e6e7eaa, 0x3e6a0450, 0x3e6573fe, 0x3e60cc5d, 0x3e5c0bf3, 0x3e57311a, 0x3e5239ff,
 0x3e4d2494, 0x3e47ee88, 0x3e42953d, 0x3e3d15b5, 0x3e376c7f, 0x3e31959f, 0x3e2b8c6b, 0x3e254b60, 0x3e1ecbe5, 0x3e1805f8,
 0x3e10efb9, 0x3e097cbd, 0x3e019d08, 0x3df276d6, 0x3de075a1, 0x3dcce2ac, 0x3db73d64, 0x3d9ead55, 0x3d818c6a, 0x3d3731a7,
 0x00000000,};

//caution:: 0.0 -> 1.0
static unsigned int g_asn[1000+2] = {
 0x00000000, 0x3a831270, 0x3b031274, 0x3b449bb9, 0x3b831285, 0x3ba3d737, 0x3bc49bf3, 0x3be560bc, 0x3c0312ca, 0x3c13753f,
 0x3c23d7bd, 0x3c343a46, 0x3c449cdb, 0x3c54ff7d, 0x3c65622d, 0x3c75c4eb, 0x3c8313dd, 0x3c8b454d, 0x3c9376c6, 0x3c9ba849,
 0x3ca3d9d6, 0x3cac0b6e, 0x3cb43d11, 0x3cbc6ec0, 0x3cc4a07b, 0x3cccd243, 0x3cd50419, 0x3cdd35fc, 0x3ce567ee, 0x3ced99f0,
 0x3cf5cc00, 0x3cfdfe21, 0x3d031829, 0x3d07314b, 0x3d0b4a75, 0x3d0f63a8, 0x3d137ce5, 0x3d17962b, 0x3d1baf7c, 0x3d1fc8d6,
 0x3d23e23c, 0x3d27fbac, 0x3d2c1526, 0x3d302ead, 0x3d34483e, 0x3d3861dc, 0x3d3c7b86, 0x3d40953c, 0x3d44aeff, 0x3d48c8cf,
 0x3d4ce2ac, 0x3d50fc96, 0x3d55168e, 0x3d593094, 0x3d5d4aa9, 0x3d6164cc, 0x3d657efe, 0x3d69993f, 0x3d6db38f, 0x3d71cdef,
 0x3d75e85f, 0x3d7a02df, 0x3d7e1d6f, 0x3d811c08, 0x3d832961, 0x3d8536c3, 0x3d87442e, 0x3d8951a1, 0x3d8b5f1e, 0x3d8d6ca4,
 0x3d8f7a33, 0x3d9187cb, 0x3d93956d, 0x3d95a319, 0x3d97b0cf, 0x3d99be8f, 0x3d9bcc59, 0x3d9dda2d, 0x3d9fe80c, 0x3da1f5f5,
 0x3da403e9, 0x3da611e7, 0x3da81ff1, 0x3daa2e06, 0x3dac3c26, 0x3dae4a51, 0x3db05889, 0x3db266cb, 0x3db4751a, 0x3db68374,
 0x3db891db, 0x3dbaa04d, 0x3dbcaecd, 0x3dbebd58, 0x3dc0cbf1, 0x3dc2da96, 0x3dc4e948, 0x3dc6f807, 0x3dc906d3, 0x3dcb15ad,
 0x3dcd2494, 0x3dcf3388, 0x3dd1428b, 0x3dd3519b, 0x3dd560ba, 0x3dd76fe6, 0x3dd97f21, 0x3ddb8e6b, 0x3ddd9dc3, 0x3ddfad2a,
 0x3de1bc9f, 0x3de3cc24, 0x3de5dbb8, 0x3de7eb5b, 0x3de9fb0e, 0x3dec0ad0, 0x3dee1aa2, 0x3df02a84, 0x3df23a76, 0x3df44a78,
 0x3df65a8b, 0x3df86aae, 0x3dfa7ae1, 0x3dfc8b25, 0x3dfe9b7b, 0x3e0055f0, 0x3e015e2c, 0x3e026670, 0x3e036ebd, 0x3e047713,
 0x3e057f72, 0x3e0687da, 0x3e07904b, 0x3e0898c4, 0x3e09a147, 0x3e0aa9d4, 0x3e0bb269, 0x3e0cbb08, 0x3e0dc3b1, 0x3e0ecc62,
 0x3e0fd51e, 0x3e10dde3, 0x3e11e6b2, 0x3e12ef8b, 0x3e13f86e, 0x3e15015a, 0x3e160a51, 0x3e171352, 0x3e181c5d, 0x3e192572,
 0x3e1a2e92, 0x3e1b37bc, 0x3e1c40f0, 0x3e1d4a2f, 0x3e1e5379, 0x3e1f5cce, 0x3e20662d, 0x3e216f97, 0x3e22790c, 0x3e23828c,
 0x3e248c17, 0x3e2595ad, 0x3e269f4f, 0x3e27a8fc, 0x3e28b2b4, 0x3e29bc78, 0x3e2ac647, 0x3e2bd022, 0x3e2cda09, 0x3e2de3fb,
 0x3e2eedf9, 0x3e2ff803, 0x3e310219, 0x3e320c3b, 0x3e33166a, 0x3e3420a4, 0x3e352aeb, 0x3e36353e, 0x3e373f9e, 0x3e384a0a,
 0x3e395483, 0x3e3a5f09, 0x3e3b699b, 0x3e3c743a, 0x3e3d7ee6, 0x3e3e899f, 0x3e3f9465, 0x3e409f39, 0x3e41aa19, 0x3e42b507,
 0x3e43c002, 0x3e44cb0b, 0x3e45d622, 0x3e46e145, 0x3e47ec77, 0x3e48f7b7, 0x3e4a0304, 0x3e4b0e5f, 0x3e4c19c8, 0x3e4d2540,
 0x3e4e30c5, 0x3e4f3c59, 0x3e5047fb, 0x3e5153ac, 0x3e525f6b, 0x3e536b39, 0x3e547715, 0x3e558300, 0x3e568efa, 0x3e579b03,
 0x3e58a71b, 0x3e59b342, 0x3e5abf78, 0x3e5bcbbe, 0x3e5cd812, 0x3e5de477, 0x3e5ef0ea, 0x3e5ffd6d, 0x3e610a00, 0x3e6216a3,
 0x3e632355, 0x3e643017, 0x3e653cea, 0x3e6649cc, 0x3e6756bf, 0x3e6863c1, 0x3e6970d4, 0x3e6a7df8, 0x3e6b8b2c, 0x3e6c9870,
 0x3e6da5c6, 0x3e6eb32c, 0x3e6fc0a2, 0x3e70ce2a, 0x3e71dbc3, 0x3e72e96d, 0x3e73f728, 0x3e7504f4, 0x3e7612d1, 0x3e7720c0,
 0x3e782ec1, 0x3e793cd3, 0x3e7a4af7, 0x3e7b592c, 0x3e7c6774, 0x3e7d75cd, 0x3e7e8439, 0x3e7f92b6, 0x3e8050a3, 0x3e80d7f4,
 0x3e815f4e, 0x3e81e6b2, 0x3e826e1f, 0x3e82f595, 0x3e837d14, 0x3e84049d, 0x3e848c30, 0x3e8513cb, 0x3e859b71, 0x3e862320,
 0x3e86aad9, 0x3e87329b, 0x3e87ba67, 0x3e88423d, 0x3e88ca1d, 0x3e895206, 0x3e89d9fa, 0x3e8a61f7, 0x3e8ae9ff, 0x3e8b7210,
 0x3e8bfa2c, 0x3e8c8252, 0x3e8d0a82, 0x3e8d92bc, 0x3e8e1b00, 0x3e8ea34f, 0x3e8f2ba8, 0x3e8fb40c, 0x3e903c7a, 0x3e90c4f3,
 0x3e914d76, 0x3e91d604, 0x3e925e9d, 0x3e92e740, 0x3e936fee, 0x3e93f8a7, 0x3e94816a, 0x3e950a39, 0x3e959312, 0x3e961bf7,
 0x3e96a4e6, 0x3e972de1, 0x3e97b6e7, 0x3e983ff8, 0x3e98c914, 0x3e99523c, 0x3e99db6f, 0x3e9a64ad, 0x3e9aedf7, 0x3e9b774c,
 0x3e9c00ad, 0x3e9c8a19, 0x3e9d1391, 0x3e9d9d15, 0x3e9e26a5, 0x3e9eb040, 0x3e9f39e7, 0x3e9fc39a, 0x3ea04d59, 0x3ea0d724,
 0x3ea160fb, 0x3ea1eade, 0x3ea274ce, 0x3ea2fec9, 0x3ea388d1, 0x3ea412e5, 0x3ea49d05, 0x3ea52732, 0x3ea5b16c, 0x3ea63bb2,
 0x3ea6c604, 0x3ea75063, 0x3ea7dacf, 0x3ea86547, 0x3ea8efcc, 0x3ea97a5f, 0x3eaa04fe, 0x3eaa8fa9, 0x3eab1a62, 0x3eaba528,
 0x3eac2ffb, 0x3eacbadc, 0x3ead45c9, 0x3eadd0c4, 0x3eae5bcc, 0x3eaee6e1, 0x3eaf7204, 0x3eaffd35, 0x3eb08873, 0x3eb113be,
 0x3eb19f17, 0x3eb22a7e, 0x3eb2b5f3, 0x3eb34176, 0x3eb3cd06, 0x3eb458a4, 0x3eb4e451, 0x3eb5700b, 0x3eb5fbd4, 0x3eb687aa,
 0x3eb7138f, 0x3eb79f82, 0x3eb82b84, 0x3eb8b794, 0x3eb943b2, 0x3eb9cfdf, 0x3eba5c1b, 0x3ebae865, 0x3ebb74be, 0x3ebc0126,
 0x3ebc8d9c, 0x3ebd1a21, 0x3ebda6b6, 0x3ebe3359, 0x3ebec00b, 0x3ebf4ccc, 0x3ebfd99d, 0x3ec0667d, 0x3ec0f36c, 0x3ec1806b,
 0x3ec20d78, 0x3ec29a96, 0x3ec327c3, 0x3ec3b4ff, 0x3ec4424b, 0x3ec4cfa7, 0x3ec55d13, 0x3ec5ea8f, 0x3ec6781a, 0x3ec705b6,
 0x3ec79361, 0x3ec8211d, 0x3ec8aee9, 0x3ec93cc5, 0x3ec9cab1, 0x3eca58ae, 0x3ecae6bb, 0x3ecb74d9, 0x3ecc0307, 0x3ecc9146,
 0x3ecd1f96, 0x3ecdadf6, 0x3ece3c67, 0x3ececae9, 0x3ecf597c, 0x3ecfe820, 0x3ed076d5, 0x3ed1059c, 0x3ed19473, 0x3ed2235c,
 0x3ed2b256, 0x3ed34162, 0x3ed3d07f, 0x3ed45fad, 0x3ed4eeee, 0x3ed57e40, 0x3ed60da4, 0x3ed69d19, 0x3ed72ca1, 0x3ed7bc3a,
 0x3ed84be6, 0x3ed8dba4, 0x3ed96b74, 0x3ed9fb56, 0x3eda8b4b, 0x3edb1b52, 0x3edbab6b, 0x3edc3b97, 0x3edccbd6, 0x3edd5c27,
 0x3eddec8c, 0x3ede7d03, 0x3edf0d8d, 0x3edf9e29, 0x3ee02eda, 0x3ee0bf9d, 0x3ee15073, 0x3ee1e15d, 0x3ee2725a, 0x3ee3036b,
 0x3ee3948f, 0x3ee425c6, 0x3ee4b712, 0x3ee54871, 0x3ee5d9e4, 0x3ee66b6b, 0x3ee6fd06, 0x3ee78eb5, 0x3ee82078, 0x3ee8b24f,
 0x3ee9443b, 0x3ee9d63b, 0x3eea684f, 0x3eeafa78, 0x3eeb8cb6, 0x3eec1f08, 0x3eecb170, 0x3eed43ec, 0x3eedd67d, 0x3eee6923,
 0x3eeefbde, 0x3eef8eae, 0x3ef02194, 0x3ef0b48f, 0x3ef1479f, 0x3ef1dac5, 0x3ef26e01, 0x3ef30152, 0x3ef394b9, 0x3ef42836,
 0x3ef4bbc9, 0x3ef54f72, 0x3ef5e332, 0x3ef67707, 0x3ef70af3, 0x3ef79ef5, 0x3ef8330d, 0x3ef8c73c, 0x3ef95b82, 0x3ef9efdf,
 0x3efa8452, 0x3efb18dc, 0x3efbad7e, 0x3efc4236, 0x3efcd706, 0x3efd6bed, 0x3efe00eb, 0x3efe9601, 0x3eff2b2f, 0x3effc074,
 0x3f002ae8, 0x3f0075a3, 0x3f00c069, 0x3f010b3b, 0x3f01561a, 0x3f01a104, 0x3f01ebfb, 0x3f0236fe, 0x3f02820d, 0x3f02cd29,
 0x3f031850, 0x3f036385, 0x3f03aec5, 0x3f03fa13, 0x3f04456c, 0x3f0490d3, 0x3f04dc46, 0x3f0527c6, 0x3f057352, 0x3f05beec,
 0x3f060a92, 0x3f065645, 0x3f06a205, 0x3f06edd2, 0x3f0739ac, 0x3f078594, 0x3f07d188, 0x3f081d8a, 0x3f086999, 0x3f08b5b5,
 0x3f0901df, 0x3f094e16, 0x3f099a5b, 0x3f09e6ad, 0x3f0a330d, 0x3f0a7f7a, 0x3f0acbf5, 0x3f0b187e, 0x3f0b6515, 0x3f0bb1ba,
 0x3f0bfe6d, 0x3f0c4b2d, 0x3f0c97fc, 0x3f0ce4d9, 0x3f0d31c4, 0x3f0d7ebd, 0x3f0dcbc4, 0x3f0e18da, 0x3f0e65fe, 0x3f0eb331,
 0x3f0f0072, 0x3f0f4dc2, 0x3f0f9b21, 0x3f0fe88e, 0x3f10360a, 0x3f108394, 0x3f10d12e, 0x3f111ed7, 0x3f116c8e, 0x3f11ba55,
 0x3f12082b, 0x3f125610, 0x3f12a404, 0x3f12f207, 0x3f13401a, 0x3f138e3d, 0x3f13dc6f, 0x3f142ab0, 0x3f147901, 0x3f14c762,
 0x3f1515d3, 0x3f156453, 0x3f15b2e3, 0x3f160184, 0x3f165034, 0x3f169ef5, 0x3f16edc5, 0x3f173ca6, 0x3f178b97, 0x3f17da99,
 0x3f1829ab, 0x3f1878ce, 0x3f18c801, 0x3f191744, 0x3f196699, 0x3f19b5fe, 0x3f1a0575, 0x3f1a54fc, 0x3f1aa494, 0x3f1af43d,
 0x3f1b43f8, 0x3f1b93c3, 0x3f1be3a0, 0x3f1c338f, 0x3f1c838f, 0x3f1cd3a0, 0x3f1d23c3, 0x3f1d73f8, 0x3f1dc43e, 0x3f1e1497,
 0x3f1e6501, 0x3f1eb57d, 0x3f1f060b, 0x3f1f56ac, 0x3f1fa75f, 0x3f1ff824, 0x3f2048fb, 0x3f2099e5, 0x3f20eae2, 0x3f213bf1,
 0x3f218d12, 0x3f21de47, 0x3f222f8f, 0x3f2280e9, 0x3f22d257, 0x3f2323d7, 0x3f23756b, 0x3f23c713, 0x3f2418cd, 0x3f246a9b,
 0x3f24bc7d, 0x3f250e72, 0x3f25607c, 0x3f25b299, 0x3f2604c9, 0x3f26570e, 0x3f26a967, 0x3f26fbd5, 0x3f274e56, 0x3f27a0ec,
 0x3f27f396, 0x3f284655, 0x3f289929, 0x3f28ec11, 0x3f293f0e, 0x3f299220, 0x3f29e548, 0x3f2a3884, 0x3f2a8bd6, 0x3f2adf3c,
 0x3f2b32b9, 0x3f2b864b, 0x3f2bd9f2, 0x3f2c2daf, 0x3f2c8183, 0x3f2cd56c, 0x3f2d296b, 0x3f2d7d80, 0x3f2dd1ab, 0x3f2e25ed,
 0x3f2e7a45, 0x3f2eceb4, 0x3f2f233a, 0x3f2f77d6, 0x3f2fcc89, 0x3f302154, 0x3f307635, 0x3f30cb2d, 0x3f31203d, 0x3f317565,
 0x3f31caa3, 0x3f321ffa, 0x3f327568, 0x3f32caee, 0x3f33208d, 0x3f337643, 0x3f33cc12, 0x3f3421f9, 0x3f3477f8, 0x3f34ce10,
 0x3f352441, 0x3f357a8b, 0x3f35d0ed, 0x3f362769, 0x3f367dfe, 0x3f36d4ac, 0x3f372b74, 0x3f378255, 0x3f37d950, 0x3f383065,
 0x3f388794, 0x3f38dedd, 0x3f393640, 0x3f398dbe, 0x3f39e556, 0x3f3a3d09, 0x3f3a94d7, 0x3f3aecbf, 0x3f3b44c3, 0x3f3b9ce1,
 0x3f3bf51b, 0x3f3c4d71, 0x3f3ca5e2, 0x3f3cfe6f, 0x3f3d5718, 0x3f3dafdd, 0x3f3e08be, 0x3f3e61bb, 0x3f3ebad5, 0x3f3f140c,
 0x3f3f6d5f, 0x3f3fc6d0, 0x3f40205d, 0x3f407a08, 0x3f40d3d0, 0x3f412db5, 0x3f4187b9, 0x3f41e1da, 0x3f423c19, 0x3f429677,
 0x3f42f0f2, 0x3f434b8d, 0x3f43a646, 0x3f44011e, 0x3f445c15, 0x3f44b72b, 0x3f451260, 0x3f456db5, 0x3f45c92a, 0x3f4624bf,
 0x3f468073, 0x3f46dc48, 0x3f47383e, 0x3f479454, 0x3f47f08a, 0x3f484ce2, 0x3f48a95b, 0x3f4905f5, 0x3f4962b1, 0x3f49bf8f,
 0x3f4a1c8e, 0x3f4a79b0, 0x3f4ad6f3, 0x3f4b345a, 0x3f4b91e3, 0x3f4bef8f, 0x3f4c4d5e, 0x3f4cab50, 0x3f4d0966, 0x3f4d67a0,
 0x3f4dc5fd, 0x3f4e247f, 0x3f4e8325, 0x3f4ee1ef, 0x3f4f40df, 0x3f4f9ff3, 0x3f4fff2d, 0x3f505e8c, 0x3f50be11, 0x3f511dbb,
 0x3f517d8c, 0x3f51dd83, 0x3f523da1, 0x3f529de6, 0x3f52fe51, 0x3f535ee4, 0x3f53bf9f, 0x3f542081, 0x3f54818b, 0x3f54e2be,
 0x3f554419, 0x3f55a59d, 0x3f56074a, 0x3f566921, 0x3f56cb21, 0x3f572d4b, 0x3f578f9f, 0x3f57f21d, 0x3f5854c6, 0x3f58b79a,
 0x3f591a99, 0x3f597dc3, 0x3f59e11a, 0x3f5a449c, 0x3f5aa84b, 0x3f5b0c26, 0x3f5b702e, 0x3f5bd464, 0x3f5c38c7, 0x3f5c9d58,
 0x3f5d0217, 0x3f5d6704, 0x3f5dcc20, 0x3f5e316b, 0x3f5e96e6, 0x3f5efc91, 0x3f5f626b, 0x3f5fc876, 0x3f602eb1, 0x3f60951e,
 0x3f60fbbc, 0x3f61628c, 0x3f61c98d, 0x3f6230c2, 0x3f629829, 0x3f62ffc3, 0x3f636790, 0x3f63cf92, 0x3f6437c8, 0x3f64a032,
 0x3f6508d2, 0x3f6571a7, 0x3f65dab1, 0x3f6643f2, 0x3f66ad69, 0x3f671718, 0x3f6780fe, 0x3f67eb1b, 0x3f685571, 0x3f68c000,
 0x3f692ac7, 0x3f6995c8, 0x3f6a0103, 0x3f6a6c79, 0x3f6ad829, 0x3f6b4415, 0x3f6bb03c, 0x3f6c1ca0, 0x3f6c8940, 0x3f6cf61d,
 0x3f6d6338, 0x3f6dd091, 0x3f6e3e29, 0x3f6eac00, 0x3f6f1a17, 0x3f6f886d, 0x3f6ff705, 0x3f7065dd, 0x3f70d4f8, 0x3f714454,
 0x3f71b3f4, 0x3f7223d7, 0x3f7293fe, 0x3f730469, 0x3f737519, 0x3f73e60f, 0x3f74574c, 0x3f74c8cf, 0x3f753a9a, 0x3f75acad,
 0x3f761f08, 0x3f7691ad, 0x3f77049c, 0x3f7777d6, 0x3f77eb5b, 0x3f785f2c, 0x3f78d34a, 0x3f7947b5, 0x3f79bc6e, 0x3f7a3176,
 0x3f7aa6cd, 0x3f7b1c75, 0x3f7b926e, 0x3f7c08b8, 0x3f7c7f55, 0x3f7cf645, 0x3f7d6d8a, 0x3f7de523, 0x3f7e5d12, 0x3f7ed557,
 0x3f7f4df4, 0x3f7fc6e9, 0x3f80201c, 0x3f805cf0, 0x3f8099f1, 0x3f80d721, 0x3f81147e, 0x3f81520b, 0x3f818fc7, 0x3f81cdb2,
 0x3f820bce, 0x3f824a1b, 0x3f828899, 0x3f82c749, 0x3f83062b, 0x3f834540, 0x3f838488, 0x3f83c405, 0x3f8403b6, 0x3f84439c,
 0x3f8483b7, 0x3f84c409, 0x3f850492, 0x3f854553, 0x3f85864b, 0x3f85c77d, 0x3f8608e8, 0x3f864a8c, 0x3f868c6c, 0x3f86ce87,
 0x3f8710df, 0x3f875373, 0x3f879645, 0x3f87d955, 0x3f881ca4, 0x3f886033, 0x3f88a403, 0x3f88e815, 0x3f892c68, 0x3f8970ff,
 0x3f89b5da, 0x3f89fafa, 0x3f8a4060, 0x3f8a860c, 0x3f8acc00, 0x3f8b123c, 0x3f8b58c2, 0x3f8b9f93, 0x3f8be6af, 0x3f8c2e18,
 0x3f8c75ce, 0x3f8cbdd4, 0x3f8d0629, 0x3f8d4ecf, 0x3f8d97c7, 0x3f8de113, 0x3f8e2ab3, 0x3f8e74a9, 0x3f8ebef6, 0x3f8f099c,
 0x3f8f549c, 0x3f8f9ff6, 0x3f8febad, 0x3f9037c2, 0x3f908437, 0x3f90d10d, 0x3f911e45, 0x3f916be2, 0x3f91b9e4, 0x3f92084e,
 0x3f925722, 0x3f92a660, 0x3f92f60c, 0x3f934626, 0x3f9396b1, 0x3f93e7af, 0x3f943922, 0x3f948b0c, 0x3f94dd6f, 0x3f95304d,
 0x3f9583a9, 0x3f95d786, 0x3f962be5, 0x3f9680c9, 0x3f96d636, 0x3f972c2d, 0x3f9782b1, 0x3f97d9c6, 0x3f98316e, 0x3f9889ad,
 0x3f98e285, 0x3f993bfb, 0x3f999611, 0x3f99f0cb, 0x3f9a4c2e, 0x3f9aa83c, 0x3f9b04fa, 0x3f9b626c, 0x3f9bc096, 0x3f9c1f7d,
 0x3f9c7f26, 0x3f9cdf96, 0x3f9d40d1, 0x3f9da2de, 0x3f9e05c1, 0x3f9e6980, 0x3f9ece22, 0x3f9f33ad, 0x3f9f9a28, 0x3fa00199,
 0x3fa06a09, 0x3fa0d37e, 0x3fa13e01, 0x3fa1a99b, 0x3fa21654, 0x3fa28436, 0x3fa2f34b, 0x3fa3639e, 0x3fa3d53a, 0x3fa4482b,
 0x3fa4bc7d, 0x3fa5323e, 0x3fa5a97d, 0x3fa62247, 0x3fa69caf, 0x3fa718c5, 0x3fa7969c, 0x3fa81647, 0x3fa897de, 0x3fa91b76,
 0x3fa9a12a, 0x3faa2914, 0x3faab352, 0x3fab4005, 0x3fabcf51, 0x3fac615b, 0x3facf64f, 0x3fad8e5c, 0x3fae29b7, 0x3faec89b,
 0x3faf6b48, 0x3fb0120a, 0x3fb0bd33, 0x3fb16d24, 0x3fb2224b, 0x3fb2dd27, 0x3fb39e4d, 0x3fb4666f, 0x3fb5365e, 0x3fb60f1c,
 0x3fb6f1e3, 0x3fb7e043, 0x3fb8dc3a, 0x3fb9e86d, 0x3fbb0881, 0x3fbc41b0, 0x3fbd9c04, 0x3fbf2505, 0x3fc0f714, 0x3fc3564d,
 0x3fc90fdb,};


FLOAT LCXMathCos(FLOAT Rad)
{
	FLOAT t = 0;
	FLOAT w = 0;
	INT	  R = 0;
	FLOAT D = LCXToDegree(Rad);

	FLOAT v0 = 0.0F, v1 = 0.0F;

	R = (INT)(D/360.0F);
	D = D - R * 360;

	if(D<0)	D += 360.0F;

	D *= 10.0F;
	R = (INT)(D);
	w = D - R;

	v0= *((FLOAT*)(g_cos + R  ));
	v1= *((FLOAT*)(g_cos + R+1));

	t = (1.0F - w) * v0 + w * v1;
	return (t);
}


FLOAT LCXMathSin(FLOAT Rad)
{
	FLOAT t = 0;
	FLOAT w = 0;
	INT	  R = 0;
	FLOAT D = LCXToDegree(Rad);

	FLOAT v0 = 0.0F, v1 = 0.0F;

	R = (INT)(D/360.0F);
	D = D - R * 360;

	if(D<0)	D += 360.0F;

	D *= 10.0F;
	R = (INT)(D);
	w = D - R;

	v0= *((FLOAT*)(g_sin + R  ));
	v1= *((FLOAT*)(g_sin + R+1));

	t = (1.0F - w) * v0 + w * v1;
	return (t);
}


FLOAT LCXMathTan(FLOAT Rad)
{
	FLOAT t = 0;
	FLOAT w = 0;
	INT	  R = 0;
	FLOAT D = LCXToDegree(Rad);

	FLOAT c = 0;
	FLOAT s = 0;


	R = (INT)(D/360.0F);
	D = D - R * 360;

	if(D<0)	D += 360.0F;

	D *= 10.0F;

	if( ( 870.0F< D && D<  980.0F) ||
		(2670.0F< D && D< 2780.0F) )
		return (FLOAT)tan(Rad);


	c = LCXMathCos(Rad);
	s = LCXMathSin(Rad);

	return (s/c);
}


FLOAT LCXMathAcos(FLOAT v)
{
	FLOAT t = 0;
	FLOAT w = 0;
	FLOAT sign = 1.0F;

	INT   n = 0;
	FLOAT v0 = 0.0F, v1 = 0.0F;


	// boundary
	if(-0.999995 > v)
		return (FLOAT)LCX_PI;

	else if(0.0 == v)
		return (FLOAT)(LCX_PI/2.);

	else if(0.999995 <= v)
		return 0.0F;

	else if(0.982<= fabsf(v))
	{
		t = acos(v);
		return t;
	}


	//t = acos(v);
	//return t;

	if(0.0> v)
		sign = -1.0F;

	v = fabsf(v);

	t = v * 1000.0F;
	n = INT ( t );

	w = t-n;

	v0= *((FLOAT*)(g_acs + n+0));
	v1= *((FLOAT*)(g_acs + n+1));

	t = (1.0F - w) * v0 + w * v1;

	if(0>sign)
		t= FLOAT(LCX_PI-t);


	return (t);
}


FLOAT LCXMathAsin(FLOAT v)
{
	FLOAT t = 0;
	FLOAT w = 0;
	FLOAT sign = 1.0F;

	INT   n = 0;
	FLOAT v0 = 0.0F, v1 = 0.0F;


	// boundary
	if(-0.999995 > v)
		return (-(FLOAT)LCX_PI/2.);

	else if(-0.000005 <=v && v<= -0.000005)
		return 0.0F;

	else if(0.999995 <= v)
		return (+(FLOAT)LCX_PI/2.);

	else if(0.982<= fabsf(v))
	{
		t = asin(v);
		return t;
	}

	//t = asin(v);
	//return t;

	if(0.0> v)
		sign = -1.0F;

	v = fabsf(v);

	t = v * 1000.0F;
	n = INT ( t );

	w = t-n;

	v0= *((FLOAT*)(g_asn + n+0));
	v1= *((FLOAT*)(g_asn + n+1));

	t = (1.0F - w) * v0 + w * v1;

	t *= sign;
	return (t);
}


FLOAT LCXMathAtan2(FLOAT y, FLOAT x)
{
	return (FLOAT)atan2((DOUBLE)y, (DOUBLE)x);
}


FLOAT LCXVec2Dot(const LCXVECTOR2* v1, const LCXVECTOR2* v2)
{
	return (v1->x * v2->x + v1->y * v2->y);
}


FLOAT LCXVec2Length(const LCXVECTOR2* v)
{
	FLOAT l = LCXVec2LengthSq(v);
	l = (FLOAT)sqrt(l);
	return l;
}


FLOAT LCXVec2LengthSq(const LCXVECTOR2* v)
{
	return (v->x * v->x + v->y * v->y);
}


FLOAT LCXVec2Distance(const LCXVECTOR2* v1, const LCXVECTOR2* v2)
{
	FLOAT d = LCXVec2DistanceSq(v1, v2);
	d = (FLOAT)sqrt(d);

	return d;
}



FLOAT LCXVec2DistanceSq(const LCXVECTOR2* v1, const LCXVECTOR2* v2)
{
	FLOAT x = v2->x - v1->x;
	FLOAT y = v2->y - v1->y;

	return (x * x + y * y);
}


FLOAT LCXVec2Normalize(LCXVECTOR2* v)
{
	FLOAT x, y;
	FLOAT l = 0;
	x = v->x;
	y = v->y;

	l = (FLOAT)sqrt( x*x + y*y );
	if(0.0F == l)
		return l;

	l = 1.0F/l;
	x *= l;
	y *= l;
	v->x = x;
	v->y = y;

	return l;
}


FLOAT LCXVec2Normalize(LCXVECTOR2* Out, const LCXVECTOR2* In)
{
	FLOAT x, y;
	FLOAT l = 0;
	x = In->x;
	y = In->y;

	l = (FLOAT)sqrt( x*x + y*y );
	if(0.0F == l)
		return l;

	l = 1.0F/l;
	x *= l;
	y *= l;
	Out->x = x;
	Out->y = y;

	return l;
}



FLOAT LCXVec2Cross(const LCXVECTOR2* v1, const LCXVECTOR2* v2)
{
	return (v1->x * v2->y - v1->y * v2->x);
}


void LCXVec2Lerp(LCXVECTOR2* Out, const LCXVECTOR2* v1, const LCXVECTOR2* v2, FLOAT t) // this = (1-t)*v1 + t* v2
{
	FLOAT k = 1.0F - t;
	Out->x = k * v1->x + t * v2->x;
	Out->y = k * v1->y + t * v2->y;
}


void LCXVec2MakeBoundingBox(LCXVECTOR2* vcMin, LCXVECTOR2* vcMax
							, const LC_HANDLE pList, INT Count, INT stride)
{
	FLOAT minX = +LCX_FMAX, minY = +LCX_FMAX;
	FLOAT maxX = -LCX_FMAX, maxY = -LCX_FMAX;

	char*		p = (char*)pList;
	LCXVECTOR2* v = NULL;

	for(INT i=0; i<Count; ++i)
	{
		p += stride;
		v  =(LCXVECTOR2*)p;

		if(minX > v->x)	minX = v->x;
		if(minY > v->y)	minY = v->y;

		if(maxX < v->x)	maxX = v->x;
		if(maxY < v->y)	maxY = v->y;
	}

	vcMin->x = minX;
	vcMin->y = minY;

	vcMax->x = maxX;
	vcMax->y = maxY;
}




//++5++++1+++++++++2+++++++++3+++++++++4+++++++++5+++++++++6+++++++++7+++++++++8


FLOAT LCXVec3Dot(const LCXVECTOR3* v1, const LCXVECTOR3* v2)
{
	return (v1->x * v2->x +
			v1->y * v2->y +
			v1->z * v2->z);
}


FLOAT LCXVec3Length(const LCXVECTOR3* v)
{
	return (FLOAT)sqrt(	v->x * v->x +
						v->y * v->y +
						v->z * v->z		);
}

FLOAT LCXVec3LengthSq(const LCXVECTOR3* v)
{
	return (v->x * v->x +
			v->y * v->y +
			v->z * v->z		);
}


FLOAT LCXVec3Distance(const LCXVECTOR3* v1, const LCXVECTOR3* v2)
{
	FLOAT x = v2->x - v1->x;
	FLOAT y = v2->y - v1->y;
	FLOAT z = v2->z - v1->z;

	return (FLOAT)sqrt(x * x + y * y + z * z);
}

FLOAT LCXVec3DistanceSq(const LCXVECTOR3* v1, const LCXVECTOR3* v2)
{
	FLOAT x = v2->x - v1->x;
	FLOAT y = v2->y - v1->y;
	FLOAT z = v2->z - v1->z;

	return (x * x + y * y + z * z);
}


FLOAT LCXVec3Normalize(LCXVECTOR3* v)
{
	FLOAT x, y, z;
	FLOAT l = 0;
	x = v->x;
	y = v->y;
	z = v->z;

	l = (FLOAT)sqrt( x*x + y*y + z*z);
	if(0.0F == l)
		return l;

	l = 1.0F/l;
	x *= l;
	y *= l;
	z *= l;

	v->x = x;
	v->y = y;
	v->z = z;

	return l;
}


FLOAT LCXVec3Normalize(LCXVECTOR3* Out, const LCXVECTOR3* In)
{
	FLOAT x, y, z;
	FLOAT l = 0;
	x = In->x;
	y = In->y;
	z = In->z;

	l = (FLOAT)sqrt( x*x + y*y + z*z);
	if(0.0F == l)
		return l;

	l = 1.0F/l;
	x *= l;
	y *= l;
	z *= l;

	Out->x = x;
	Out->y = y;
	Out->z = z;

	return l;
}


void  LCXVec3Cross(LCXVECTOR3* Out, const LCXVECTOR3* v)
{
	FLOAT x, y, z;
	x = Out->x;
	y = Out->y;
	z = Out->z;

	Out->x = y * v->z - z * v->y;
	Out->y = z * v->x - x * v->z;
	Out->z = x * v->y - y * v->x;
}


void  LCXVec3Cross(LCXVECTOR3* Out, const LCXVECTOR3* v1, const LCXVECTOR3* v2)
{
	Out->x = v1->y * v2->z - v1->z * v2->y;
	Out->y = v1->z * v2->x - v1->x * v2->z;
	Out->z = v1->x * v2->y - v1->y * v2->x;
}

void  LCXVec3NormalVector(LCXVECTOR3* Out, const LCXVECTOR3* v1, const LCXVECTOR3* v2, const LCXVECTOR3* v3)
{
	LCXVECTOR3 a, b;

	a = *v2 - *v1;
	b = *v3 - *v1;

	LCXVec3Cross(Out, &a, &b);
	LCXVec3Normalize(Out, Out);
}

void  LCXVec3Minimize(LCXVECTOR3* Out, const LCXVECTOR3* v1, const LCXVECTOR3* v2)
{
	Out->x = (v1->x < v2->x) ? v1->x : v2->x;
    Out->y = (v1->y < v2->y) ? v1->y : v2->y;
    Out->z = (v1->z < v2->z) ? v1->z : v2->z;
}


void  LCXVec3Maximize(LCXVECTOR3* Out, const LCXVECTOR3* v1, const LCXVECTOR3* v2)
{
	Out->x = (v1->x > v2->x) ? v1->x : v2->x;
    Out->y = (v1->y > v2->y) ? v1->y : v2->y;
    Out->z = (v1->z > v2->z) ? v1->z : v2->z;
}

void LCXVec3Lerp(LCXVECTOR3* Out, const LCXVECTOR3* v1, const LCXVECTOR3* v2, FLOAT t)
{
	FLOAT k = 1.0F - t;
	Out->x = k * v1->x + t * v2->x;
	Out->y = k * v1->y + t * v2->y;
	Out->z = k * v1->z + t * v2->z;
}


void LCXVec3FromScreen(LCXVECTOR3* pOut
						, FLOAT scn_x, FLOAT scn_y			// position on screen
						, const LCXMATRIX*	pVpt			// viewport matrix
						, const LCXMATRIX*	pPrj			// projection matrix
						, const LCXMATRIX*	pViw			// view matrix
						)
{
	LCXVECTOR3 vcIn = LCXVECTOR3(scn_x, scn_y, 0);
	LCXMATRIX  mtI;
	LCXMATRIX  mt  = *pViw;

	mt *= *pPrj;
	mt *= *pVpt;

	LCXMatrixInverse(&mtI, NULL, &mt);
	LCXVec3TransformCoord(pOut, &vcIn, &mtI);
}


void LCXVec3DirectionFromScreen(LCXVECTOR3* pOut
							   , FLOAT scn_x, FLOAT scn_y	// positin on viewport
							   , const LCXMATRIX* pVpt		// viewport matrix
							   , const LCXMATRIX* pPrj		// projection matrix
							   , const LCXMATRIX* pViw		// inverse view matrix
							   )
{
	LCXVECTOR3 vcIn = LCXVECTOR3(scn_x, scn_y, 0);

	LCXMATRIX	mtI;
	LCXMATRIX	mt  = *pViw;

	mt._41 = 0.0F;
	mt._42 = 0.0F;
	mt._43 = 0.0F;

	mt *= *pPrj;
	mt *= *pVpt;

	LCXMatrixInverse(&mtI, NULL, &mt);
	LCXVec3TransformCoord(pOut, &vcIn, &mtI);
	pOut->Normalize();
}


//++5++++1+++++++++2+++++++++3+++++++++4+++++++++5+++++++++6+++++++++7+++++++++8

void LCXVec3DirectionFromScreen(LCXVECTOR3* pOut
							   , FLOAT x, FLOAT y				// positin on viewport
							   , FLOAT vpW						// viewport width
							   , FLOAT vpH						// viewport height
							   , const LCXMATRIX* invViw		// inverse view matrix
							   , const LCXMATRIX* matPrj		// projection matrix
							   )
{
	// Get the pick ray from the mouse position
	FLOAT w = matPrj->_11;
	FLOAT h = matPrj->_22;

	LCXVECTOR3	vcScnP;

	vcScnP.x =  ( 2.0F * x/ vpW - 1.0F ) / w;
	vcScnP.y = -( 2.0F * y/ vpH - 1.0F ) / h;
	vcScnP.z =  1.0F;

	// Transform the screen space pick ray into 3D space
	// Ray Direction
	//pOut->x  = LCXVec3Dot(&vcScnP, &LCXVECTOR3(invViw->_11, invViw->_21, invViw->_31));
	//pOut->y  = LCXVec3Dot(&vcScnP, &LCXVECTOR3(invViw->_12, invViw->_22, invViw->_32));
	//pOut->z  = LCXVec3Dot(&vcScnP, &LCXVECTOR3(invViw->_13, invViw->_23, invViw->_33));

	pOut->x  = vcScnP.x * invViw->_11  +  vcScnP.y * invViw->_21  +  vcScnP.z * invViw->_31;
	pOut->y  = vcScnP.x * invViw->_12  +  vcScnP.y * invViw->_22  +  vcScnP.z * invViw->_32;
	pOut->z  = vcScnP.x * invViw->_13  +  vcScnP.y * invViw->_23  +  vcScnP.z * invViw->_33;
}



void LCXVec3MakeBoundingBox(LCXVECTOR3* vcMin, LCXVECTOR3* vcMax
							, const LC_HANDLE pList, INT Count, INT stride)
{
	FLOAT minX = +LCX_FMAX, minY = +LCX_FMAX, minZ = +LCX_FMAX;
	FLOAT maxX = -LCX_FMAX, maxY = -LCX_FMAX, maxZ = -LCX_FMAX;

	char*		p = (char*)pList;
	LCXVECTOR3* v = NULL;

	for(INT i=0; i<Count; ++i)
	{
		p += stride;
		v  =(LCXVECTOR3*)p;

		if(minX > v->x)	minX = v->x;
		if(minY > v->y)	minY = v->y;
		if(minZ > v->z)	minZ = v->z;

		if(maxX < v->x)	maxX = v->x;
		if(maxY < v->y)	maxY = v->y;
		if(maxZ < v->z)	maxZ = v->z;
	}

	vcMin->x = minX;
	vcMin->y = minY;
	vcMin->z = minZ;

	vcMax->x = maxX;
	vcMax->y = maxY;
	vcMax->z = maxZ;
}



void  LCXVec3MinMaxFromQuad(LCXVECTOR3* pMin, LCXVECTOR3* pMax
							, const LCXVECTOR3* p0, const LCXVECTOR3* p1
							, const LCXVECTOR3* p2, const LCXVECTOR3* p3)
{
	FLOAT minX = p0->x;
	FLOAT minY = p0->y;
	FLOAT minZ = p0->z;

	FLOAT maxX = p0->x;
	FLOAT maxY = p0->y;
	FLOAT maxZ = p0->z;

	if(p1->x < minX) minX = p1->x;
	if(p1->y < minY) minY = p1->y;
	if(p1->z < minZ) minZ = p1->z;

	if(p1->x > maxX) maxX = p1->x;
	if(p1->y > maxX) maxX = p1->y;
	if(p1->z > maxX) maxX = p1->z;

	if(NULL == p2)
		goto END;


	if(p2->x < minX) minX = p2->x;
	if(p2->y < minY) minY = p2->y;
	if(p2->z < minZ) minZ = p2->z;

	if(p2->x > maxX) maxX = p2->x;
	if(p2->y > maxX) maxX = p2->y;
	if(p2->z > maxX) maxX = p2->z;

	if(NULL == p3)
		goto END;


	if(p3->x < minX) minX = p3->x;
	if(p3->y < minY) minY = p3->y;
	if(p3->z < minZ) minZ = p3->z;

	if(p3->x > maxX) maxX = p3->x;
	if(p3->y > maxX) maxX = p3->y;
	if(p3->z > maxX) maxX = p3->z;

END:
	pMin->x = minX;
	pMin->y = minY;
	pMin->z = minZ;

	pMax->x = maxX;
	pMax->y = maxY;
	pMax->z = maxZ;
}



void  LCXVec3CenterFromQuad(LCXVECTOR3* Out
							, const LCXVECTOR3* p0, const LCXVECTOR3* p1
							, const LCXVECTOR3* p2, const LCXVECTOR3* p3)
{
	Out->x = p0->x;
	Out->y = p0->y;
	Out->z = p0->z;

	if(NULL == p1)
		return;

	Out->x += p1->x;
	Out->y += p1->y;
	Out->z += p1->z;

	if(NULL == p2)
	{
		Out->x *= 0.5F;
		Out->y *= 0.5F;
		Out->z *= 0.5F;
		return;
	}

	Out->x += p2->x;
	Out->y += p2->y;
	Out->z += p2->z;

	if(NULL == p3)
	{
		Out->x /= 3.0F;
		Out->y /= 3.0F;
		Out->z /= 3.0F;
		return;
	}

	Out->x += p3->x;
	Out->y += p3->y;
	Out->z += p3->z;
	Out->x *= 0.25F;
	Out->y *= 0.25F;
	Out->z *= 0.25F;
}




//++5++++1+++++++++2+++++++++3+++++++++4+++++++++5+++++++++6+++++++++7+++++++++8

FLOAT LCXVec4Dot(const LCXVECTOR4* v1, const LCXVECTOR4* v2)
{
	return (v1->x * v2->x +
			v1->y * v2->y +
			v1->z * v2->z +
			v1->w * v2->w);
}


FLOAT LCXVec4Length(const LCXVECTOR4* v)
{
	return (FLOAT)sqrt(	v->x * v->x +
						v->y * v->y +
						v->z * v->z +
						v->w * v->w		);
}

FLOAT LCXVec4LengthSq(const LCXVECTOR4* v)
{
	return (v->x * v->x +
			v->y * v->y +
			v->z * v->z +
			v->w * v->w		);
}


FLOAT LCXVec4Normalize(LCXVECTOR4* v)
{
	FLOAT x, y, z, w;
	FLOAT l = 0;
	x = v->x;
	y = v->y;
	z = v->z;
	w = v->w;

	l = (FLOAT)sqrt( x*x + y*y + z*z + w*w);
	if(0.0F == l)
		return l;

	l = 1.0F/l;
	x *= l;
	y *= l;
	z *= l;
	w *= l;

	v->x = x;
	v->y = y;
	v->z = z;
	v->w = w;

	return l;
}


FLOAT LCXVec4Normalize(LCXVECTOR4* Out, const LCXVECTOR4* In)
{
	FLOAT x, y, z, w;
	FLOAT l = 0;
	x = In->x;
	y = In->y;
	z = In->z;
	w = In->w;

	l = (FLOAT)sqrt( x*x + y*y + z*z + w*w);
	if(0.0F == l)
		return l;

	l = 1.0F/l;
	x *= l;
	y *= l;
	z *= l;
	w *= l;

	Out->x = x;
	Out->y = y;
	Out->z = z;
	Out->w = w;

	return l;
}


void LCXVec4Lerp(LCXVECTOR4* Out, const LCXVECTOR4* v1, const LCXVECTOR4* v2, FLOAT t)
{
	FLOAT k = 1.0F - t;
	Out->x = k * v1->x + t * v2->x;
	Out->y = k * v1->y + t * v2->y;
	Out->z = k * v1->z + t * v2->z;
	Out->w = k * v1->w + t * v2->w;
}




//++5++++1+++++++++2+++++++++3+++++++++4+++++++++5+++++++++6+++++++++7+++++++++8


// z = 1
void  LCXVec2TransformCoord(LCXVECTOR2* Out, const LCXVECTOR2* v, const LCXMAT3X3* t)
{
	FLOAT _x, _y;
	FLOAT x, y, z;

	_x = v->x;
	_y = v->y;

	x = t->_11 * _x +  t->_21 * _y    +  t->_31;
	y = t->_12 * _x +  t->_22 * _y    +  t->_32;
	z = t->_13 * _x +  t->_23 * _y    +  t->_33;

	x /=z;
	y /=z;
	//z =1.0F;

	Out->x =x;
	Out->y =y;
}

void  LCXVec2TransformNormal(LCXVECTOR2* Out, const LCXVECTOR2* v, const LCXMAT3X3* t)
{
	FLOAT _x, _y;
	FLOAT x, y;

	_x = v->x;
	_y = v->y;

	x = t->_11 * _x +  t->_21 * _y;
	y = t->_12 * _x +  t->_22 * _y;

	Out->x =x;
	Out->y =y;
}

void LCXVec3TransformCoord(LCXVECTOR3* Out, const LCXVECTOR3* v, const LCXMATRIX* t)
{
	FLOAT _x, _y, _z;
	FLOAT x, y, z, w;

	_x = v->x;
	_y = v->y;
	_z = v->z;

	x = t->_11 * _x +  t->_21 * _y + t->_31 * _z   +  t->_41;
	y = t->_12 * _x +  t->_22 * _y + t->_32 * _z   +  t->_42;
	z = t->_13 * _x +  t->_23 * _y + t->_33 * _z   +  t->_43;
	w = t->_14 * _x +  t->_24 * _y + t->_34 * _z   +  t->_44;

	x /=w;
	y /=w;
	z /=w;
	//w =1.0F;

	Out->x =x;
	Out->y =y;
	Out->z =z;
}



void LCXVec3TransformCoord(LCXVECTOR3* Out, const LCXVECTOR3* v, const LCXMAT4X3* t)
{
	FLOAT _x, _y, _z;
	FLOAT x, y, z;

	_x = v->x;
	_y = v->y;
	_z = v->z;

	x = t->_11 * _x +  t->_21 * _y + t->_31 * _z   +  t->_41;
	y = t->_12 * _x +  t->_22 * _y + t->_32 * _z   +  t->_42;
	z = t->_13 * _x +  t->_23 * _y + t->_33 * _z   +  t->_43;

	Out->x =x;
	Out->y =y;
	Out->z =z;
}



void LCXVec3TransformNormal(LCXVECTOR3* Out, const LCXVECTOR3* v, const LCXMATRIX* t)
{
	FLOAT _x, _y, _z;
	FLOAT x, y, z;

	_x = v->x;
	_y = v->y;
	_z = v->z;

	x = t->_11 * _x +  t->_21 * _y + t->_31 * _z;
	y = t->_12 * _x +  t->_22 * _y + t->_32 * _z;
	z = t->_13 * _x +  t->_23 * _y + t->_33 * _z;

	Out->x =x;
	Out->y =y;
	Out->z =z;
}

void LCXVec3TransformNormal(LCXVECTOR3* Out, const LCXVECTOR3* v, const LCXMAT4X3* t)
{
	FLOAT _x, _y, _z;
	FLOAT x, y, z;

	_x = v->x;
	_y = v->y;
	_z = v->z;

	x = t->_11 * _x +  t->_21 * _y + t->_31 * _z;
	y = t->_12 * _x +  t->_22 * _y + t->_32 * _z;
	z = t->_13 * _x +  t->_23 * _y + t->_33 * _z;

	Out->x =x;
	Out->y =y;
	Out->z =z;
}


void LCXVec4TransformCoord(LCXVECTOR4* Out, const LCXVECTOR4* In, const LCXMATRIX* tm)
{
	FLOAT x = In->x;
	FLOAT y = In->y;
	FLOAT z = In->z;
	FLOAT w = In->w;

	Out->x = x * tm->_11 + y * tm->_21 + z * tm->_31 + w * tm->_41;
	Out->y = x * tm->_12 + y * tm->_22 + z * tm->_32 + w * tm->_42;
	Out->z = x * tm->_13 + y * tm->_23 + z * tm->_33 + w * tm->_43;
	Out->w = x * tm->_14 + y * tm->_24 + z * tm->_34 + w * tm->_44;
}


void LCXVec3Translate(LCXVECTOR3* Out, const LCXMATRIX* tm, const LCXVECTOR3* In)
{
	FLOAT x = In->x;
	FLOAT y = In->y;
	FLOAT z = In->z;

	Out->x = x + tm->_41;
	Out->y = y + tm->_42;
	Out->z = z + tm->_43;
}



void LCXVec3InverseTranslate(LCXVECTOR3* Out, const LCXMATRIX* tm, const LCXVECTOR3* In)
{
	FLOAT x = In->x;
	FLOAT y = In->y;
	FLOAT z = In->z;

	Out->x = x - tm->_41;
	Out->y = y - tm->_42;
	Out->z = z - tm->_43;
}


void LCXVec3Rotate(LCXVECTOR3* Out, const LCXMATRIX* pR, const LCXVECTOR3* In)
{
	FLOAT x = In->x;
	FLOAT y = In->y;
	FLOAT z = In->z;

	Out->x = x * pR->_11 + y * pR->_21 + z * pR->_31;
	Out->y = x * pR->_12 + y * pR->_22 + z * pR->_32;
	Out->z = x * pR->_13 + y * pR->_23 + z * pR->_33;
}

void LCXVec3InverseRotate(LCXVECTOR3* Out, const LCXMATRIX* pR, const LCXVECTOR3* In)
{
	FLOAT x = In->x;
	FLOAT y = In->y;
	FLOAT z = In->z;

	Out->x = x * pR->_11 + y * pR->_12 + z * pR->_13;
	Out->y = x * pR->_21 + y * pR->_22 + z * pR->_33;
	Out->z = x * pR->_31 + y * pR->_32 + z * pR->_33;
}




//++5++++1+++++++++2+++++++++3+++++++++4+++++++++5+++++++++6+++++++++7+++++++++8


FLOAT LCXPlaneDot(const LCXPLANE *p, const LCXVECTOR4 *v)
{
	return p->a * v->x  +  p->b * v->y  +  p->c * v->z  +  p->d * v->w;
}

FLOAT LCXPlaneDotCoord(const LCXPLANE *p, const LCXVECTOR3 *v)
{
	return p->a * v->x  +  p->b * v->y  +  p->c * v->z  +  p->d;
}

FLOAT LCXPlane2DotCoord(const LCXPLANE2* p, const LCXVECTOR2* v)
{
	return p->a * v->x + p->b * v->y + p->d;
}

FLOAT LCXPlaneDotNormal(const LCXPLANE *p, const LCXVECTOR3 *v)
{
	return p->a * v->x + p->b * v->y + p->c * v->z;
}


void  LCXPlaneFromNormalDistance(LCXPLANE* p, const LCXVECTOR3* n, FLOAT d)
{
	//LCXVECTOR3 nT = *n;
	//LCXVec3Normalize(&nT, &nT);
	//p->a = nT.x;
	//p->b = nT.y;
	//p->c = nT.z;

	p->a  = n->x;
	p->b  = n->y;
	p->c  = n->z;
	p->d = d;
}

void LCXPlaneFromPointNormal(LCXPLANE* p, const LCXVECTOR3* v, const LCXVECTOR3* n)
{
	//LCXVECTOR3 nT = *n;
	//LCXVec3Normalize(&nT, &nT);
	//p->a = nT.x;
	//p->b = nT.y;
	//p->c = nT.z;

	p->a  = n->x;
	p->b  = n->y;
	p->c  = n->z;
	p->d  = - LCXVec3Dot(v, n);
}

void LCXPlaneFromPoints(LCXPLANE* p, const LCXVECTOR3* v0, const LCXVECTOR3* v1, const LCXVECTOR3* v2)
{
	LCXVECTOR3	n;
	LCXVECTOR3	a;
	LCXVECTOR3	b;

	a = *v1 - *v0;
	b = *v2 - *v0;

	LCXVec3Cross(&n , &a, &b);
	n.Normalize();

	p->a  = n.x;
	p->b  = n.y;
	p->c  = n.z;
	p->d  = - LCXVec3Dot(v0, &n);
}


void LCXPlaneDvalue(LCXPLANE* p, const LCXVECTOR3* v)
{
	LCXVECTOR3 n(p->a, p->b, p->c);
	p->d = - LCXVec3Dot(&n, v);
}


//void LCXPlaneTransform2(LCXPLANE* Out, LCXPLANE* In, const LCXMATRIX* tm)
//{
//	LCXVECTOR3 origin(0,0,0);
//	LCXVECTOR3 member;
//
//	member.x = -In->a * In->d;
//	member.y = -In->b * In->d;
//	member.z = -In->c * In->d;
//
//	LCXVec3TransformCoord(&origin, &origin, tm);
//	LCXVec3TransformCoord(&member, &member, tm);
//
//	LCXVec3TransformCoord((LCXVECTOR3*)&Out->a, (LCXVECTOR3*)&In->a, tm);
//	Out->a -= origin.x;
//	Out->b -= origin.y;
//	Out->c -= origin.z;
//	Out->d = - LCXPlaneDotNormal(Out, &member);
//}

void  LCXPlaneTransform(LCXPLANE* Out, const LCXPLANE* In, const LCXMATRIX* tm)
{
	LCXVECTOR3 trn(tm->_41, tm->_42, tm->_43);
	LCXVec3TransformNormal((LCXVECTOR3*)Out, (LCXVECTOR3*)In, tm);
	Out->d  = In->d;
	Out->d -= LCXVec3Dot((LCXVECTOR3*)Out, &trn);
}




INT	LCXVec3From3Planes(LCXVECTOR3* Out, const LCXPLANE* p1, const LCXPLANE* p2, const LCXPLANE* p3)
{
	FLOAT X;
	FLOAT Y;
	FLOAT Z;
	FLOAT D;

	LCXMATRIX mtX(	-p1->d,	p1->b,	p1->c,	0,
					-p2->d,	p2->b,	p2->c,	0,
					-p3->d,	p3->b,	p3->c,	0,
					0,		0,		0,		1);

	LCXMATRIX mtY(	p1->a,	-p1->d,	p1->c,	0,
					p2->a,	-p2->d,	p2->c,	0,
					p3->a,	-p3->d,	p3->c,	0,
					0,		0,		0,		1);

	LCXMATRIX mtZ(	p1->a,	p1->b,	-p1->d,	0,
					p2->a,	p2->b,	-p2->d,	0,
					p3->a,	p3->b,	-p3->d,	0,
					0,		0,		0,		1);

	LCXMATRIX mtD(	p1->a,	p1->b,	p1->c,	0,
					p2->a,	p2->b,	p2->c,	0,
					p3->a,	p3->b,	p3->c,	0,
					0,		0,		0,		1);

	D = LCXMatrixDeterminant(&mtD);
	X = LCXMatrixDeterminant(&mtX);
	Y = LCXMatrixDeterminant(&mtY);
	Z = LCXMatrixDeterminant(&mtZ);

	if(0.0F == D)
		return -1;

	Out->x = X/D;
	Out->y = Y/D;
	Out->z = Z/D;

	return 0;
}




//++5++++1+++++++++2+++++++++3+++++++++4+++++++++5+++++++++6+++++++++7+++++++++8


void LCXQuaternionIdentity(LCXQUATERNION* q)
{
	q->x = q->y = q->z = 0.0F;
	q->w = 1.0F;
}

FLOAT LCXQuaternionLength(const LCXQUATERNION* q)
{
	return (FLOAT) sqrt(q->x * q->x + q->y * q->y + q->z * q->z + q->w * q->w);
}

FLOAT LCXQuaternionLengthSq(const LCXQUATERNION* q)
{
	return q->x * q->x + q->y * q->y + q->z * q->z + q->w * q->w;
}

FLOAT LCXQuaternionDot(const LCXQUATERNION* q1, const LCXQUATERNION* q2)
{
	return q1->x * q2->x + q1->y * q2->y + q1->z * q2->z + q1->w * q2->w;
}

INT LCXQuaternionIsIdentity(const LCXQUATERNION* q)
{
	return q->x == 0.0F && q->y == 0.0F && q->z == 0.0F && q->w == 1.0F;
}


void LCXQuaternionConjugate(LCXQUATERNION* Out, const LCXQUATERNION* q)
{
	Out->x = -q->x;
	Out->y = -q->y;
	Out->z = -q->z;
	Out->w =  q->w;
}



void LCXQuaternionSLerp(LCXQUATERNION* Out, const LCXQUATERNION* q1, const LCXQUATERNION* q2, FLOAT t)
{
	//Q = (1/sin T )[  sin ( T *(1-t) ) * Q1 + sin ( T * t ) * Q2]

	FLOAT w1;
	FLOAT w2;
	FLOAT dt = q1->x * q2->x + q1->y * q2->y + q1->z * q2->z + q1->w * q2->w;


	if( dt<-0.9999F || dt > 0.9999F)
	{
		w1 = 1.0F - t;
		w2 = t;
	}
	else
	{
		FLOAT Tht = LCXMathAcos( fabsf(dt) );
		FLOAT Sin = LCXMathSin ( Tht );

		w1 = LCXMathSin( (1.0F-t) * Tht) / Sin;
		w2 = LCXMathSin(       t  * Tht) / Sin;
	}

	if( dt < 0 )
		w2 = -w2;

	*Out = *q1 * w1 + *q2 * w2;
}


void  LCXQuaternionToAxisRadian(LCXVECTOR3* pAxis, FLOAT* rad, const LCXQUATERNION* q)
{
	FLOAT w = q->x * q->x + q->y * q->y + q->z * q->z + q->w * q->w;
	FLOAT s = sqrt(q->x*q->x + q->y*q->y + q->z*q->z);
	FLOAT c = q->w;

	pAxis->x = 0.0F;
	pAxis->y = 0.0F;
	pAxis->z = 0.0F;
	if(rad) *rad = LCX_FMAX;

	if (0.00001F > w)
		return;

	if(rad) *rad = 2.0F * LCXMathAtan2(s, c);

	if(pAxis)
	{
		pAxis->x  = q->x;
		pAxis->y  = q->y;
		pAxis->z  = q->z;
	}
}


void  LCXQuaternionToAxisCosSin(LCXVECTOR3* pAxis, FLOAT* fcos, FLOAT* fsin, const LCXQUATERNION* q)
{
	FLOAT w = q->x * q->x + q->y * q->y + q->z * q->z + q->w * q->w;
	FLOAT s = sqrt(q->x*q->x + q->y*q->y + q->z*q->z);
	FLOAT c = q->w;

	FLOAT r = 0;
	pAxis->x = 0.0F;
	pAxis->y = 0.0F;
	pAxis->z = 0.0F;

	if(fcos) *fcos = LCX_FMAX;
	if(fsin) *fsin = LCX_FMAX;

	if (0.00001F > w)
		return;

	r = 2.0F * LCXMathAtan2(s, c);
	if(fcos) *fcos = LCXMathCos(r);
	if(fsin) *fsin = LCXMathSin(r);

	if(pAxis)
	{
		pAxis->x  = q->x;
		pAxis->y  = q->y;
		pAxis->z  = q->z;
	}
}


void LCXQuaternionFromMatrix(LCXQUATERNION *Out, const LCXMATRIX *tm, INT bLHR)
{
	FLOAT qw = ( tm->_11 + tm->_22 + tm->_33 + 1.0F)/4.0F;
	FLOAT qx = ( tm->_11 - tm->_22 - tm->_33 + 1.0F)/4.0F;
	FLOAT qy = (-tm->_11 + tm->_22 - tm->_33 + 1.0F)/4.0F;
	FLOAT qz = (-tm->_11 - tm->_22 + tm->_33 + 1.0F)/4.0F;
	FLOAT s = (0 == bLHR) ? +1.0F: -1.0F;

	Out->x = 0;
	Out->y = 0;
	Out->z = 0;
	Out->w = 0;

	if(0.0F < qw)
	{
		qw = 4.0F * sqrt(qw);

		Out->x = ( tm->_32 - tm->_23 )/qw *s;
		Out->y = ( tm->_13 - tm->_31 )/qw *s;
		Out->z = ( tm->_21 - tm->_12 )/qw *s;
		Out->w = qw / 4.0F;
	}

	else if(0.0F < qx)
	{
		qx = 4.0F * sqrt(qx);

		Out->x = qx / 4.0F;
		Out->y = ( tm->_21 + tm->_12 )/qx *s;
		Out->z = ( tm->_13 + tm->_31 )/qx *s;
		Out->w = ( tm->_32 - tm->_23 )/qx *s;
	}

	else if(0.0F < qy)
	{
		qy = 4.0F * sqrt(qy);

		Out->x = ( tm->_21 + tm->_12 )/qy *s;
		Out->y = qy / 4.0F;
		Out->z = ( tm->_32 + tm->_23 )/qy *s;
		Out->w = ( tm->_13 - tm->_31 )/qy *s;
	}

	else if(0.0F < qz)
	{
		qz = 4.0F * sqrt(qz);

		Out->x = ( tm->_13 + tm->_31 )/qz *s;
		Out->y = ( tm->_32 + tm->_23 )/qz *s;
		Out->z = qz / 4.0F;
		Out->w = ( tm->_21 - tm->_12 )/qy *s;
	}
	else
	{
		//printf("Error: quaternion is zero.\n");
		return;
	}
}


void  LCXQuaternionFromMatrix(LCXQUATERNION* Out, const LCXMAT4X3* tm, INT bLHR)
{
	FLOAT qw = ( tm->_11 + tm->_22 + tm->_33 + 1.0F)/4.0F;
	FLOAT qx = ( tm->_11 - tm->_22 - tm->_33 + 1.0F)/4.0F;
	FLOAT qy = (-tm->_11 + tm->_22 - tm->_33 + 1.0F)/4.0F;
	FLOAT qz = (-tm->_11 - tm->_22 + tm->_33 + 1.0F)/4.0F;
	FLOAT s = (0 == bLHR) ? +1.0F: -1.0F;

	Out->x = 0;
	Out->y = 0;
	Out->z = 0;
	Out->w = 0;

	if(0.0F < qw)
	{
		qw = 4.0F * sqrt(qw);

		Out->x = ( tm->_32 - tm->_23 )/qw *s;
		Out->y = ( tm->_13 - tm->_31 )/qw *s;
		Out->z = ( tm->_21 - tm->_12 )/qw *s;
		Out->w = qw / 4.0F;
	}

	else if(0.0F < qx)
	{
		qx = 4.0F * sqrt(qx);

		Out->x = qx / 4.0F;
		Out->y = ( tm->_21 + tm->_12 )/qx *s;
		Out->z = ( tm->_13 + tm->_31 )/qx *s;
		Out->w = ( tm->_32 - tm->_23 )/qx *s;
	}

	else if(0.0F < qy)
	{
		qy = 4.0F * sqrt(qy);

		Out->x = ( tm->_21 + tm->_12 )/qy *s;
		Out->y = qy / 4.0F;
		Out->z = ( tm->_32 + tm->_23 )/qy *s;
		Out->w = ( tm->_13 - tm->_31 )/qy *s;
	}

	else if(0.0F < qz)
	{
		qz = 4.0F * sqrt(qz);

		Out->x = ( tm->_13 + tm->_31 )/qz *s;
		Out->y = ( tm->_32 + tm->_23 )/qz *s;
		Out->z = qz / 4.0F;
		Out->w = ( tm->_21 - tm->_12 )/qy *s;
	}
	else
	{
		//printf("Error: quaternion is zero.\n");
		return;
	}
}


void LCXQuaternionRotation(LCXVECTOR3* Out, const LCXVECTOR3* In, const LCXVECTOR3* axis, FLOAT r_radian)
{
	LCXQUATERNION q;
	LCXQUATERNION p(In->x, In->y, In->z, 0.0F);
	LCXQUATERNION t;
	LCXQUATERNION i;

	r_radian *= 0.5F;

	q.x = (FLOAT)LCXMathSin(r_radian) * axis->x;  i.x = -q.x;
	q.y = (FLOAT)LCXMathSin(r_radian) * axis->y;  i.y = -q.y;
	q.z = (FLOAT)LCXMathSin(r_radian) * axis->z;  i.z = -q.z;
	q.w = (FLOAT)LCXMathCos(r_radian);            i.w = +q.w;

	t = i * p * q;

	Out->x = t.x;
	Out->y = t.y;
	Out->z = t.z;
}




//++5++++1+++++++++2+++++++++3+++++++++4+++++++++5+++++++++6+++++++++7+++++++++8

void  LCXMatrixIdentity(LCXMATRIX* v)
{
	v->Identity();
}

void  LCXMatrixAdd(LCXMATRIX* v, const LCXMATRIX* a, const LCXMATRIX* b)
{
	*v = *a + *b;
}


void  LCXMatrixSub(LCXMATRIX* v, const LCXMATRIX* a, const LCXMATRIX* b)
{
	*v = *a - *b;
}


void  LCXMatrixMul(LCXMATRIX* v, const LCXMATRIX* a, const LCXMATRIX* b)
{
	*v = (*a) * (*b);
}


void  LCXMatrixTranspose(LCXMATRIX* Out, const LCXMATRIX* v)
{
	LCXMATRIX t = *v;
	Out->_11 = t._11;	Out->_21 = t._12;	Out->_31 = t._13;	Out->_41 = t._14;
	Out->_12 = t._21;	Out->_22 = t._22;	Out->_32 = t._23;	Out->_42 = t._24;
	Out->_13 = t._31;	Out->_23 = t._32;	Out->_33 = t._33;	Out->_43 = t._34;
	Out->_14 = t._41;	Out->_24 = t._42;	Out->_34 = t._43;	Out->_44 = t._44;
}


FLOAT LCXMatrixInverse(LCXMATRIX* m, INT bQuick)
{
	FLOAT d=0;
	m->Inverse(&d, bQuick);
	return d;
}


INT   LCXMatrixInverse(LCXMATRIX* Out, FLOAT* det, const LCXMATRIX* tm)
{
	Out->Inverse(det, tm, LC_FALSE);
	return LC_OK;
}


FLOAT LCXMatrixDeterminant(const LCXMATRIX* m)
{
	FLOAT d = m->Determinant();
	return d;
}


void  LCXMatrixScaling(LCXMATRIX* m, const LCXVECTOR3* scl)
{
	m->Scaling(scl);
}

void  LCXMatrixScaling(LCXMATRIX* m, FLOAT x, FLOAT y, FLOAT z)
{
	m->Scaling(x,y,z);
}


void  LCXMatrixRotationX(LCXMATRIX* m, FLOAT rad)
{
	m->RotationX(rad);
}


void  LCXMatrixRotationY(LCXMATRIX* m, FLOAT rad)
{
	m->RotationY(rad);
}

void  LCXMatrixRotationZ(LCXMATRIX* m, FLOAT rad)
{
	m->RotationZ(rad);
}

void  LCXMatrixRotationAxis(LCXMATRIX* m, const LCXVECTOR3* axs, FLOAT rad)
{
	m->RotationAxis(axs->x, axs->y, axs->z, rad);
}

void  LCXMatrixLerp(LCXMATRIX* m, const LCXMATRIX* m1, const LCXMATRIX* m2, FLOAT t)
{
	m->Lerp(m1, m2, t);
}


INT   LCXMatrixAxisCosSinRadian(LCXVECTOR3 *pAxs
								, FLOAT* pCos, FLOAT* pSin, FLOAT* pRad
								, const LCXMATRIX *tm, INT bLHR)

{
	FLOAT c = (tm->_11 +  tm->_22 +  tm->_33 -1.0F)/2.0F;
	FLOAT x = tm->_32 - tm->_23;
	FLOAT y = tm->_13 - tm->_31;
	FLOAT z = tm->_21 - tm->_12;

	FLOAT l = sqrt(x*x +y*y + z*z);
	FLOAT s = l/2.0F;

	// Error
	if(0.0001F > fabsf(c) && 0.0001F> l)
		return LC_EFAIL;

	if(0.0001F < l)
	{
		x /= l;
		y /= l;
		z /= l;
	}


	if(pSin) *pSin = s;
	if(pCos) *pCos = c;
	if(pRad) *pRad = LCXMathAtan2(s, c);
	if(pAxs)
	{
		pAxs->x = x;
		pAxs->y = y;
		pAxs->z = z;

		if(!bLHR)
		{
			pAxs->x = -x;
			pAxs->y = -y;
			pAxs->z = -z;
		}
	}

	return LC_OK;
}


INT   LCXMatrixAxisCosSinRadian(LCXVECTOR3 *pAxs
								, FLOAT* pCos, FLOAT* pSin, FLOAT* pRad
								, const LCXMAT4X3 *tm, INT bLHR)

{
	FLOAT c = (tm->_11 +  tm->_22 +  tm->_33 -1.0F)/2.0F;

	FLOAT x = tm->_32 - tm->_23;
	FLOAT y = tm->_13 - tm->_31;
	FLOAT z = tm->_21 - tm->_12;

	FLOAT l = sqrt(x*x +y*y + z*z);
	FLOAT s = l/2.0F;

	// Error
	if(0.0001F > fabsf(c) && 0.0001F> l)
		return LC_EFAIL;

	if(0.0001F < l)
	{
		x /= l;
		y /= l;
		z /= l;
	}


	if(pSin) *pSin = s;
	if(pCos) *pCos = c;
	if(pRad) *pRad = LCXMathAtan2(s, c);
	if(pAxs)
	{
		pAxs->x = x;
		pAxs->y = y;
		pAxs->z = z;

		if(!bLHR)
		{
			pAxs->x = -x;
			pAxs->y = -y;
			pAxs->z = -z;
		}
	}

	return LC_OK;
}


void LCXMatrixFromQuat(LCXMATRIX* Out, const LCXQUATERNION* q, INT bLHR)
{
	FLOAT   x = q->x;
	FLOAT   y = q->y;
	FLOAT   z = q->z;
	FLOAT   w = q->w;

	FLOAT xx = x * x;
	FLOAT yy = y * y;
	FLOAT zz = z * z;

	FLOAT xy = x * y;
	FLOAT yz = y * z;
	FLOAT xz = z * x;

	FLOAT xw = x * w;
	FLOAT yw = y * w;
	FLOAT zw = z * w;


	if(bLHR)
	{
		// D3D
		Out->_11 = 1 - 2*yy - 2*zz;	Out->_21 =     2*xy - 2*zw;	Out->_31 =     2*xz + 2*yw;
		Out->_12 =     2*xy + 2*zw;	Out->_22 = 1 - 2*xx - 2*zz;	Out->_32 =     2*yz - 2*xw;
		Out->_13 =     2*xz - 2*yw;	Out->_23 =     2*yz + 2*xw;	Out->_33 = 1 - 2*xx - 2*yy;
	}
	else
	{
		Out->_11 = 1 - 2*yy - 2*zz;	Out->_12 =     2*xy - 2*zw;	Out->_13 =     2*xz + 2*yw;
		Out->_21 =     2*xy + 2*zw;	Out->_22 = 1 - 2*xx - 2*zz;	Out->_23 =     2*yz - 2*xw;
		Out->_31 =     2*xz - 2*yw;	Out->_32 =     2*yz + 2*xw;	Out->_33 = 1 - 2*xx - 2*yy;
	}

															Out->_14 = 0.0F;
															Out->_24 = 0.0F;
															Out->_34 = 0.0F;
	Out->_41 = 0.0F;  Out->_42 = 0.0F;  Out->_43 = 0.0F;	Out->_44 = 1.0F;
}


void  LCXMatrixFromQuat(LCXMAT4X3* Out, const LCXQUATERNION* q, INT bLHR)
{
	FLOAT   x = q->x;
	FLOAT   y = q->y;
	FLOAT   z = q->z;
	FLOAT   w = q->w;

	FLOAT xx = x * x;
	FLOAT yy = y * y;
	FLOAT zz = z * z;

	FLOAT xy = x * y;
	FLOAT yz = y * z;
	FLOAT xz = z * x;

	FLOAT xw = x * w;
	FLOAT yw = y * w;
	FLOAT zw = z * w;


	if(bLHR)
	{
		// D3D
		Out->_11 = 1 - 2*yy - 2*zz;	Out->_21 =     2*xy - 2*zw;	Out->_31 =     2*xz + 2*yw;
		Out->_12 =     2*xy + 2*zw;	Out->_22 = 1 - 2*xx - 2*zz;	Out->_32 =     2*yz - 2*xw;
		Out->_13 =     2*xz - 2*yw;	Out->_23 =     2*yz + 2*xw;	Out->_33 = 1 - 2*xx - 2*yy;
	}
	else
	{
		Out->_11 = 1 - 2*yy - 2*zz;	Out->_12 =     2*xy - 2*zw;	Out->_13 =     2*xz + 2*yw;
		Out->_21 =     2*xy + 2*zw;	Out->_22 = 1 - 2*xx - 2*zz;	Out->_23 =     2*yz - 2*xw;
		Out->_31 =     2*xz - 2*yw;	Out->_32 =     2*yz + 2*xw;	Out->_33 = 1 - 2*xx - 2*yy;
	}

	Out->_41 = 0.0F;  Out->_42 = 0.0F;  Out->_43 = 0.0F;
}


void LCXMatrix4X4From4X3(LCXMAT4X4* Out, const LCXMAT4X3* tm)
{
	Out->_11 = tm->_11;	Out->_12 = tm->_12;	Out->_13 = tm->_13;	Out->_14 = 0.0F;
	Out->_21 = tm->_21;	Out->_22 = tm->_22;	Out->_23 = tm->_23;	Out->_24 = 0.0F;
	Out->_31 = tm->_31;	Out->_32 = tm->_32;	Out->_33 = tm->_33;	Out->_34 = 0.0F;
	Out->_41 = tm->_41;	Out->_42 = tm->_42;	Out->_43 = tm->_43;	Out->_44 = 1.0F;
}

void LCXMatrix4X4From3X3(LCXMAT4X4* Out, const LCXMAT3X3* tm)
{
	Out->_11 = tm->_11;	Out->_12 = tm->_12;	Out->_13 = tm->_13;	Out->_14 = 0.0F;
	Out->_21 = tm->_21;	Out->_22 = tm->_22;	Out->_23 = tm->_23;	Out->_24 = 0.0F;
	Out->_31 = tm->_31;	Out->_32 = tm->_32;	Out->_33 = tm->_33;	Out->_34 = 0.0F;
	Out->_41 = 0.0F;	Out->_42 = 0.0F;	Out->_43 = 0.0F;	Out->_44 = 1.0F;
}

void LCXMatrix4X4From3X2(LCXMAT4X4* Out, const LCXMAT3X2* tm)
{
	Out->_11 = tm->_11;	Out->_12 = tm->_12;	Out->_13 = 0.0F;	Out->_14 = 0.0F;
	Out->_21 = tm->_21;	Out->_22 = tm->_22;	Out->_23 = 0.0F;	Out->_24 = 0.0F;
	Out->_31 = tm->_31;	Out->_32 = tm->_32;	Out->_33 = 1.0F;	Out->_34 = 0.0F;
	Out->_41 = 0.0F;	Out->_42 = 0.0F;	Out->_43 = 0.0F;	Out->_44 = 1.0F;
}

void LCXMatrix4X4From2X2(LCXMAT4X4* Out, const LCXMAT2X2* tm)
{
	Out->_11 = tm->_11;	Out->_12 = tm->_12;	Out->_13 = 0.0F;	Out->_14 = 0.0F;
	Out->_21 = tm->_21;	Out->_22 = tm->_22;	Out->_23 = 0.0F;	Out->_24 = 0.0F;
	Out->_31 = 0.0F;	Out->_32 = 0.0F;	Out->_33 = 1.0F;	Out->_34 = 0.0F;
	Out->_41 = 0.0F;	Out->_42 = 0.0F;	Out->_43 = 0.0F;	Out->_44 = 1.0F;
}


void LCXMatrix4X3From4X4(LCXMAT4X3* Out, const LCXMAT4X4* tm)
{
	Out->_11 = tm->_11;	Out->_12 = tm->_12;	Out->_13 = tm->_13;
	Out->_21 = tm->_21;	Out->_22 = tm->_22;	Out->_23 = tm->_23;
	Out->_31 = tm->_31;	Out->_32 = tm->_32;	Out->_33 = tm->_33;
	Out->_41 = tm->_41;	Out->_42 = tm->_42;	Out->_43 = tm->_43;
}

void LCXMatrix4X3From3X3(LCXMAT4X3* Out, const LCXMAT3X3* tm)
{
	Out->_11 = tm->_11;	Out->_12 = tm->_12;	Out->_13 = tm->_13;
	Out->_21 = tm->_21;	Out->_22 = tm->_22;	Out->_23 = tm->_23;
	Out->_31 = tm->_31;	Out->_32 = tm->_32;	Out->_33 = tm->_33;
	Out->_41 = 0.0F;	Out->_42 = 0.0F;	Out->_43 = 0.0F;
}

void LCXMatrix4X3From3X2(LCXMAT4X3* Out, const LCXMAT3X2* tm)
{
	Out->_11 = tm->_11;	Out->_12 = tm->_12;	Out->_13 = 0.0F;
	Out->_21 = tm->_21;	Out->_22 = tm->_22;	Out->_23 = 0.0F;
	Out->_31 = tm->_31;	Out->_32 = tm->_32;	Out->_33 = 0.0F;
	Out->_41 = 0.0F;	Out->_42 = 0.0F;	Out->_43 = 0.0F;
}

void LCXMatrix4X3From2X2(LCXMAT4X3* Out, const LCXMAT2X2* tm)
{
	Out->_11 = tm->_11;	Out->_12 = tm->_12;	Out->_13 = 0.0F;
	Out->_21 = tm->_21;	Out->_22 = tm->_22;	Out->_23 = 0.0F;
	Out->_31 = 0.0F;	Out->_32 = 0.0F;	Out->_33 = 1.0F;
	Out->_41 = 0.0F;	Out->_42 = 0.0F;	Out->_43 = 0.0F;
}


// 3x3 matrix must be transform matrix.
//    => _31 = _32 = _34 = 0.0F, _33= 1.0F _41 = tm->_31;
//       _42 = tm->_32; _43 = tm->_33;	_44 = 1.0F;
void  LCXMatrix4X4From3X3Tm(LCXMAT4X4* Out, const LCXMAT3X3* tm)
{
	Out->_11 = tm->_11;	Out->_12 = tm->_12;	Out->_13 = 0.0F; Out->_14 = tm->_13;
	Out->_21 = tm->_21;	Out->_22 = tm->_22;	Out->_23 = 0.0F; Out->_24 = tm->_23;
	Out->_31 = 0.0F   ;	Out->_32 = 0.0F   ;	Out->_33 = 1.0F; Out->_34 = 0.0F   ;
	Out->_41 = tm->_31;	Out->_42 = tm->_32;	Out->_43 = 0.0F; Out->_44 = tm->_33;
}


void LCXMatrixViewport(LCXMATRIX* Out, const FLOAT* vpt)
{
	FLOAT   fW = 0;
	FLOAT   fH = 0;
	FLOAT   fD = 0;
	FLOAT   fY = 0;
	FLOAT   fX = 0;

	FLOAT   fM = vpt[4];

	//fW = pVpt->w *0.5F;
	//fH = pVpt->h *0.5F;
	//fD = pVpt->z - pVpt->n;
	//fX = pVpt->x + fW;
	//fY = pVpt->y + fH;

	fW = vpt[2] *0.5F;
	fH = vpt[3] *0.5F;
	fD = vpt[5] - vpt[4];
	fX = vpt[0] + fW;
	fY = vpt[1] + fH;

	*Out = LCXMATRIX( fW  ,  0.0F,  0.0F, 0.0F,
                      0.0F,  -fH ,  0.0F, 0.0F,
                      0.0F,  0.0F,  fD  , 0.0F,
                      fX  ,    fY,  fM  , 1.0F);
}

void LCXMatrixScreenOrient(LC_HANDLE pOut, INT nModelType)		// Get the system window direction matrix. needs FLOAT*16. ModelType:: LC_OBJ_SPRITE, LC_OBJ_GUI, LC_RSC_MODEL2D
{
	//INT _scnW, _scnH;
	//LcVar_WindowSize(&_scnW, &_scnH);
	//INT nOrient= LCSYS::g_LC_Orient;
	//FLOAT scnW = (FLOAT)_scnW;
	//FLOAT scnH = (FLOAT)_scnH;

	((LCXMATRIX*)pOut)->Identity();

	//if(LCSYS_ORIENT_LLANDSCAPE == nOrient)
	//{
	//	if(LC_OBJ_SPRITE == nModelType || LC_OBJ_GUI == nModelType)
	//	{
	//		*((LCXMATRIX*)pOut)=LCXMATRIX(
	//						0.0F,  1.0F, 0.0F, 0.0F
	//					  ,-1.0F,  0.0F, 0.0F, 0.0F
	//					  , 0.0F,  0.0F, 1.0F, 0.0F
	//					  , scnW,  0.0F, 0.0F, 1.0F);
	//	}
	//	else if(LC_OBJ_MODEL2D == nModelType)
	//	{
	//		*((LCXMATRIX*)pOut)=LCXMATRIX(
	//						0.0F,  1.0F, 0.0F, 0.0F
	//					  ,-1.0F,  0.0F, 0.0F, 0.0F
	//					  , 0.0F,  0.0F, 1.0F, 0.0F
	//					  , 0.0F,  0.0F, 0.0F, 1.0F);
	//	}
	//}
	//else if(LCSYS_ORIENT_RLANDSCAPE == nOrient)
	//{
	//	if(LC_OBJ_SPRITE == nModelType || LC_OBJ_GUI == nModelType)
	//	{
	//		*((LCXMATRIX*)pOut)=LCXMATRIX(
	//						0.0F, -1.0F, 0.0F, 0.0F
	//					  , 1.0F,  0.0F, 0.0F, 0.0F
	//					  , 0.0F,  0.0F, 1.0F, 0.0F
	//					  , 0.0F,  scnH, 0.0F, 1.0F);
	//	}
	//	else if(LC_OBJ_MODEL2D == nModelType)
	//	{
	//		*((LCXMATRIX*)pOut)=LCXMATRIX(
	//						0.0F, -1.0F, 0.0F, 0.0F
	//					  , 1.0F,  0.0F, 0.0F, 0.0F
	//					  , 0.0F,  0.0F, 1.0F, 0.0F
	//					  , 0.0F,  scnH, 0.0F, 1.0F);
	//	}
	//}
}




//++5++++1+++++++++2+++++++++3+++++++++4+++++++++5+++++++++6+++++++++7+++++++++8


INT LCXVec3Greater(const LCXVECTOR3* p1, const LCXVECTOR3* p2)
{
	return (p1->x < p2->x && p1->y < p2->y && p1-> z < p2->z) ? 0: -1;
}

INT	LCXVec3Less(const LCXVECTOR3* p1, const LCXVECTOR3* p2)
{
	return (p1->x > p2->x && p1->y > p2->y && p1->z > p2->z)? 0: -1;
}


INT	LCXVec3Equal(const LCXVECTOR3* p1, const LCXVECTOR3* p2, FLOAT epsilon)
{
	return	fabsf(p1->x -p2->x) < epsilon &&
			fabsf(p1->y -p2->y) < epsilon &&
			fabsf(p1->z -p2->z) < epsilon
			;
}

//
void LCXVec3RotationDegrees(LCXVECTOR3* Out, const LCXMATRIX* In)
{
	FLOAT y = -asinf(In->m[2][0]);
	FLOAT D = y;
	FLOAT C = cosf(y);

	y = LCXToDegree(y);

	FLOAT rotx, roty, x, z;

	if (fabsf(C)>0.0005f)
	{
		rotx = In->m[2][2] / C;
		roty = In->m[1][2] / C;
		x = LCXMathAtan2( roty, rotx );
		x = LCXToDegree(x);

		rotx = In->m[0][0] / C;
		roty = In->m[0][1] / C;
		z = LCXMathAtan2( roty, rotx );
		z = LCXToDegree(z);
	}
	else
	{
		x  = 0.0F;
		rotx = In->m[1][1];
		roty =-In->m[1][0];
		z  = LCXMathAtan2( roty, rotx );
		z = LCXToDegree(z);
	}

	// fix values that Get below zero
	// before it would set (!) values to 360
	// that where above 360:
	if (x < 0.0F) x += 360.0F;
	if (y < 0.0F) y += 360.0F;
	if (z < 0.0F) z += 360.0F;

	Out->x = x;
	Out->y = y;
	Out->z = z;
}


void LCXMatrixRotationRadians(LCXMATRIX* Out, const LCXVECTOR3* pRot)
{
	LCXMatrixIdentity(Out);

	FLOAT cr = cosf( pRot->x );
	FLOAT sr = sinf( pRot->x );
	FLOAT cp = cosf( pRot->y );
	FLOAT sp = sinf( pRot->y );
	FLOAT cy = cosf( pRot->z );
	FLOAT sy = sinf( pRot->z );

	Out->m[0][0] =  cp*cy;
	Out->m[0][1] =  cp*sy;
	Out->m[0][2] =  -sp  ;

	FLOAT srsp = sr*sp;
	FLOAT crsp = cr*sp;

	Out->m[1][0] = srsp*cy-cr*sy;
	Out->m[1][1] = srsp*sy+cr*cy;
	Out->m[1][2] = sr*cp;

	Out->m[2][0] = crsp*cy+sr*sy;
	Out->m[2][1] = crsp*sy-sr*cy;
	Out->m[2][2] = cr*cp;

	//	LCXMatrixRotationX(&mtX, pRot.x);
	//	LCXMatrixRotationY(&mtY, pRot.y);
	//	LCXMatrixRotationZ(&mtZ, pRot.z);
	//	*Out = mtX * mtY * mtZ;
}


void LCXMatrixRotationDegrees(LCXMATRIX* Out, const LCXVECTOR3* pRot)
{
	LCXVECTOR3 rot = *pRot;
	rot.x = LCXToDegree(rot.x);
	rot.y = LCXToDegree(rot.y);
	rot.z = LCXToDegree(rot.z);

	LCXMatrixRotationRadians(Out, &rot);
}



void LCXMatrixInverseRotationRadians(LCXMATRIX* Out, const LCXVECTOR3* pRot)
{
	LCXMatrixIdentity(Out);

	FLOAT cr = cosf( pRot->x );
	FLOAT sr = sinf( pRot->x );
	FLOAT cp = cosf( pRot->y );
	FLOAT sp = sinf( pRot->y );
	FLOAT cy = cosf( pRot->z );
	FLOAT sy = sinf( pRot->z );

	Out->m[0][0] = cp*cy;
	Out->m[1][0] = cp*sy;
	Out->m[2][0] = -sp  ;

	FLOAT srsp = sr*sp;
	FLOAT crsp = cr*sp;

	Out->m[0][1] = srsp*cy-cr*sy;
	Out->m[1][1] = srsp*sy+cr*cy;
	Out->m[2][1] = sr*cp ;

	Out->m[0][2] = crsp*cy+sr*sy;
	Out->m[1][2] = crsp*sy-sr*cy;
	Out->m[2][2] = cr*cp ;
}


void LCXMatrixInverseRotationDegrees(LCXMATRIX* Out, const LCXVECTOR3* pRot)
{
	LCXVECTOR3 rot = *pRot;
	rot.x = LCXToDegree(rot.x);
	rot.y = LCXToDegree(rot.y);
	rot.z = LCXToDegree(rot.z);

	LCXMatrixInverseRotationRadians(Out, &rot );
}




//++5++++1+++++++++2+++++++++3+++++++++4+++++++++5+++++++++6+++++++++7+++++++++8


void LCXLerpFloat2(FLOAT* Out, const FLOAT* p1, const FLOAT* p2, FLOAT g)
{
	FLOAT b = 1.0F - g;

	Out[0] = p1[0] * b + p2[0] * g;
	Out[1] = p1[1] * b + p2[1] * g;
}


void LCXLerpFloat3(FLOAT* Out, const FLOAT* p1, const FLOAT* p2, FLOAT g)
{
	FLOAT b = 1.0F - g;

	Out[0] = p1[0] * b + p2[0] * g;
	Out[1] = p1[1] * b + p2[1] * g;
	Out[2] = p1[2] * b + p2[2] * g;
}

void LCXLerpFloat4(FLOAT* Out, const FLOAT* p1, const FLOAT* p2, FLOAT g)
{
	FLOAT b = 1.0F - g;

	Out[0] = p1[0] * b + p2[0] * g;
	Out[1] = p1[1] * b + p2[1] * g;
	Out[2] = p1[2] * b + p2[2] * g;
	Out[3] = p1[3] * b + p2[3] * g;
}


void LCXLerpFloat(FLOAT* Out, const FLOAT* p1, const FLOAT* p2, FLOAT g, INT count)
{
	FLOAT b = 1.0F - g;
	for(INT i=0; i<count; ++i)
		Out[i] = p1[i] * b + p2[i] * g;
}

